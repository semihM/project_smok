::EntityDetailTables <- 
{
	beam = 
	{
		beam_spotlight = 
		{
			description = "beam_spotlight is a  point entity available in all Source games since [Left 4 Dead] Left 4 Dead. It is used to draw a spotlight. Will draw a beam when the player views it side on, and a halo when it's facing towards the player. It will also create a dynamic light wherever the end of the spotlight rests. Other than its ability to rotate, this entity is functionally identical to point_spotlight.\n In code, it is represented by class CBeamSpotlight, defined in beamspotlight.cpp."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Start On"
					notes = ""
				}
				"2":
				{
					category = ""
					description = "No Dynamic Light - Do not create any actual light."
					notes = ""
				}
				"4":
				{
					category = ""
					description = "Start with Rotation On"
					notes = ""
				}
				"8":
				{
					category = ""
					description = "Reverse Direction"
					notes = ""
				}
				"16":
				{
					category = ""
					description = "X Axis ([Clarify] are these axes relative to the world or to the entity?)"
					notes = ""
				}
				"32":
				{
					category = ""
					description = "Y Axis"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"maxspeed":
				{
					typename = "integer"
					shortinfo = "Max Rotation Speed"
					extra = ""
					notes = ""
					description = "The maximum rotation speed of the spotlight, in degrees per second."
					choices = {}
				}
				"SpotlightLength":
				{
					typename = "integer"
					shortinfo = "Spotlight Length"
					extra = ""
					notes = ""
					description = "Length of the spotlight beam."
					choices = {}
				}
				"SpotlightWidth":
				{
					typename = "integer"
					shortinfo = "Spotlight Width"
					extra = ""
					notes = ""
					description = "Width of the spotlight beam."
					choices = {}
				}
				"HDRColorScale":
				{
					typename = "float"
					shortinfo = "HDR color scale"
					extra = ""
					notes = ""
					description = "Multiplier for sprite color by when running in HDR mode."
					choices = {}
				}
				"HaloSprite":
				{
					typename = "sprite"
					shortinfo = "Halo Sprite"
					extra = ""
					notes = ""
					description = "The material that should be used for the halo. [Left 4 Dead] only."
					choices = {}
				}
				"BeamSprite":
				{
					typename = "sprite"
					shortinfo = "Beam Sprite"
					extra = ""
					notes = ""
					description = "The material that should be used for the beam. [Left 4 Dead] only."
					choices = {}
				}
				"rendermode":
				{
					typename = "choices"
					shortinfo = "Render Mode"
					extra = ""
					notes = ""
					description = "Set a non-standard rendering mode on this entity."
					choices = 
					{
						"0" : "Normal"
						"1" : "Color"
						"2" : "Texture"
						"3" : "Glow"
						"4" : "Solid/Alphatest"
						"5" : "Additive"
						"6" : "Removed, does nothing"
						"7" : "Additive Fractional Frame"
						"8" : "Alpha Add"
						"9" : "World Space Glow"
						"10" : "Don't Render"

					}
				}
				"renderamt":
				{
					typename = "integer"
					shortinfo = "Render FX / Transparency (0 - 255)"
					extra = ""
					notes = ""
					description = "Transparency amount, requires a Render Mode other than Normal. 0 is invisible, 255 is fully visible."
					choices = {}
				}
				"rendercolor":
				{
					typename = "color255"
					shortinfo = "Render Color (R G B)"
					extra = ""
					notes = ""
					description = "Color tint."
					choices = {}
				}
				"disablereceiveshadows":
				{
					typename = "boolean"
					shortinfo = "Disable Receiving Shadows"
					extra = ""
					notes = ""
					description = "Prevent the entity from receiving shadows on itself."
					choices = {}
				}
				"renderfx":
				{
					typename = "choices"
					shortinfo = "Render FX"
					extra = ""
					notes = ""
					description = "Preset pattern of appearance effects."
					choices = 
					{
						"0" : "None"
						"1" : "Slow Pulse"
						"2" : "Fast Pulse"
						"3" : "Slow Wide Pulse"
						"4" : "Fast Wide Pulse"
						"5" : "Slow Fade Away"
						"6" : "Fast Fade Away"
						"7" : "Slow Become Solid"
						"8" : "Fast Become Solid"
						"9" : "Slow Strobe"
						"10" : "Fast Strobe"
						"11" : "Faster Strobe"
						"12" : "Slow Flicker"
						"13" : "Fast Flicker"
						"14" : "Constant Glow"
						"15" : "Distort"
						"16" : "Hologram (Distort + fade)"
						"17" : "Scale Up"
						"18" : "Glowing Shell (OBSOLETE)"
						"19" : "Clamp Minimum Scale (OBSOLETE)"
						"20" : "Environmental Rain (OBSOLETE)"
						"21" : "Environmental Snow (OBSOLETE)"
						"22" : "Spotlight FX"
						"23" : "Ragdoll"
						"24" : "Fade Wider Pulse"

					}
				}
			}
		}
		
	}
	commentary = 
	{
		commentary_dummy = 
		{
			description = "[Left 4 Dead][Left 4 Dead 2]�commentary_dummy is a  point entity available in the Left 4 Dead series. It is used in the Developer Commentary mode of both Left 4 Dead and Left 4 Dead 2 to display a model to the player, such as a Survivor model."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "model_path"
					shortinfo = "Dummy Model"
					extra = ""
					notes = ""
					description = ""
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "integer"
					shortinfo = "Eye Height"
					extra = ""
					notes = ""
					description = "Eye height relative to origin. Only necessary when staring at players"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "string"
					shortinfo = "Starting Animation"
					extra = ""
					notes = ""
					description = "The name of the starting animation that this dummy will play when it spawns."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "string"
					shortinfo = "Starting Weapons"
					extra = ""
					notes = "Note: Requires weapon script names, such as 'weapon_pistol' and 'weapon_rifle_desert'. Does not work with melee weapons. Only adds a weapon into the models hands, ignoring attachment points for carried items. Making listing multiple weapons useless, as only last listed weapon will be used"
					description = "The names of any weapons the dummy should have when it spawns. Separated by spaces, commas, or semicolons. Last specified weapon will be equipped"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_5":
				{
					typename = "boolean"
					shortinfo = "Stare at players"
					extra = ""
					notes = "Note: If yet to 'Yes' entire body turns towards player, but if set to 'No', the models eyes will stare to the map center. Set 'Head Yaw Pose Parameter' and 'Head Pitch Pose Parameter' to a random letter to have the player not turn towards you and just have its eyes following you."
					description = "Set to true if you want the dummy to attempt to stare at players all the time."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_6":
				{
					typename = "string"
					shortinfo = "Head Yaw Pose Parameter"
					extra = ""
					notes = ""
					description = "The name of the head yaw pose parameter. Only necessary when staring at players"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_7":
				{
					typename = "string"
					shortinfo = "Head Pitch Pose Parameter"
					extra = ""
					notes = ""
					description = "The name of the head yaw pose parameter. Only necessary when staring at players"
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		commentary_zombie_spawner = 
		{
			description = "[Left 4 Dead][Left 4 Dead 2]�commentary_zombie_spawner is a  point entity available in the Left 4 Dead series. It is a manual spawning point for specific types of zombies for the commentary mode."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
			}
		}
		
	}
	env = 
	{
		env_airstrike_indoors = 
		{
			description = "[Left 4 Dead 2]�env_airstrike_indoors is a  point entity available in Left 4 Dead 2. It simulates an airstrike effect for indoors (crumbling ceiling)."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "choices"
					shortinfo = "Effect Height"
					extra = ""
					notes = ""
					description = "Value\nDescription\n\n\n-1\nAutomatic\n\n\n0\n128 inches\n\n\n1\n144 inches\n\n\n2\n152 inches\n\n\n3\n160 inches\n\n\n4\n190 inches\n\n\n5\n300 inches\n\n\n6\n320 inches"
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		env_airstrike_outdoors = 
		{
			description = "[Left 4 Dead 2]�env_airstrike_outdoors is a  point entity available in Left 4 Dead 2. It simulates an airstrike effect for outdoors (exploding roof, ground)."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "model_path"
					shortinfo = "Model"
					extra = ""
					notes = ""
					description = "Model name"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "targetname"
					shortinfo = "Animation group"
					extra = ""
					notes = ""
					description = "Targetname of one or multiple dynamic_props to choreograph along with our sequence."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "string"
					shortinfo = "Random sequence 1"
					extra = ""
					notes = ""
					description = "Sequence for the model to play when the effect begins."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "string"
					shortinfo = "Random sequence 2"
					extra = ""
					notes = ""
					description = "Sequence for the model to play when the effect begins."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
			}
		}
		env_detail_controller = 
		{
			description = "env_detail_controller is a  point entity available in all Source games. It overrides the fade distances for all details sprites in the map.\n In code, it is represented by class CEnvDetailController, defined in env_detail_controller.cpp."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"fademindist":
				{
					typename = "integer"
					shortinfo = "Start Fade Dist/Pixels"
					extra = ""
					notes = ""
					description = "The distance at which the detail props will start fading away."
					choices = {}
				}
				"fademaxdist":
				{
					typename = "integer"
					shortinfo = "End Fade Dist/Pixels"
					extra = ""
					notes = ""
					description = "The distance at which the detail props will stop fading and stop drawing entirely."
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"disableX360":
				{
					typename = "boolean"
					shortinfo = "Disable for Xbox 360"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "If Yes, disables this entity on the Xbox 360 version of Source."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"LagCompensate":
				{
					typename = "boolean"
					shortinfo = "Lag Compensation"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "Set to Yes to lag compensate this entity. Should be used very sparingly!"
					choices = {}
				}
				"is_autoaim_target":
				{
					typename = "boolean"
					shortinfo = "Is Automatic-Aim Target"
					extra = "(in all games since [Counter-Strike: Global Offensive])�!FGD"
					notes = ""
					description = "If set to 1, this entity will slow down aiming movement for consoles and joystick controllers when the entity is under the crosshairs."
					choices = {}
				}
			}
		}
		env_outtro_stats = 
		{
			description = "[Left 4 Dead][Left 4 Dead 2]�env_outtro_stats is a  point entity available in the Left 4 Dead series. It controls the outtro stats at the end of a campaign."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		env_physics_blocker = 
		{
			description = "[Left 4 Dead 2]�env_physics_blocker is a  point entity available in Left 4 Dead 2. It blocks players and physics objects."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "vector"
					shortinfo = "Mins"
					extra = ""
					notes = ""
					description = ""
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "vector"
					shortinfo = "Maxs"
					extra = ""
					notes = ""
					description = ""
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "choices"
					shortinfo = "Initial State"
					extra = ""
					notes = ""
					description = "Initial state of the blocker\n0�: Disabled\n1�: Enabled"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "choices"
					shortinfo = "Blocks"
					extra = ""
					notes = ""
					description = "Value\nDescription\n\n\n0\nEveryone\n\n\n1\nSurvivors\n\n\n2\nPlayer Infected\n\n\n3\nAll Special Infected (Player and AI)\n\n\n4\nAll players and physics objects"
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		env_player_blocker = 
		{
			description = "[Left 4 Dead][Left 4 Dead 2]�env_player_blocker is a  point entity available in the Left 4 Dead series. It blocks any PC/NPC from entering of the specified type."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "vector"
					shortinfo = "Mins"
					extra = ""
					notes = ""
					description = ""
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "vector"
					shortinfo = "Maxs"
					extra = ""
					notes = ""
					description = ""
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "choices"
					shortinfo = "Initial State"
					extra = ""
					notes = ""
					description = "Initial state of the blocker\n0�: Disabled\n1�: Enabled"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "choices"
					shortinfo = "Blocks"
					extra = ""
					notes = ""
					description = "What should be blocked\n0�: Everyone\n1�: Survivors\n2�: Player Infected\n3�: All Special Infected (Player and AI)"
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		env_rock_launcher = 
		{
			description = "[Left 4 Dead][Left 4 Dead 2]�env_rock_launcher is a  point entity available in the Left 4 Dead series. This entity spawns and launches rocks that are typically spawned by the Tank in the Left 4 Dead Series. It is useful for cutscenes or other scripted events."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "targetname"
					shortinfo = "Target Name"
					extra = ""
					notes = ""
					description = "The name of the entity to throw the rock at."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "integer"
					shortinfo = "Rock Damage Override"
					extra = ""
					notes = ""
					description = "damage to be used instead of the the default rock damage."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
			}
		}
		env_weaponfire = 
		{
			description = "[Left 4 Dead][Left 4 Dead 2]�env_weaponfire is a  point entity available in the Left 4 Dead series. This entity is used to mimic weapon fire from the guns in L4D. It does damage, muzzle flash, tracers, and impact effects. While it is great for intro cinematics, the entity is not 100% faithful to L4D weapon behavior (shots don't penetrate multiple zombies, for example). All effects are done client side, and so bandwidth usage is pretty low but it isn't perfectly in-sync with the server-side damage calculation."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "float"
					shortinfo = "Target Arc"
					extra = ""
					notes = ""
					description = "The arc that the entity will seach for targets (in degrees)"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "float"
					shortinfo = "Target Range"
					extra = ""
					notes = ""
					description = "The distance that the endity will search for targets (in inches)"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "filter"
					shortinfo = "Target Filter"
					extra = ""
					notes = ""
					description = "Filter to use to determine if an entity is a valid target"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "float"
					shortinfo = "Damage Modifier"
					extra = ""
					notes = ""
					description = "Used to increase or decrease the amount of damage per shot"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_5":
				{
					typename = "choices"
					shortinfo = "Weapon Type"
					extra = ""
					notes = ""
					description = "Type of weapon for the effects\n1�: Assault Rifle\n2�: Hunting Rifle\n3�: Auto Shotgun"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_6":
				{
					typename = "choices"
					shortinfo = "Target Team"
					extra = ""
					notes = ""
					description = "Team to shoot at\n3�: Zombies\n2�: Survivors\n-1�: Either"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_7":
				{
					typename = "boolean"
					shortinfo = "Ignore Players"
					extra = ""
					notes = ""
					description = "Setting this will make the bullets not harm players."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
				"StartDisabled":
				{
					typename = "boolean"
					shortinfo = "Start Disabled"
					extra = ""
					notes = ""
					description = "Stay dormant until activated (probably with the Enable input)."
					choices = {}
				}
			}
		}
		env_beam = 
		{
			description = "env_beam is a  point entity available in all Source games. It creates a visible energy beam running between two entities, in either a line or ring shape. Similar to env_laser.\n In code, it is represented by class CEnvBeam, defined in EnvBeam.cpp.\nThe start and end can be any entity, except for internal entities or any other entity that could remove itself automatically, like info_null. If both the start and end point entities are destroyed in-game, the beam will no longer work.\nDevelopers can specify a group of multiple starting/ending entities by giving them the same name. The env_beam will then randomly select one of these entities to use for each strike. If entity names for either points is omitted, a random point on a solid surface within the radius (specified in its Radius property) will be selected for each strike instead. If both points are omitted, the center will be the env_beam entity itself. Such randomized beams do not cause damage.\nThe beam will always visibly run from start to end, even through solid brushes. The beam's damage will be absorbed by the first solid thing it hits. If Life is greater than 0, the beam will deal this damage only once, while a permanent beam (Life at 0) will inflict damage gradually."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Start On - Starts the map with the beam turned on."
					notes = ""
				}
				"2":
				{
					category = ""
					description = "Toggle - Obsolete. Replaced by the Toggle input in the Source I/O system. Used to toggle the beam on and off."
					notes = ""
				}
				"4":
				{
					category = ""
					description = "Random Strike - When the beam has died, it will strike again randomly within the time set by Strike again time (secs)."
					notes = ""
				}
				"8":
				{
					category = ""
					description = "Ring - Uses the starting and ending points as a diameter, drawing a beam ring between them instead of a straight line."
					notes = ""
				}
				"16":
				{
					category = ""
					description = "StartSparks - Every time the beam strikes or is turned on, the beam temporarily emits a small shower of sparks at its Start Entity."
					notes = ""
				}
				"32":
				{
					category = ""
					description = "EndSparks - Every time the beam strikes or is turned on, the beam temporarily emits a small shower of sparks at its Ending Entity."
					notes = ""
				}
				"64":
				{
					category = ""
					description = "Decal End - Places a decal scorch mark where a damaging beam hits the first solid object (world brush or entity). Refer to the Decal Name keyvalue to set the decal you wish to appear at the end of the beam."
					notes = ""
				}
				"128":
				{
					category = ""
					description = "Shade Start - The beam fades out toward its Start Entity. Overrides Shade End. Does not work on striking beams or beam rings."
					notes = ""
				}
				"256":
				{
					category = ""
					description = "Shade End - The beam fades out toward its Ending Entity. Is overridden by Shade Start. Does not work on striking beams (Life > 0) or beam rings."
					notes = ""
				}
				"512":
				{
					category = ""
					description = "Taper Out - Makes the beam taper out into a point towards its Ending Entity. Does not work on striking beams (Life > 0) or beam rings."
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"Radius":
				{
					typename = "integer"
					shortinfo = "Radius"
					extra = ""
					notes = ""
					description = "If the Start Entity and/or Ending Entity values are omitted, this radius determines the area within which the endpoints will randomly strike. A new random position will be appointed for every strike."
					choices = {}
				}
				"life":
				{
					typename = "string"
					shortinfo = "Life (seconds 0 = infinite)"
					extra = ""
					notes = ""
					description = "Amount of time before the beam dies. Setting to zero will make the beam stay forever."
					choices = {}
				}
				"BoltWidth":
				{
					typename = "float"
					shortinfo = "Width of beam"
					extra = ""
					notes = ""
					description = "Pixel width of the beam. Range: 1 to MAX_BEAM_WIDTH."
					choices = {}
				}
				"framerate":
				{
					typename = "integer"
					shortinfo = "Frames per 10 seconds"
					extra = ""
					notes = ""
					description = "Framerate at which the beam texture should animate, if it has multiple frames."
					choices = {}
				}
				"StrikeTime":
				{
					typename = "string"
					shortinfo = "Strike again time (secs)"
					extra = ""
					notes = ""
					description = "Refire time between random strikes of the beam. Only used if the 'Random Strike' spawnflag is set."
					choices = {}
				}
				"LightningStart":
				{
					typename = "targetname"
					shortinfo = "Start Entity"
					extra = ""
					notes = ""
					description = "Entity that the beam starts at. If omitted the entity will instead use a random position on any surface within its Radius value. A new random position will be appointed for every strike. See usage note above."
					choices = {}
				}
				"LightningEnd":
				{
					typename = "targetname"
					shortinfo = "Ending Entity"
					extra = ""
					notes = ""
					description = "Entity that the beam ends at. If omitted the entity will instead use a random position on any surface within its Radius value. A new random position will be appointed for every strike. See usage note above."
					choices = {}
				}
				"decalname":
				{
					typename = "string"
					shortinfo = "Decal Name"
					extra = ""
					notes = ""
					description = "Decal to be applied at the end of the beam"
					choices = {}
				}
				"TouchType":
				{
					typename = "choices"
					shortinfo = "Touch Type (tripwire)"
					extra = ""
					notes = ""
					description = "If you want the beam to fire an output when touched by entities, choose the entity type here.\n0: Not a tripwire\n1: Player Only\n2: NPC Only\n3: Player or NPC\n4: Player or NPC or Physprop"
					choices = {}
				}
				"filtername":
				{
					typename = "filter"
					shortinfo = "Filter Name"
					extra = ""
					notes = ""
					description = "Filter to use to see if activator triggers me."
					choices = {}
				}
				"targetpoint":
				{
					typename = "vector"
					shortinfo = "Endpoint handle"
					extra = ""
					notes = ""
					description = "If a Ending Entity entity is not specified, use this point as the destination instead. If the beam moves, the destination point will move along with it."
					choices = {}
				}
				"renderamt":
				{
					typename = "integer"
					shortinfo = "Brightness (1 - 255)"
					extra = ""
					notes = ""
					description = "Misleading name; beam alpha. Invisible when set to 0."
					choices = {}
				}
				"rendercolor":
				{
					typename = "color255"
					shortinfo = "Beam Color (R G B)"
					extra = ""
					notes = ""
					description = "Beam color."
					choices = {}
				}
				"damage":
				{
					typename = "string"
					shortinfo = "Damage/second"
					extra = ""
					notes = "Note: Damage is scaled to the difficulty setting:/nEasy: 50%/nNormal: 100%/nHard: 150%"
					description = "How much damage this beam does per second to things it hits when it is continually on, or instantaneously if it strikes. For continuous damage, the value should be greater than 10 or it may not work."
					choices = {}
				}
				"HDRColorScale":
				{
					typename = "float"
					shortinfo = "HDR color scale"
					extra = ""
					notes = ""
					description = "Value to multiply sprite color by when running in HDR mode."
					choices = {}
				}
				"ClipStyle":
				{
					typename = "choices"
					shortinfo = "Beam clipping"
					extra = ""
					notes = ""
					description = "Select whether you want the beam to clip against geometry or characters.\n0: Do not clip (default)\n1: Clip to geometry\n2: Clip to everything solid"
					choices = {}
				}
				"dissolvetype":
				{
					typename = "choices"
					shortinfo = "Dissolve Type"
					extra = ""
					notes = ""
					description = "If this beam damages and kills something, effects to show around the object.\n-1: None\n0: Energy\n1: Heavy Electrical\n2: Light Electrical"
					choices = {}
				}
				"NoiseAmplitude":
				{
					typename = "float"
					shortinfo = "Amount of noise (0-255)"
					extra = ""
					notes = "Note: The name says the maximum is 255, but by default the maximum value is 64. Values higher than 64 will default to 64."
					description = "The amount of noise in the beam. 0 is a perfectly straight beam, while the maximum is very jagged. Range: 0 to MAX_BEAM_NOISEAMPLITUDE."
					choices = {}
				}
				"texture":
				{
					typename = "sprite"
					shortinfo = "Sprite Name"
					extra = ""
					notes = ""
					description = "The material used to draw the beam."
					choices = {}
				}
				"TextureScroll":
				{
					typename = "integer"
					shortinfo = "Texture Scroll Rate (0-100)"
					extra = ""
					notes = ""
					description = "Rate at which the beam texture should scroll along the beam. Range: 0 to MAX_BEAM_SCROLLSPEED."
					choices = {}
				}
				"framestart":
				{
					typename = "integer"
					shortinfo = "Starting Frame"
					extra = ""
					notes = ""
					description = "The frame to start the beam texture on."
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"disableX360":
				{
					typename = "boolean"
					shortinfo = "Disable for Xbox 360"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "If Yes, disables this entity on the Xbox 360 version of Source."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"LagCompensate":
				{
					typename = "boolean"
					shortinfo = "Lag Compensation"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "Set to Yes to lag compensate this entity. Should be used very sparingly!"
					choices = {}
				}
				"is_autoaim_target":
				{
					typename = "boolean"
					shortinfo = "Is Automatic-Aim Target"
					extra = "(in all games since [Counter-Strike: Global Offensive])�!FGD"
					notes = ""
					description = "If set to 1, this entity will slow down aiming movement for consoles and joystick controllers when the entity is under the crosshairs."
					choices = {}
				}
			}
		}
		env_beverage = 
		{
			description = "env_beverage is a  point entity available in all Source games. It is a Half-Life legacy entity: the beverage dispenser. This entity dispenses soda cans (item_sodacan) when +used.\nThese are not used for the dispensers in Half-Life 2. Those are done with a func_button and point_template.\n In code, it is represented by class CEnvBeverage, defined in effects.cpp."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"health":
				{
					typename = "integer"
					shortinfo = "Capacity"
					extra = ""
					notes = ""
					description = "Number of cans in the dispenser."
					choices = {}
				}
				"beveragetype":
				{
					typename = "choices"
					shortinfo = "Beverage Type"
					extra = ""
					notes = ""
					description = "Type of the cans.\n0: Coca-Cola\n1: Sprite\n2: Diet Coke\n3: Orange\n4: Surge\n5: Moxie\n6: Random"
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"disableX360":
				{
					typename = "boolean"
					shortinfo = "Disable for Xbox 360"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "If Yes, disables this entity on the Xbox 360 version of Source."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"LagCompensate":
				{
					typename = "boolean"
					shortinfo = "Lag Compensation"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "Set to Yes to lag compensate this entity. Should be used very sparingly!"
					choices = {}
				}
				"is_autoaim_target":
				{
					typename = "boolean"
					shortinfo = "Is Automatic-Aim Target"
					extra = "(in all games since [Counter-Strike: Global Offensive])�!FGD"
					notes = ""
					description = "If set to 1, this entity will slow down aiming movement for consoles and joystick controllers when the entity is under the crosshairs."
					choices = {}
				}
			}
		}
		env_blood = 
		{
			description = "env_blood is a  point entity available in all Source games. It is used to spawn blood effects. By default, the env_blood creates an animated splash of blood at its origin when triggered; however, the env_blood can be set up to spray blood decals onto nearby objects. This entity will only function through inputs.\nDoes not appear to work properly in Team Fortress 2. The blood texture is missing.\n In code, it is represented by class CBlood, defined in effects.cpp."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Random Direction"
					notes = ""
				}
				"2":
				{
					category = ""
					description = "Blood Stream"
					notes = ""
				}
				"4":
				{
					category = ""
					description = "On Player"
					notes = ""
				}
				"8":
				{
					category = ""
					description = "Spray decals"
					notes = ""
				}
				"16":
				{
					category = ""
					description = "Cloud !FGD - Emits a much larger cloud of blood."
					notes = ""
				}
				"32":
				{
					category = ""
					description = "Drops !FGD - Splashes large blood drops."
					notes = ""
				}
				"64":
				{
					category = ""
					description = "Gore !FGD - Emits an effect similar to Cloud but smaller."
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"spraydir":
				{
					typename = "angle"
					shortinfo = "Spray Direction (Pitch Yaw Roll)"
					extra = ""
					notes = ""
					description = "The general direction that the blood should spray and the direction to trace to apply the decal."
					choices = {}
				}
				"color":
				{
					typename = "choices"
					shortinfo = "Blood Color"
					extra = ""
					notes = ""
					description = "Color of the spraying blood.\n0: Red (Human)\n1: Yellow (Alien)"
					choices = {}
				}
				"amount":
				{
					typename = "float"
					shortinfo = "Amount of blood (damage to simulate)"
					extra = ""
					notes = ""
					description = "Intensity of the blood spray."
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"disableX360":
				{
					typename = "boolean"
					shortinfo = "Disable for Xbox 360"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "If Yes, disables this entity on the Xbox 360 version of Source."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"LagCompensate":
				{
					typename = "boolean"
					shortinfo = "Lag Compensation"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "Set to Yes to lag compensate this entity. Should be used very sparingly!"
					choices = {}
				}
				"is_autoaim_target":
				{
					typename = "boolean"
					shortinfo = "Is Automatic-Aim Target"
					extra = "(in all games since [Counter-Strike: Global Offensive])�!FGD"
					notes = ""
					description = "If set to 1, this entity will slow down aiming movement for consoles and joystick controllers when the entity is under the crosshairs."
					choices = {}
				}
			}
		}
		env_bubbles = 
		{
			description = "env_bubbles is a  brush entity available in all Source games. It is used to create a volume in which to spawn rising bubbles. The number and frequency of bubbles can be adjusted.\nenv_bubbles is obviously intended for use in water, but it can be used outside of water if such an effect is desired.\n In code, it is represented by class CBubbling, defined in effects.cpp."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Start Off"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"density":
				{
					typename = "integer"
					shortinfo = "Bubble density"
					extra = ""
					notes = ""
					description = "Bubble Count in Volume."
					choices = {}
				}
				"frequency":
				{
					typename = "integer"
					shortinfo = "Bubble frequency"
					extra = ""
					notes = ""
					description = "Bubble emission frequency, in bubbles per second."
					choices = {}
				}
				"current":
				{
					typename = "integer"
					shortinfo = "Speed of Current"
					extra = ""
					notes = ""
					description = "The speed of the water current in the volume, used to move the bubbles."
					choices = {}
				}
				"mins":
				{
					typename = "vector"
					shortinfo = "Minimum Bounding Box Size"
					extra = "!FGD"
					notes = ""
					description = "Co-ordinate of the minimum bounding box corner. The bounding box is drawn from this corner to the other one. Requires Bounding Box collisions (solid 2) to be used. Can be used to overwrite the collision shape of a brush, although it can only be a cuboid."
					choices = {}
				}
				"maxs":
				{
					typename = "vector"
					shortinfo = "Maximum Bounding Box Size"
					extra = "!FGD"
					notes = ""
					description = "Co-ordinate of the maximum bounding box corner. The bounding box is drawn from this corner to the other one. Requires Bounding Box collisions (solid 2) to be used. Can be used to overwrite the collision shape of a brush, although it can only be a cuboid."
					choices = {}
				}
				"solid":
				{
					typename = "choices"
					shortinfo = "Collisions"
					extra = "!FGD"
					notes = ""
					description = "Method of collision for this entity.\n0: None\n1: BSP (QPhysics)\n2: Bounding Box\n3: Oriented Bounding Box\n4: Oriented Bounding Box, constrained to Yaw only\n5: Custom/Test\n6: VPhysics"
					choices = {}
				}
				"modelindex":
				{
					typename = "short"
					shortinfo = "Model Index"
					extra = "!FGD"
					notes = ""
					description = "Changes the entity's model to a precached model on the map."
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"disableX360":
				{
					typename = "boolean"
					shortinfo = "Disable for Xbox 360"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "If Yes, disables this entity on the Xbox 360 version of Source."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"LagCompensate":
				{
					typename = "boolean"
					shortinfo = "Lag Compensation"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "Set to Yes to lag compensate this entity. Should be used very sparingly!"
					choices = {}
				}
				"is_autoaim_target":
				{
					typename = "boolean"
					shortinfo = "Is Automatic-Aim Target"
					extra = "(in all games since [Counter-Strike: Global Offensive])�!FGD"
					notes = ""
					description = "If set to 1, this entity will slow down aiming movement for consoles and joystick controllers when the entity is under the crosshairs."
					choices = {}
				}
			}
		}
		env_credits = 
		{
			description = "env_credits is a  point entity available in all Source games. This entity is used to control the rolling credits. The credits text that's displayed is determined inside the file scripts/credits.txt see that file for an example of how the script should be laid out.\n In code, it is represented by class CCredits, defined in EnvMessage.cpp."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"disableX360":
				{
					typename = "boolean"
					shortinfo = "Disable for Xbox 360"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "If Yes, disables this entity on the Xbox 360 version of Source."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"LagCompensate":
				{
					typename = "boolean"
					shortinfo = "Lag Compensation"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "Set to Yes to lag compensate this entity. Should be used very sparingly!"
					choices = {}
				}
				"is_autoaim_target":
				{
					typename = "boolean"
					shortinfo = "Is Automatic-Aim Target"
					extra = "(in all games since [Counter-Strike: Global Offensive])�!FGD"
					notes = ""
					description = "If set to 1, this entity will slow down aiming movement for consoles and joystick controllers when the entity is under the crosshairs."
					choices = {}
				}
			}
		}
		env_cubemap = 
		{
			description = "env_cubemap is a internal point entity available in all Source games. It specifies a location for which a cubemap will be generated when the buildcubemaps console command is executed. Materials with $envmap will use the nearest cubemap as their reflection."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"cubemapsize":
				{
					typename = "choices"
					shortinfo = "Cubemap Size"
					extra = ""
					notes = ""
					description = "The resolution of each face of the cubemap. Remember that the actual number of pixels stored will be your selection times six, so higher numbers will make for very large file sizes!\n0: Default (usually 32x32, depending on the game)\n1: 1x1\n2: 2x2\n3: 4x4\n4: 8x8\n5: 16x16\n6: 32x32\n7: 64x64\n8: 128x128\n9: 256x256\n10: 512x512 � !FGD\n11: 1024x1024 � !FGD\n12: 2048x2048 � !FGD"
					choices = {}
				}
				"sides":
				{
					typename = "sidelist"
					shortinfo = "Brush faces"
					extra = ""
					notes = ""
					description = "An optional override for individual brush faces, forcing them to use this cubemap instead of one closest to them. To select faces, press the Pick button then click on them in the 3D view. Hold Ctrl to toggle a face on or off."
					choices = {}
				}
			}
		}
		env_dof_controller = 
		{
			description = "env_dof_controller is a  point entity available in all Source games since [Left 4 Dead] Left 4 Dead. This entity controls the depth of field settings for all players.\n In code, it is represented by class CEnvDOFController, defined in env_dof_controller.cpp."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"enabled":
				{
					typename = "boolean"
					shortinfo = "Enabled"
					extra = "(in all games since [Alien Swarm])"
					notes = ""
					description = "Whether the effect should begin active. If it starts inactive, it must be enabled with SetNearBlurRadius or SetFarBlurRadius."
					choices = {}
				}
				"near_blur":
				{
					typename = "float"
					shortinfo = "Near blur depth"
					extra = "(in all games since [Alien Swarm])"
					notes = ""
					description = "Distance that the blurriness is at its peak near the viewpoint."
					choices = {}
				}
				"near_focus":
				{
					typename = "float"
					shortinfo = "Near focus depth"
					extra = "(in all games since [Alien Swarm])"
					notes = ""
					description = "Distance that the focus is in full effect near the viewpoint."
					choices = {}
				}
				"near_radius":
				{
					typename = "float"
					shortinfo = "Near blur radius"
					extra = "(in all games since [Alien Swarm])"
					notes = ""
					description = "Radius (in pixels) to blur the surrounding pixels."
					choices = {}
				}
				"far_blur":
				{
					typename = "float"
					shortinfo = "Far blur depth"
					extra = "(in all games since [Alien Swarm])"
					notes = ""
					description = "Distance where blurriness is at its peak far from the viewpoint."
					choices = {}
				}
				"far_focus":
				{
					typename = "float"
					shortinfo = "Far focus depth"
					extra = "(in all games since [Alien Swarm])"
					notes = ""
					description = "Distance that the focus is in full effect far from the viewpoint."
					choices = {}
				}
				"far_radius":
				{
					typename = "float"
					shortinfo = "Far blur radius"
					extra = "(in all games since [Alien Swarm])"
					notes = ""
					description = "Radius (in pixels) to blur the surrounding pixels."
					choices = {}
				}
				"focus_target":
				{
					typename = "targetname"
					shortinfo = "Focus target"
					extra = "(in all games since [Alien Swarm])"
					notes = ""
					description = "Entity to use as a focal point."
					choices = {}
				}
				"focus_range":
				{
					typename = "float"
					shortinfo = "Focus target range"
					extra = "(in all games since [Alien Swarm])"
					notes = ""
					description = "Distance behind the focal plane to remain in focus."
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"disableX360":
				{
					typename = "boolean"
					shortinfo = "Disable for Xbox 360"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "If Yes, disables this entity on the Xbox 360 version of Source."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"LagCompensate":
				{
					typename = "boolean"
					shortinfo = "Lag Compensation"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "Set to Yes to lag compensate this entity. Should be used very sparingly!"
					choices = {}
				}
				"is_autoaim_target":
				{
					typename = "boolean"
					shortinfo = "Is Automatic-Aim Target"
					extra = "(in all games since [Counter-Strike: Global Offensive])�!FGD"
					notes = ""
					description = "If set to 1, this entity will slow down aiming movement for consoles and joystick controllers when the entity is under the crosshairs."
					choices = {}
				}
			}
		}
		env_dustpuff = 
		{
			description = "env_dustpuff is a  point entity available in all Source games. It can emit dust puffs. The size and transparency of the puffs of dust cannot be controlled, but puff's dust color is adjustable.\n In code, it is represented by class CEnvDustPuff, defined in func_dust.cpp."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"scale":
				{
					typename = "float"
					shortinfo = "Scale"
					extra = ""
					notes = ""
					description = "Size of the dust puff."
					choices = {}
				}
				"speed":
				{
					typename = "float"
					shortinfo = "Speed"
					extra = ""
					notes = ""
					description = "Speed at which the dust particles should move."
					choices = {}
				}
				"color":
				{
					typename = "color255"
					shortinfo = "Dust color"
					extra = ""
					notes = ""
					description = "Color of the dust particles."
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"disableX360":
				{
					typename = "boolean"
					shortinfo = "Disable for Xbox 360"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "If Yes, disables this entity on the Xbox 360 version of Source."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"LagCompensate":
				{
					typename = "boolean"
					shortinfo = "Lag Compensation"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "Set to Yes to lag compensate this entity. Should be used very sparingly!"
					choices = {}
				}
				"is_autoaim_target":
				{
					typename = "boolean"
					shortinfo = "Is Automatic-Aim Target"
					extra = "(in all games since [Counter-Strike: Global Offensive])�!FGD"
					notes = ""
					description = "If set to 1, this entity will slow down aiming movement for consoles and joystick controllers when the entity is under the crosshairs."
					choices = {}
				}
			}
		}
		env_effectscript = 
		{
			description = "env_effectscript is a  point entity available in all Source games. It allows scripting special visual effects via a script file. Two are used in d1_trainstation_05[Half-Life 2].\n In code, it is represented by class CEnvEffectsScript, defined in env_effectsscript.cpp."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"model":
				{
					typename = "model_path"
					shortinfo = "Script Model"
					extra = ""
					notes = ""
					description = "Model to use for animation sequences. Defaults to models/Effects/teleporttrail.mdl."
					choices = {}
				}
				"scriptfile":
				{
					typename = "string"
					shortinfo = "Script File"
					extra = ""
					notes = ""
					description = "Name of the script to use for this model. Defaults to scripts/effects/testeffect.txt."
					choices = {}
				}
				"model":
				{
					typename = "string"
					shortinfo = "World Model"
					extra = ""
					notes = ""
					description = "The model this entity should appear as. 128-character limit."
					choices = {}
				}
				"skin_or_ModelSkin_[Alien_Swarm]":
				{
					typename = "integer"
					shortinfo = "Skin"
					extra = ""
					notes = ""
					description = "Some models have multiple skins. This value selects from the index, starting with 0."
					choices = {}
				}
				"solid":
				{
					typename = "choices"
					shortinfo = "Collisions"
					extra = ""
					notes = ""
					description = "Method of collision for this entity.\n0: None\n1: BSP (QPhysics) !FGD �Bug:�In [Portal 2] Portal 2, if an entity using QPhysics collisions is hit by Gel, the game will crash!\n2: Bounding Box\n3: Oriented Bounding Box !FGD\n4: Oriented Bounding Box, constrained to Yaw only !FGD\n5: Custom/Test !FGD\n6: VPhysics"
					choices = {}
				}
				"body_or_SetBodyGroup":
				{
					typename = "integer"
					shortinfo = "Body Group"
					extra = "!FGD"
					notes = ""
					description = "Sets the the active $bodygroup."
					choices = {}
				}
				"hitboxset":
				{
					typename = "string"
					shortinfo = "Hitbox Set"
					extra = "!FGD"
					notes = ""
					description = "Sets the $hboxset to use."
					choices = {}
				}
				"sequence":
				{
					typename = "integer"
					shortinfo = "Sequence"
					extra = "!FGD"
					notes = ""
					description = "Default animation sequence for the model to be playing after spawning."
					choices = {}
				}
				"playbackrate":
				{
					typename = "float"
					shortinfo = "Playback Rate"
					extra = "!FGD"
					notes = ""
					description = "A multiplier of the framerate at which animations are played, negative values are accepted. Default is 1.0"
					choices = {}
				}
				"cycle":
				{
					typename = "float"
					shortinfo = "Cycle"
					extra = "!FGD"
					notes = ""
					description = "The current frame of the currently playing animation, on a range from 0-1."
					choices = {}
				}
				"LightingOrigin":
				{
					typename = "targetname"
					shortinfo = "Lighting Origin"
					extra = ""
					notes = ""
					description = "Select an entity (not info_lighting!) from which to sample lighting instead of the entity's origin."
					choices = {}
				}
				"LightingOriginHack":
				{
					typename = "targetname"
					shortinfo = "Lighting Origin Offset"
					extra = "!FGD"
					notes = ""
					description = "The info_lighting_relative from which to sample lighting instead of the entity's origin. Not in [Left 4 Dead][Left 4 Dead 2]."
					choices = {}
				}
				"damagefilter":
				{
					typename = "targetname"
					shortinfo = "Damage Filter Name"
					extra = ""
					notes = ""
					description = "When this entity receives damage, it will filter by this entity."
					choices = {}
				}
				"fademindist":
				{
					typename = "float"
					shortinfo = "Start Fade Distance"
					extra = ""
					notes = ""
					description = "Distance at which the entity starts fading. If <0, the entity will disappear instantly when end fade is hit. The value will scale appropriately if the entity is in a 3D Skybox."
					choices = {}
				}
				"fademaxdist":
				{
					typename = "float"
					shortinfo = "End Fade Distance"
					extra = ""
					notes = ""
					description = "Distance at which the entity ends fading. If <0, the entity won't disappear at all. The value will scale appropriately if the entity is in a 3D Skybox."
					choices = {}
				}
				"fadescale":
				{
					typename = "float"
					shortinfo = "Fade Scale"
					extra = ""
					notes = ""
					description = "If specified in the worldspawn, or if the engine is running below DirectX 8, entities will fade out even if the fade distances above aren't specified. This value gives more control over when this happens: numbers smaller than 1 cause the entity to fade out at further distances, and greater than 1 cause it to fade out at closer distances. Using 0 turns off the forced fade altogether. See also $noforcedfade."
					choices = {}
				}
				"rendermode":
				{
					typename = "choices"
					shortinfo = "Render Mode"
					extra = ""
					notes = ""
					description = "Set a non-standard rendering mode on this entity."
					choices = 
					{
						"0" : "Normal"
						"1" : "Color"
						"2" : "Texture"
						"3" : "Glow"
						"4" : "Solid/Alphatest"
						"5" : "Additive"
						"6" : "Removed, does nothing"
						"7" : "Additive Fractional Frame"
						"8" : "Alpha Add"
						"9" : "World Space Glow"
						"10" : "Don't Render"

					}
				}
				"renderamt":
				{
					typename = "integer"
					shortinfo = "Render FX / Transparency (0 - 255)"
					extra = ""
					notes = ""
					description = "Transparency amount, requires a Render Mode other than Normal. 0 is invisible, 255 is fully visible."
					choices = {}
				}
				"rendercolor":
				{
					typename = "color255"
					shortinfo = "Render Color (R G B)"
					extra = ""
					notes = ""
					description = "Color tint."
					choices = {}
				}
				"renderfx":
				{
					typename = "choices"
					shortinfo = "Render FX"
					extra = ""
					notes = ""
					description = "Preset pattern of appearance effects."
					choices = 
					{
						"0" : "None"
						"1" : "Slow Pulse"
						"2" : "Fast Pulse"
						"3" : "Slow Wide Pulse"
						"4" : "Fast Wide Pulse"
						"5" : "Slow Fade Away"
						"6" : "Fast Fade Away"
						"7" : "Slow Become Solid"
						"8" : "Fast Become Solid"
						"9" : "Slow Strobe"
						"10" : "Fast Strobe"
						"11" : "Faster Strobe"
						"12" : "Slow Flicker"
						"13" : "Fast Flicker"
						"14" : "Constant Glow"
						"15" : "Distort"
						"16" : "Hologram (Distort + fade)"
						"17" : "Scale Up"
						"22" : "Spotlight FX"
						"23" : "Cull By Distance"
						"24" : "Fade Wider Pulse"
						"26" : "Fade Near"

					}
				}
			}
		}
		env_embers = 
		{
			description = "env_embers is a  brush entity available in all Source games. It spawns fire embers within its volume. For some reason its state can only be changed with the Use input.\n In code, it is represented by class CEmbers, defined in effects.cpp."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Start On"
					notes = ""
				}
				"2":
				{
					category = ""
					description = "Toggle - If left off, only one Use input will ever be accepted."
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"particletype":
				{
					typename = "choices"
					shortinfo = "Ember type"
					extra = "[Obsolete]"
					notes = ""
					description = "Deprecated.�Not present in code. The manner in which embers should appear and disappear.\n0: Normal\n1: Smooth Fade\n2: Pulled"
					choices = {}
				}
				"density":
				{
					typename = "integer"
					shortinfo = "Density"
					extra = ""
					notes = ""
					description = "Number of particles spawned each second."
					choices = {}
				}
				"lifetime":
				{
					typename = "integer"
					shortinfo = "Particle Lifetime"
					extra = ""
					notes = ""
					description = "Number of seconds each particle lasts for. A certain amount of randomness is added proportional to the time specified here."
					choices = {}
				}
				"speed":
				{
					typename = "integer"
					shortinfo = "Particle Speed"
					extra = ""
					notes = ""
					description = "Number of units moved by particles each second."
					choices = {}
				}
				"rendercolor":
				{
					typename = "color255"
					shortinfo = "Ember Color"
					extra = ""
					notes = ""
					description = "Color of the sprites."
					choices = {}
				}
				"mins":
				{
					typename = "vector"
					shortinfo = "Minimum Bounding Box Size"
					extra = "!FGD"
					notes = ""
					description = "Co-ordinate of the minimum bounding box corner. The bounding box is drawn from this corner to the other one. Requires Bounding Box collisions (solid 2) to be used. Can be used to overwrite the collision shape of a brush, although it can only be a cuboid."
					choices = {}
				}
				"maxs":
				{
					typename = "vector"
					shortinfo = "Maximum Bounding Box Size"
					extra = "!FGD"
					notes = ""
					description = "Co-ordinate of the maximum bounding box corner. The bounding box is drawn from this corner to the other one. Requires Bounding Box collisions (solid 2) to be used. Can be used to overwrite the collision shape of a brush, although it can only be a cuboid."
					choices = {}
				}
				"solid":
				{
					typename = "choices"
					shortinfo = "Collisions"
					extra = "!FGD"
					notes = ""
					description = "Method of collision for this entity.\n0: None\n1: BSP (QPhysics)\n2: Bounding Box\n3: Oriented Bounding Box\n4: Oriented Bounding Box, constrained to Yaw only\n5: Custom/Test\n6: VPhysics"
					choices = {}
				}
				"modelindex":
				{
					typename = "short"
					shortinfo = "Model Index"
					extra = "!FGD"
					notes = ""
					description = "Changes the entity's model to a precached model on the map."
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"disableX360":
				{
					typename = "boolean"
					shortinfo = "Disable for Xbox 360"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "If Yes, disables this entity on the Xbox 360 version of Source."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"LagCompensate":
				{
					typename = "boolean"
					shortinfo = "Lag Compensation"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "Set to Yes to lag compensate this entity. Should be used very sparingly!"
					choices = {}
				}
				"is_autoaim_target":
				{
					typename = "boolean"
					shortinfo = "Is Automatic-Aim Target"
					extra = "(in all games since [Counter-Strike: Global Offensive])�!FGD"
					notes = ""
					description = "If set to 1, this entity will slow down aiming movement for consoles and joystick controllers when the entity is under the crosshairs."
					choices = {}
				}
			}
		}
		env_entity_igniter = 
		{
			description = "env_entity_igniter is a  point entity available in all Source games. It catches a target entity on fire. If the target is an animating model, it will have flame sprites attached to its skeleton. Otherwise the target will emit particle flame puffs.\nThis entity may also use entityflame for the classname.\n In code, it is represented by class CEntityFlame[Half-Life 2][Portal][Team Fortress 2][Left 4 Dead], defined in EntityFlame.cpp.\n In code, it is represented by class CEnvEntityIgniter[Left 4 Dead 2][Alien Swarm][Portal 2][Counter-Strike: Global Offensive], defined in EntityFlame.cpp."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"target":
				{
					typename = "targetname"
					shortinfo = "Entity to ignite"
					extra = ""
					notes = ""
					description = "Name of the entity to catch on fire."
					choices = {}
				}
				"lifetime":
				{
					typename = "float"
					shortinfo = "Lifetime in seconds"
					extra = ""
					notes = ""
					description = "Duration of flames."
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"disableX360":
				{
					typename = "boolean"
					shortinfo = "Disable for Xbox 360"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "If Yes, disables this entity on the Xbox 360 version of Source."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"LagCompensate":
				{
					typename = "boolean"
					shortinfo = "Lag Compensation"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "Set to Yes to lag compensate this entity. Should be used very sparingly!"
					choices = {}
				}
				"is_autoaim_target":
				{
					typename = "boolean"
					shortinfo = "Is Automatic-Aim Target"
					extra = "(in all games since [Counter-Strike: Global Offensive])�!FGD"
					notes = ""
					description = "If set to 1, this entity will slow down aiming movement for consoles and joystick controllers when the entity is under the crosshairs."
					choices = {}
				}
			}
		}
		env_entity_maker = 
		{
			description = "env_entity_maker is a  point entity available in all Source games. It spawns a specified point_template entity at the env_entity_maker's origin. It can be set to spawn automatically or through inputs.\n In code, it is represented by class CEnvEntityMaker, defined in env_entity_maker.cpp."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Enable AutoSpawn - Spawn template whenever there's enough room to fit it, and the player is not looking."
					notes = ""
				}
				"2":
				{
					category = ""
					description = "AutoSpawn\t Wait for entity to be destroyed."
					notes = ""
				}
				"4":
				{
					category = ""
					description = "AutoSpawn\t Spawn even if the player is looking."
					notes = ""
				}
				"8":
				{
					category = ""
					description = "ForceSpawn\t Spawn only if there's enough room to fit the object."
					notes = ""
				}
				"16":
				{
					category = ""
					description = "ForceSpawn\t Spawn only if the player isn't looking."
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"EntityTemplate":
				{
					typename = "targetname"
					shortinfo = "Point_template To Spawn"
					extra = ""
					notes = ""
					description = "Name of the point_template to spawn here."
					choices = {}
				}
				"PostSpawnSpeed":
				{
					typename = "float"
					shortinfo = "PostSpawn Movement Speed"
					extra = ""
					notes = ""
					description = "All entities spawned will move this many hammer units per second in the direction of PostSpawn Movement Direction."
					choices = {}
				}
				"PostSpawnDirection":
				{
					typename = "angle"
					shortinfo = "PostSpawn Movement Direction"
					extra = ""
					notes = ""
					description = "All entities spawned in the template will move in this direction."
					choices = {}
				}
				"PostSpawnDirectionVariance":
				{
					typename = "float"
					shortinfo = "PostSpawn Direction Variance"
					extra = ""
					notes = ""
					description = "The PostSpawn Movement Direction may vary by this many degrees. This is a radius."
					choices = {}
				}
				"PostSpawnInheritAngles":
				{
					typename = "boolean"
					shortinfo = "PostSpawn Inherit Angles"
					extra = ""
					notes = ""
					description = "If Yes, offset the spawn angles by the angles of a Parent."
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"disableX360":
				{
					typename = "boolean"
					shortinfo = "Disable for Xbox 360"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "If Yes, disables this entity on the Xbox 360 version of Source."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"LagCompensate":
				{
					typename = "boolean"
					shortinfo = "Lag Compensation"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "Set to Yes to lag compensate this entity. Should be used very sparingly!"
					choices = {}
				}
				"is_autoaim_target":
				{
					typename = "boolean"
					shortinfo = "Is Automatic-Aim Target"
					extra = "(in all games since [Counter-Strike: Global Offensive])�!FGD"
					notes = ""
					description = "If set to 1, this entity will slow down aiming movement for consoles and joystick controllers when the entity is under the crosshairs."
					choices = {}
				}
			}
		}
		env_explosion = 
		{
			description = "env_explosion is a  point entity available in all Source games. It creates an explosion at its origin.\n In code, it is represented by class CEnvExplosion, defined in explode.cpp."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "No Damage"
					notes = ""
				}
				"2":
				{
					category = ""
					description = "Repeatable - Once the explosion has happened, the entity will not remove itself. Otherwise, it will be removed 0.3 seconds after the Explode input is sent (during that time it could possibly re-fire)."
					notes = ""
				}
				"4":
				{
					category = ""
					description = "No Fireball"
					notes = ""
				}
				"8":
				{
					category = ""
					description = "No Smoke - No effect."
					notes = ""
				}
				"16":
				{
					category = ""
					description = "No Decal - Black scorch decal left at the explosion center."
					notes = ""
				}
				"32":
				{
					category = ""
					description = "No Sparks - No effect."
					notes = ""
				}
				"64":
				{
					category = ""
					description = "No Sound"
					notes = ""
				}
				"128":
				{
					category = ""
					description = "Random Orientation"
					notes = ""
				}
				"256":
				{
					category = ""
					description = "No Fireball Smoke - Fireball smoke only spawns if the fireball itself can too."
					notes = ""
				}
				"512":
				{
					category = ""
					description = "No Particles"
					notes = ""
				}
				"1024":
				{
					category = ""
					description = "No DLights - No effect."
					notes = ""
				}
				"2048":
				{
					category = ""
					description = "Don't clamp Min - Allow much smaller fire sprites."
					notes = ""
				}
				"4096":
				{
					category = ""
					description = "Don't clamp Max - Allow much larger fire sprites."
					notes = ""
				}
				"8192":
				{
					category = ""
					description = "Damage above surface only - Don't do damage to the player if they are underwater."
					notes = ""
				}
				"16384":
				{
					category = ""
					description = "Generic damage - Do DMG_GENERIC damage, as opposed to DMG_BLAST."
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"iMagnitude":
				{
					typename = "integer"
					shortinfo = "Magnitude"
					extra = ""
					notes = ""
					description = "The amount of damage done by the explosion."
					choices = {}
				}
				"iRadiusOverride":
				{
					typename = "integer"
					shortinfo = "Radius Override"
					extra = ""
					notes = ""
					description = "If specified, the radius in which the explosion damages entities. If unspecified, the radius will be based on the magnitude."
					choices = {}
				}
				"fireballsprite":
				{
					typename = "sprite"
					shortinfo = "Fireball Sprite"
					extra = ""
					notes = ""
					description = "Sprite of the fireball."
					choices = {}
				}
				"rendermode":
				{
					typename = "choices"
					shortinfo = "Render Mode"
					extra = ""
					notes = ""
					description = "Render mode of the fireball.\n0: Normal\n4: Solid\n5: Additive"
					choices = {}
				}
				"ignoredEntity":
				{
					typename = "targetname"
					shortinfo = "Ignored Entity"
					extra = ""
					notes = ""
					description = "Do not harm or affect the named entity."
					choices = {}
				}
				"DamageForce":
				{
					typename = "float"
					shortinfo = "Damage Force"
					extra = "!FGD"
					notes = ""
					description = "If set, use this value as a magnitude for physics force."
					choices = {}
				}
				"ignoredClass":
				{
					typename = "integer"
					shortinfo = "Ignored Class"
					extra = ""
					notes = ""
					description = "Do not harm or affect this class of NPC."
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"disableX360":
				{
					typename = "boolean"
					shortinfo = "Disable for Xbox 360"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "If Yes, disables this entity on the Xbox 360 version of Source."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"LagCompensate":
				{
					typename = "boolean"
					shortinfo = "Lag Compensation"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "Set to Yes to lag compensate this entity. Should be used very sparingly!"
					choices = {}
				}
				"is_autoaim_target":
				{
					typename = "boolean"
					shortinfo = "Is Automatic-Aim Target"
					extra = "(in all games since [Counter-Strike: Global Offensive])�!FGD"
					notes = ""
					description = "If set to 1, this entity will slow down aiming movement for consoles and joystick controllers when the entity is under the crosshairs."
					choices = {}
				}
			}
		}
		env_fade = 
		{
			description = "env_fade is a  point entity available in all Source games. It controls screen fades to or from a solid color.  Add Duration and Hold Time together for the total time this entity will be in effect.\n In code, it is represented by class CEnvFade, defined in EnvFade.cpp."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Fade From - Screen fades from the specified color instead of to it."
					notes = ""
				}
				"2":
				{
					category = ""
					description = "Modulate - Uses attenuation blending to achieve the fade. The normal fade does a straight weighted blend between the screen and the fading color. Modulate actually attenuates the RGB channels. For example, a color of 0 255 0 would mute the red and blue channels and create a green nightvision-type effect."
					notes = ""
				}
				"4":
				{
					category = ""
					description = "Triggering player only !FGD - Only affects the screen of the !activator. !activator is probably the easiest to reach through a trigger entity. If not checked, the fade will apply to all players."
					notes = ""
				}
				"8":
				{
					category = ""
					description = "Stay Out - Fade remains indefinitely until another fade deactivates it."
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"duration":
				{
					typename = "string"
					shortinfo = "Duration (seconds)"
					extra = ""
					notes = ""
					description = "The time that it will take to fade the screen in or out."
					choices = {}
				}
				"holdtime":
				{
					typename = "string"
					shortinfo = "Hold Fade (seconds)"
					extra = ""
					notes = ""
					description = "The time to hold the faded in/out state."
					choices = {}
				}
				"renderamt":
				{
					typename = "integer"
					shortinfo = "Fade Alpha"
					extra = ""
					notes = ""
					description = "Alpha of the fade, where 0 = fully transparent and 255 = fully opaque."
					choices = {}
				}
				"rendercolor":
				{
					typename = "color255"
					shortinfo = "Fade Color (R G B)"
					extra = ""
					notes = ""
					description = "Fade color."
					choices = {}
				}
				"ReverseFadeDuration":
				{
					typename = "float"
					shortinfo = "Reverse Fade Duration (seconds)"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "The duration of the reverse fade."
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"disableX360":
				{
					typename = "boolean"
					shortinfo = "Disable for Xbox 360"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "If Yes, disables this entity on the Xbox 360 version of Source."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"LagCompensate":
				{
					typename = "boolean"
					shortinfo = "Lag Compensation"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "Set to Yes to lag compensate this entity. Should be used very sparingly!"
					choices = {}
				}
				"is_autoaim_target":
				{
					typename = "boolean"
					shortinfo = "Is Automatic-Aim Target"
					extra = "(in all games since [Counter-Strike: Global Offensive])�!FGD"
					notes = ""
					description = "If set to 1, this entity will slow down aiming movement for consoles and joystick controllers when the entity is under the crosshairs."
					choices = {}
				}
			}
		}
		env_fire = 
		{
			description = "env_fire is a  point entity available in all Source games. It handles a single flame (_firesmoke) at its origin. The flame causes heat 'damage' to other env_fire entities around it, and will eventually ignite them, causing the fire to spread.\n In code, it is represented by class CFire, defined in fire.cpp."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Infinite Duration"
					notes = "Note: In Alien Swarm, an env_fire cannot be extinguished with the fire extinguisher unless Infinite Duration is set."
				}
				"2":
				{
					category = ""
					description = "Smokeless"
					notes = ""
				}
				"4":
				{
					category = ""
					description = "Start On"
					notes = ""
				}
				"8":
				{
					category = ""
					description = "Start Full"
					notes = ""
				}
				"16":
				{
					category = ""
					description = "Don't drop"
					notes = ""
				}
				"32":
				{
					category = ""
					description = "No glow"
					notes = ""
				}
				"128":
				{
					category = ""
					description = "Delete when out"
					notes = ""
				}
				"256":
				{
					category = ""
					description = "Visible from above. () No sound (in all games since [Alien Swarm])"
					notes = ""
				}
				"512":
				{
					category = ""
					description = "No ignite sound (in all games since [Alien Swarm])"
					notes = ""
				}
				"1024":
				{
					category = ""
					description = "No fueling once lit (in all games since [Alien Swarm])"
					notes = ""
				}
				"2048":
				{
					category = ""
					description = "Fast burn think (in all games since [Alien Swarm])"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"health":
				{
					typename = "integer"
					shortinfo = "Duration"
					extra = ""
					notes = ""
					description = "Amount of time the fire will burn."
					choices = {}
				}
				"firesize":
				{
					typename = "integer"
					shortinfo = "Size"
					extra = ""
					notes = ""
					description = "Height (in world units) of the flame."
					choices = {}
				}
				"fireattack":
				{
					typename = "integer"
					shortinfo = "Attack"
					extra = ""
					notes = ""
					description = "Amount of time the fire takes to grow to full strength."
					choices = {}
				}
				"firetype":
				{
					typename = "choices"
					shortinfo = "Type"
					extra = ""
					notes = ""
					description = "Either Natural or Plasma. Natural is a general all purpose flame, like a wood fire.\n0: Natural\n1: Plasma (Effects for this type do not exist!)"
					choices = {}
				}
				"ignitionpoint":
				{
					typename = "float"
					shortinfo = "Ignition Point"
					extra = ""
					notes = ""
					description = "Amount of heat 'damage' to take before this flame should ignite."
					choices = {}
				}
				"damagescale":
				{
					typename = "float"
					shortinfo = "Damage Scale"
					extra = ""
					notes = ""
					description = "Multiplier of the burn damage done by the flame."
					choices = {}
				}
				"LightColor":
				{
					typename = "color255"
					shortinfo = "Light Color"
					extra = "(in all games since [Alien Swarm])"
					notes = ""
					description = "Color of dynamic light for this fire."
					choices = {}
				}
				"LightRadiusScale":
				{
					typename = "float"
					shortinfo = "Light Radius Scale"
					extra = "(in all games since [Alien Swarm])"
					notes = ""
					description = "Multiplier for the glow radius."
					choices = {}
				}
				"LightBrightness":
				{
					typename = "integer"
					shortinfo = "Light Brightness"
					extra = "(in all games since [Alien Swarm])"
					notes = ""
					description = "Integer exponent for the glow brightness."
					choices = {}
				}
				"LoopSound":
				{
					typename = "sound"
					shortinfo = "Loop sound"
					extra = "(in all games since [Alien Swarm])"
					notes = ""
					description = "Looping sound to play while this fire is burning."
					choices = {}
				}
				"IgniteSound":
				{
					typename = "sound"
					shortinfo = "Ignite sound"
					extra = "(in all games since [Alien Swarm])"
					notes = ""
					description = "One shot sound to play when the fire starts."
					choices = {}
				}
				"StartDisabled":
				{
					typename = "boolean"
					shortinfo = "Start Disabled"
					extra = ""
					notes = ""
					description = "Stay dormant until activated (probably with the Enable input)."
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"disableX360":
				{
					typename = "boolean"
					shortinfo = "Disable for Xbox 360"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "If Yes, disables this entity on the Xbox 360 version of Source."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"LagCompensate":
				{
					typename = "boolean"
					shortinfo = "Lag Compensation"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "Set to Yes to lag compensate this entity. Should be used very sparingly!"
					choices = {}
				}
				"is_autoaim_target":
				{
					typename = "boolean"
					shortinfo = "Is Automatic-Aim Target"
					extra = "(in all games since [Counter-Strike: Global Offensive])�!FGD"
					notes = ""
					description = "If set to 1, this entity will slow down aiming movement for consoles and joystick controllers when the entity is under the crosshairs."
					choices = {}
				}
			}
		}
		env_firesensor = 
		{
			description = "env_firesensor is a  point entity available in all Source games. It detects changes in heat from nearby env_fires.\n In code, it is represented by class CEnvFireSensor, defined in fire.cpp."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Start On"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"fireradius":
				{
					typename = "float"
					shortinfo = "Radius"
					extra = ""
					notes = ""
					description = "The radius around this entity in which to detect heat changes."
					choices = {}
				}
				"heatlevel":
				{
					typename = "float"
					shortinfo = "Heat level"
					extra = ""
					notes = ""
					description = "The target heat level to check for. Outputs are fired when the heat moves over this target level (increasing or decreasing)."
					choices = {}
				}
				"heattime":
				{
					typename = "float"
					shortinfo = "Time at level"
					extra = ""
					notes = ""
					description = "The amount of time the heat level must spend over the target level before the 'OnHeatLevelStart' output is fired."
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"disableX360":
				{
					typename = "boolean"
					shortinfo = "Disable for Xbox 360"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "If Yes, disables this entity on the Xbox 360 version of Source."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"LagCompensate":
				{
					typename = "boolean"
					shortinfo = "Lag Compensation"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "Set to Yes to lag compensate this entity. Should be used very sparingly!"
					choices = {}
				}
				"is_autoaim_target":
				{
					typename = "boolean"
					shortinfo = "Is Automatic-Aim Target"
					extra = "(in all games since [Counter-Strike: Global Offensive])�!FGD"
					notes = ""
					description = "If set to 1, this entity will slow down aiming movement for consoles and joystick controllers when the entity is under the crosshairs."
					choices = {}
				}
			}
		}
		env_firesource = 
		{
			description = "env_firesource is a  point entity available in all Source games. It provides heat to all nearby env_fire entities.\n In code, it is represented by class CEnvFireSource, defined in fire.cpp."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Start On"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"fireradius":
				{
					typename = "float"
					shortinfo = "Radius"
					extra = ""
					notes = ""
					description = "The radius around this entity in which to provide heat."
					choices = {}
				}
				"firedamage":
				{
					typename = "float"
					shortinfo = "Intensity / Damage"
					extra = ""
					notes = ""
					description = "Amount of heat 'damage' to apply to env_fires within the Radius."
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"disableX360":
				{
					typename = "boolean"
					shortinfo = "Disable for Xbox 360"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "If Yes, disables this entity on the Xbox 360 version of Source."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"LagCompensate":
				{
					typename = "boolean"
					shortinfo = "Lag Compensation"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "Set to Yes to lag compensate this entity. Should be used very sparingly!"
					choices = {}
				}
				"is_autoaim_target":
				{
					typename = "boolean"
					shortinfo = "Is Automatic-Aim Target"
					extra = "(in all games since [Counter-Strike: Global Offensive])�!FGD"
					notes = ""
					description = "If set to 1, this entity will slow down aiming movement for consoles and joystick controllers when the entity is under the crosshairs."
					choices = {}
				}
			}
		}
		env_fog_controller = 
		{
			description = "env_fog_controller is a  point entity available in all Source games. It determines the properties of aerial fog for the whole map.\nIn [Left 4 Dead][Left 4 Dead 2], multiple env_fog_controllers may be used in conjunction with fog_volumes to create different fog effects where needed. In addition, an env_fog_controller can be set as the Master fog controller under flags, in cases where a fog_volume is not tied to any specific env_fog_controller, or if no fog_volume is used in a region.\n\nAdding fog to a map can cause/require changes to the lighting for realism. Light is scattered and absorbed as it passes through fog. The denser the fog, the greater the effect:\nOlder Source games render fog as a plane a certain distance away from the camera. This method is bad, as rotating the camera will strengthen or weaken the apparent amount of fog in a particular spot, even though the viewer hasn't moved at all. In Left 4 Dead[confirm] onward, this is fixed by implementing a new radial method which is independent from the viewing angle.\n In code, it is represented by class CFogController, defined in fogcontroller.cpp."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Master - If multiple env_fog_controllers are active, this one will always take priority."
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"fogenable":
				{
					typename = "boolean"
					shortinfo = "Fog Enabled"
					extra = ""
					notes = ""
					description = "Make fog start active."
					choices = {}
				}
				"fogstart":
				{
					typename = "float"
					shortinfo = "Fog Start"
					extra = ""
					notes = ""
					description = "How far away from the viewer the fog should start."
					choices = {}
				}
				"fogend":
				{
					typename = "float"
					shortinfo = "Fog End"
					extra = ""
					notes = ""
					description = "How far away from the viewer the fog reaches Fog Max Density."
					choices = {}
				}
				"fogmaxdensity":
				{
					typename = "float"
					shortinfo = "Fog Max Density"
					extra = ""
					notes = ""
					description = "Maximum density the fog may reach. Expressed as a decimal percent, so for 45% put 0.45."
					choices = {}
				}
				"farz":
				{
					typename = "integer"
					shortinfo = "Far Z Clip Plane"
					extra = ""
					notes = ""
					description = "Anything beyond this distance in world units will not be rendered. This should be higher than Fog End. If this is used, Fog Max Density should be set to 1 otherwise the void may be visible."
					choices = {}
				}
				"fogcolor":
				{
					typename = "color255"
					shortinfo = "Primary Fog Color"
					extra = ""
					notes = ""
					description = "Primary Fog Color."
					choices = {}
				}
				"fogcolor2":
				{
					typename = "color255"
					shortinfo = "Secondary Fog Color"
					extra = ""
					notes = ""
					description = "Secondary Fog Color. If Fog Blend is disabled, this color will never appear."
					choices = {}
				}
				"fogblend":
				{
					typename = "boolean"
					shortinfo = "Fog Blend"
					extra = ""
					notes = ""
					description = "Enables color blending between Primary Fog Color and Secondary Fog Color. When the viewer looks in the Primary Fog Direction, fog will appear as the Primary color. When looking away from the specified direction, fog appears as the Secondary color. If the camera is not pointed directly at or away from the direction, a blend of the two colors will result. Sunlight with a Yaw of 45 degrees and a Pitch of -45 degrees could be enhanced using a Primary Fog Direction of '-1 -1 1', a Primary Fog Color of '120 110 100' and a Secondary Fog Color of '80 70 60'."
					choices = {}
				}
				"fogdir":
				{
					typename = "vector"
					shortinfo = "Primary Fog Direction"
					extra = ""
					notes = ""
					description = "A vector (given by three space-separated numbers X Y Z) which the viewer camera is checked against to figure out the blend between the primary and secondary fog colors."
					choices = {}
				}
				"use_angles":
				{
					typename = "boolean"
					shortinfo = "Use Angles for Fog Dir"
					extra = ""
					notes = ""
					description = "Use Pitch Yaw Roll for the Fog Blend direction instead of Primary Fog Direction. There isn't much use for this unless you want the direction to rotate."
					choices = {}
				}
				"foglerptime":
				{
					typename = "float"
					shortinfo = "Interpolate time"
					extra = ""
					notes = ""
					description = "Fade time for the StartFogTransition input."
					choices = {}
				}
				"HDRColorScale":
				{
					typename = "float"
					shortinfo = "HDR Color Scale"
					extra = "(in all games since [Left 4 Dead])"
					notes = ""
					description = "Multiplier for fog color when in HDR mode."
					choices = {}
				}
				"ZoomFogScale":
				{
					typename = "float"
					shortinfo = "Zoom Fog Scale"
					extra = "(in all games since [Counter-Strike: Global Offensive])"
					notes = ""
					description = "Scalar for fog start and end distances when the player is looking through a gun's scope (e.g. AWP)."
					choices = {}
				}
				"mindxlevel":
				{
					typename = "choices"
					shortinfo = "Minimum DX Level"
					extra = ""
					notes = ""
					description = "The entity will not exist if the engine is running outside the given range of DirectX Versions. Replaced by SystemLevelChoice from [Left 4 Dead] Left 4 Dead onwards.\n�Warning:�If these are used, the object may break when the user switches their DirectX settings."
					choices = {}
				}
				"maxdxlevel":
				{
					typename = "choices"
					shortinfo = "Maximum DX Level"
					extra = ""
					notes = ""
					description = "Default (no bounding)\nDX7\nDX8\nDX8.1\nDX9 SM2\nDX9 SM3"
					choices = {}
				}
				"mincpulevel":
				{
					typename = "choices"
					shortinfo = "Minimum CPU Level"
					extra = "(in all games since [Left 4 Dead])"
					notes = ""
					description = "A user with a CPU level lower than this will not see this object rendered in-game. CPU levels are determined by the Effect detail setting."
					choices = {}
				}
				"maxcpulevel":
				{
					typename = "choices"
					shortinfo = "Maximum CPU Level"
					extra = "(in all games since [Left 4 Dead])"
					notes = ""
					description = "0: Default\n1: Low\n2: Medium\n3: High"
					choices = {}
				}
				"mingpulevel":
				{
					typename = "choices"
					shortinfo = "Minimum GPU Level"
					extra = "(in all games since [Left 4 Dead])"
					notes = ""
					description = "A user with a GPU level lower than this will not see this object rendered in-game. GPU levels are determined by the Shader detail setting."
					choices = {}
				}
				"maxgpulevel":
				{
					typename = "choices"
					shortinfo = "Maximum GPU Level"
					extra = "(in all games since [Left 4 Dead])"
					notes = ""
					description = "0: Default\n1: Very low\n2: Low\n3: Medium\n4: High"
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"disableX360":
				{
					typename = "boolean"
					shortinfo = "Disable for Xbox 360"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "If Yes, disables this entity on the Xbox 360 version of Source."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"LagCompensate":
				{
					typename = "boolean"
					shortinfo = "Lag Compensation"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "Set to Yes to lag compensate this entity. Should be used very sparingly!"
					choices = {}
				}
				"is_autoaim_target":
				{
					typename = "boolean"
					shortinfo = "Is Automatic-Aim Target"
					extra = "(in all games since [Counter-Strike: Global Offensive])�!FGD"
					notes = ""
					description = "If set to 1, this entity will slow down aiming movement for consoles and joystick controllers when the entity is under the crosshairs."
					choices = {}
				}
			}
		}
		env_funnel = 
		{
			description = "env_funnel is a  point entity available in all Source games. It creates many sprites which move toward a point (or from a point). This effect is used in c1a0e[Half-Life]. The sprite is hardcoded to be sprites/flare6.vmt, but some games are missing this texture.\nThis entity must be activated with the Use input. After it's Used, it is deleted from the map.\n In code, it is represented by class CEnvFunnel, defined in effects.cpp."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Reverse - Funnel repels sprites instead of attracting them."
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"disableX360":
				{
					typename = "boolean"
					shortinfo = "Disable for Xbox 360"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "If Yes, disables this entity on the Xbox 360 version of Source."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"LagCompensate":
				{
					typename = "boolean"
					shortinfo = "Lag Compensation"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "Set to Yes to lag compensate this entity. Should be used very sparingly!"
					choices = {}
				}
				"is_autoaim_target":
				{
					typename = "boolean"
					shortinfo = "Is Automatic-Aim Target"
					extra = "(in all games since [Counter-Strike: Global Offensive])�!FGD"
					notes = ""
					description = "If set to 1, this entity will slow down aiming movement for consoles and joystick controllers when the entity is under the crosshairs."
					choices = {}
				}
			}
		}
		env_hudhint = 
		{
			description = "env_hudhint is a  point entity available in all Source games. It is used to control the display of HUD hints, which show the player what key is bound to a particular command."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "All Players - Show the message to everyone on the server (otherwise show to�!activator only) (doesn't exist in Left 4 Dead and later)"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"message":
				{
					typename = "string"
					shortinfo = "Hint Text (localized)"
					extra = ""
					notes = "Warning: Entering raw text will not allow the message to be translated between user languages."
					description = "This should be match a HUD hint entry in hl2/resource/valve_english.txt or its localized equivalent. Example: entering '#Valve_Hint_Zoom' (without the quotation marks) will display the following hint text: '%+zoom% ZOOM VIEW', with�%+zoom% being the key currently bound to the zoom function."
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"disableX360":
				{
					typename = "boolean"
					shortinfo = "Disable for Xbox 360"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "If Yes, disables this entity on the Xbox 360 version of Source."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"LagCompensate":
				{
					typename = "boolean"
					shortinfo = "Lag Compensation"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "Set to Yes to lag compensate this entity. Should be used very sparingly!"
					choices = {}
				}
				"is_autoaim_target":
				{
					typename = "boolean"
					shortinfo = "Is Automatic-Aim Target"
					extra = "(in all games since [Counter-Strike: Global Offensive])�!FGD"
					notes = ""
					description = "If set to 1, this entity will slow down aiming movement for consoles and joystick controllers when the entity is under the crosshairs."
					choices = {}
				}
			}
		}
		env_instructor_hint = 
		{
			description = "env_instructor_hint is a  point entity available in all Source games since [Left 4 Dead 2] Left 4 Dead 2. It it used to instruct the player to do some things, such as not shoot teammates.\n In code, it is represented by class CEnvInstructorHint, defined in env_instructor_hint.cpp."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"hint_target":
				{
					typename = "targetname"
					shortinfo = "Target Entity"
					extra = ""
					notes = "Note: If an info_target entity is used, the spawnflag to always transmit to the client must be checked."
					description = "The entity to show this hint on top of. The entity used must be one that is replicated on the client, or the hint will never show up. The info_target_instructor_hint entity is designed for this purpose, allowing the hint to be placed in empty space or parented to a specific location on another entity."
					choices = {}
				}
				"hint_static":
				{
					typename = "choices"
					shortinfo = "Positioning"
					extra = ""
					notes = ""
					description = "Either show at the position of the Target Entity, or show the hint directly on the HUD at a fixed position.\n0: Follow the Target Entity.\n1: Show on the HUD."
					choices = {}
				}
				"hint_allow_nodraw_target":
				{
					typename = "choices"
					shortinfo = "Allow invisible target"
					extra = ""
					notes = ""
					description = "Do we allow the hint to follow entities with nodraw set?  Confirm:EF_NODRAW?\n0: End immediately on nodraw\n1: Yes"
					choices = {}
				}
				"hint_caption":
				{
					typename = "string"
					shortinfo = "Caption"
					extra = ""
					notes = ""
					description = "The text of your hint. 100 character limit."
					choices = {}
				}
				"hint_color":
				{
					typename = "color255"
					shortinfo = "Caption Color"
					extra = ""
					notes = ""
					description = "The color of the caption text."
					choices = {}
				}
				"hint_activator_caption":
				{
					typename = "color255"
					shortinfo = "Activator Caption"
					extra = "(in all games since [Alien Swarm])"
					notes = ""
					description = "The color of the caption text, as seen by the !activator."
					choices = {}
				}
				"hint_forcecaption":
				{
					typename = "choices"
					shortinfo = "Force caption"
					extra = ""
					notes = ""
					description = "Do we show the caption text even if the hint is occluded by (hidden behind) a wall?\n0: No\n1: Show when occluded"
					choices = {}
				}
				"hint_icon_onscreen":
				{
					typename = "choices"
					shortinfo = "Onscreen Icon"
					extra = ""
					notes = ""
					description = "The icon to use when the hint is within the player's view."
					choices = {}
				}
				"hint_icon_offscreen":
				{
					typename = "choices"
					shortinfo = "Offscreen Icon"
					extra = ""
					notes = ""
					description = "The icon to use when the hint is outside the player's view."
					choices = {}
				}
				"hint_nooffscreen":
				{
					typename = "choices"
					shortinfo = "Show offscreen"
					extra = ""
					notes = ""
					description = "When the hint is offscreen, do we show an icon and arrow?\n0: Show\n1: Don't show"
					choices = {}
				}
				"hint_binding":
				{
					typename = "string"
					shortinfo = "Bound Command"
					extra = ""
					notes = ""
					description = "If using the show key bindings setting for the Onscreen Icon or Offscreen Icon, this field should be the command we want to show bindings for. Use key_listboundkeys to see all bound keys."
					choices = {}
				}
				"hint_icon_offset":
				{
					typename = "float"
					shortinfo = "Icon Height Offset"
					extra = ""
					notes = ""
					description = "A height offset from the Target Entity's origin to display the hint."
					choices = {}
				}
				"hint_pulseoption":
				{
					typename = "choices"
					shortinfo = "Size Pulsing"
					extra = ""
					notes = ""
					description = "Speed for which the icon should grow and shrink, as a way to nag the player about the object.\n0: No Pulse\n1: Slow Pulse\n2: Fast Pulse\n3: Urgent Pulse"
					choices = {}
				}
				"hint_alphaoption":
				{
					typename = "choices"
					shortinfo = "Alpha Pulsing"
					extra = ""
					notes = ""
					description = "Speed for which icon will become more or less transparent.\n0: No Pulse\n1: Slow Pulse\n2: Fast Pulse\n3: Urgent Pulse"
					choices = {}
				}
				"hint_shakeoption":
				{
					typename = "choices"
					shortinfo = "Shaking"
					extra = ""
					notes = ""
					description = "The icon can shake.\n0: No Shaking\n1: Narrow Shake\n2: Wide Shake"
					choices = {}
				}
				"hint_timeout":
				{
					typename = "integer"
					shortinfo = "Timeout"
					extra = ""
					notes = ""
					description = "The automatic timeout for the hint. 0 will persist until stopped with EndHint."
					choices = {}
				}
				"hint_range":
				{
					typename = "float"
					shortinfo = "Display Range"
					extra = ""
					notes = ""
					description = "The visible range of the hint. 0 will show it at any distance."
					choices = {}
				}
				"hint_auto_start":
				{
					typename = "boolean"
					shortinfo = "Show on First Sight"
					extra = ""
					notes = ""
					description = "When the player first has LOS to the target, it will automatically show for them. [Left 4 Dead 2] only."
					choices = {}
				}
				"hint_name":
				{
					typename = "string"
					shortinfo = "Lesson Name"
					extra = ""
					notes = ""
					description = "Hints with the same lesson name use a common base and are treated as instances the same lesson type. [Left 4 Dead 2] only."
					choices = {}
				}
				"hint_display_limit":
				{
					typename = "integer"
					shortinfo = "Display Limit"
					extra = ""
					notes = ""
					description = "The number of times a hint can be seen. 0 means unlimited. [Left 4 Dead 2] only."
					choices = {}
				}
				"hint_instance_type":
				{
					typename = "choices"
					shortinfo = "Instance Type"
					extra = ""
					notes = ""
					description = "How many instances of a single lesson type can be open or active at the same time. [Left 4 Dead 2] only.\n0: Multiple\n1: Single Open (Prevents new hints from opening.)\n2: Fixed Replace (Ends other hints when a new one is shown.)\n3: Single Active (Hides other hints when a new one is shown.)"
					choices = {}
				}
				"hint_suppress_rest":
				{
					typename = "choices"
					shortinfo = "Suppress rest before moving"
					extra = ""
					notes = ""
					description = "Suppress the initial icon display in center of screen? [Left 4 Dead 2] only.\n0: No\n1: Yes"
					choices = {}
				}
				"hint_local_player_only":
				{
					typename = "boolean"
					shortinfo = "Only Local Player"
					extra = "(in all games since [Alien Swarm])"
					notes = ""
					description = "Note:�This keyvalue appears to have not been coded into the FGD correctly. You must put 0 for 'No' and 1 for 'Yes'."
					choices = {}
				}
				"hint_gamepad_binding":
				{
					typename = "string"
					shortinfo = "Gamepad Bound Command"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "If using the show key bindings setting for the Onscreen Icon or Offscreen Icon, this field should be the command we want to show bindings for, when the user is using a console/non-keyboard controller of some kind (or PS3/X360)."
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"disableX360":
				{
					typename = "boolean"
					shortinfo = "Disable for Xbox 360"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "If Yes, disables this entity on the Xbox 360 version of Source."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"LagCompensate":
				{
					typename = "boolean"
					shortinfo = "Lag Compensation"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "Set to Yes to lag compensate this entity. Should be used very sparingly!"
					choices = {}
				}
				"is_autoaim_target":
				{
					typename = "boolean"
					shortinfo = "Is Automatic-Aim Target"
					extra = "(in all games since [Counter-Strike: Global Offensive])�!FGD"
					notes = ""
					description = "If set to 1, this entity will slow down aiming movement for consoles and joystick controllers when the entity is under the crosshairs."
					choices = {}
				}
			}
		}
		env_laser = 
		{
			description = "In code, it is represented by class CEnvLaser, defined in EnvLaser.cpp."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Start On - Starts the map with the beam turned on."
					notes = ""
				}
				"2":
				{
					category = ""
					description = "Toggle - Obsolete. Replaced by the Toggle input in the Source I/O system. Used to toggle the beam on and off."
					notes = ""
				}
				"4":
				{
					category = ""
					description = "Random Strike - When the beam has died, it will strike again randomly within the time set by Strike again time (secs)."
					notes = ""
				}
				"8":
				{
					category = ""
					description = "Ring - Uses the starting and ending points as a diameter, drawing a beam ring between them instead of a straight line."
					notes = ""
				}
				"16":
				{
					category = ""
					description = "StartSparks - Every time the beam strikes or is turned on, the beam temporarily emits a small shower of sparks at its Start Entity."
					notes = ""
				}
				"32":
				{
					category = ""
					description = "EndSparks - Every time the beam strikes or is turned on, the beam temporarily emits a small shower of sparks at its Ending Entity."
					notes = ""
				}
				"64":
				{
					category = ""
					description = "Decal End - Places a decal scorch mark where a damaging beam hits the first solid object (world brush or entity). Refer to the Decal Name keyvalue to set the decal you wish to appear at the end of the beam."
					notes = ""
				}
				"128":
				{
					category = ""
					description = "Shade Start - The beam fades out toward its Start Entity. Overrides Shade End. Does not work on striking beams or beam rings."
					notes = ""
				}
				"256":
				{
					category = ""
					description = "Shade End - The beam fades out toward its Ending Entity. Is overridden by Shade Start. Does not work on striking beams (Life > 0) or beam rings."
					notes = ""
				}
				"512":
				{
					category = ""
					description = "Taper Out - Makes the beam taper out into a point towards its Ending Entity. Does not work on striking beams (Life > 0) or beam rings."
					notes = "Note: 2, 4, 8, 128, 256, and 512 are intended for env_beam. For env_laser, they must be added manually, but may not work correctly."
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"LaserTarget":
				{
					typename = "targetname"
					shortinfo = "Target of Laser"
					extra = ""
					notes = ""
					description = "Name of entity, or entities, to strike at. The target is randomly chosen if there are multiple entities matching the given name."
					choices = {}
				}
				"width":
				{
					typename = "float"
					shortinfo = "Width of Beam"
					extra = ""
					notes = ""
					description = "The width of the laser beam, in pixels."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "sprite"
					shortinfo = "End Sprite"
					extra = ""
					notes = ""
					description = "If specified, this sprite will be drawn at the end of the laser beam."
					choices = {}
				}
				"renderamt":
				{
					typename = "integer"
					shortinfo = "Brightness (1 - 255)"
					extra = ""
					notes = ""
					description = "Misleading name; beam alpha. Invisible when set to 0."
					choices = {}
				}
				"rendercolor":
				{
					typename = "color255"
					shortinfo = "Beam Color (R G B)"
					extra = ""
					notes = ""
					description = "Beam color."
					choices = {}
				}
				"damage":
				{
					typename = "string"
					shortinfo = "Damage/second"
					extra = ""
					notes = "Note: Damage is scaled to the difficulty setting:/nEasy: 50%/nNormal: 100%/nHard: 150%"
					description = "How much damage this beam does per second to things it hits when it is continually on, or instantaneously if it strikes. For continuous damage, the value should be greater than 10 or it may not work."
					choices = {}
				}
				"HDRColorScale":
				{
					typename = "float"
					shortinfo = "HDR color scale"
					extra = ""
					notes = ""
					description = "Value to multiply sprite color by when running in HDR mode."
					choices = {}
				}
				"ClipStyle":
				{
					typename = "choices"
					shortinfo = "Beam clipping"
					extra = ""
					notes = ""
					description = "Select whether you want the beam to clip against geometry or characters.\n0: Do not clip (default)\n1: Clip to geometry\n2: Clip to everything solid"
					choices = {}
				}
				"dissolvetype":
				{
					typename = "choices"
					shortinfo = "Dissolve Type"
					extra = ""
					notes = ""
					description = "If this beam damages and kills something, effects to show around the object.\n-1: None\n0: Energy\n1: Heavy Electrical\n2: Light Electrical"
					choices = {}
				}
				"NoiseAmplitude":
				{
					typename = "float"
					shortinfo = "Amount of noise (0-255)"
					extra = ""
					notes = "Note: The name says the maximum is 255, but by default the maximum value is 64. Values higher than 64 will default to 64."
					description = "The amount of noise in the beam. 0 is a perfectly straight beam, while the maximum is very jagged. Range: 0 to MAX_BEAM_NOISEAMPLITUDE."
					choices = {}
				}
				"texture":
				{
					typename = "sprite"
					shortinfo = "Sprite Name"
					extra = ""
					notes = ""
					description = "The material used to draw the beam."
					choices = {}
				}
				"TextureScroll":
				{
					typename = "integer"
					shortinfo = "Texture Scroll Rate (0-100)"
					extra = ""
					notes = ""
					description = "Rate at which the beam texture should scroll along the beam. Range: 0 to MAX_BEAM_SCROLLSPEED."
					choices = {}
				}
				"framestart":
				{
					typename = "integer"
					shortinfo = "Starting Frame"
					extra = ""
					notes = ""
					description = "The frame to start the beam texture on."
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"disableX360":
				{
					typename = "boolean"
					shortinfo = "Disable for Xbox 360"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "If Yes, disables this entity on the Xbox 360 version of Source."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"LagCompensate":
				{
					typename = "boolean"
					shortinfo = "Lag Compensation"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "Set to Yes to lag compensate this entity. Should be used very sparingly!"
					choices = {}
				}
				"is_autoaim_target":
				{
					typename = "boolean"
					shortinfo = "Is Automatic-Aim Target"
					extra = "(in all games since [Counter-Strike: Global Offensive])�!FGD"
					notes = ""
					description = "If set to 1, this entity will slow down aiming movement for consoles and joystick controllers when the entity is under the crosshairs."
					choices = {}
				}
			}
		}
		env_lightglow = 
		{
			description = "env_lightglow is a  point entity available in all Source games. It puts an additive glow in the world, mostly used over light sources and other locations where a glow would look natural (tunnels, caves, dark buildings, etc). It's main difference from env_sprite is it's ability to appear in a configurable distance.\n In code, it is represented by class CLightGlow, defined in lightglow.cpp."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Visible only from front"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"rendercolor":
				{
					typename = "color255"
					shortinfo = "Color (R G B)"
					extra = ""
					notes = ""
					description = "Glow color."
					choices = {}
				}
				"VerticalGlowSize":
				{
					typename = "integer"
					shortinfo = "Vertical Size"
					extra = ""
					notes = ""
					description = "Vertical glow size in units."
					choices = {}
				}
				"HorizontalGlowSize":
				{
					typename = "integer"
					shortinfo = "Horizontal Size"
					extra = ""
					notes = ""
					description = "Horizontal glow size in units."
					choices = {}
				}
				"MinDist":
				{
					typename = "integer"
					shortinfo = "Minimum Distance"
					extra = ""
					notes = ""
					description = "The distance at which this effect will be fully translucent."
					choices = {}
				}
				"MaxDist":
				{
					typename = "integer"
					shortinfo = "Maximum Distance"
					extra = ""
					notes = ""
					description = "The distance at which this effect will be at full intensity."
					choices = {}
				}
				"OuterMaxDist":
				{
					typename = "integer"
					shortinfo = "Outer Maximum Distance"
					extra = ""
					notes = ""
					description = "If larger than the maximum distance, this is the length at which the glow will fade completely out, between the span of the maximum distance and this length."
					choices = {}
				}
				"GlowProxySize":
				{
					typename = "float"
					shortinfo = "Glow Proxy Geometry Size (0-64)"
					extra = ""
					notes = ""
					description = "Size of the glow to be rendered for visibility testing. Any time a sphere of this radius would be visible (poking through any nearby geometry), the glow will be rendered."
					choices = {}
				}
				"HDRColorScale":
				{
					typename = "float"
					shortinfo = "HDR color scale"
					extra = ""
					notes = ""
					description = "Color multiplier for players using HDR."
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"disableX360":
				{
					typename = "boolean"
					shortinfo = "Disable for Xbox 360"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "If Yes, disables this entity on the Xbox 360 version of Source."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"LagCompensate":
				{
					typename = "boolean"
					shortinfo = "Lag Compensation"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "Set to Yes to lag compensate this entity. Should be used very sparingly!"
					choices = {}
				}
				"is_autoaim_target":
				{
					typename = "boolean"
					shortinfo = "Is Automatic-Aim Target"
					extra = "(in all games since [Counter-Strike: Global Offensive])�!FGD"
					notes = ""
					description = "If set to 1, this entity will slow down aiming movement for consoles and joystick controllers when the entity is under the crosshairs."
					choices = {}
				}
			}
		}
		env_message = 
		{
			description = "env_message is a  point entity available in all Source games. It draws a text message on player HUDs, predefined in the /scripts/titles.txt file.\n In code, it is represented by class CMessage, defined in EnvMessage.cpp."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Play Once"
					notes = ""
				}
				"2":
				{
					category = ""
					description = "All Clients"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"message":
				{
					typename = "string"
					shortinfo = "Message Text"
					extra = ""
					notes = ""
					description = "Message to be shown. See above."
					choices = {}
				}
				"messagesound":
				{
					typename = "sound"
					shortinfo = "Sound Effect"
					extra = ""
					notes = ""
					description = "When the message is shown, this sound effect will be played, originating from this entity."
					choices = {}
				}
				"messagevolume":
				{
					typename = "string"
					shortinfo = "Volume 0-10"
					extra = ""
					notes = ""
					description = "Volume of the sound effect."
					choices = {}
				}
				"messageattenuation":
				{
					typename = "choices"
					shortinfo = "Sound Radius"
					extra = ""
					notes = ""
					description = "How big the radius of the sound is.\n0: Small Radius\n1: Medium Radius\n2: Large  Radius\n3: Play Everywhere"
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"disableX360":
				{
					typename = "boolean"
					shortinfo = "Disable for Xbox 360"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "If Yes, disables this entity on the Xbox 360 version of Source."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"LagCompensate":
				{
					typename = "boolean"
					shortinfo = "Lag Compensation"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "Set to Yes to lag compensate this entity. Should be used very sparingly!"
					choices = {}
				}
				"is_autoaim_target":
				{
					typename = "boolean"
					shortinfo = "Is Automatic-Aim Target"
					extra = "(in all games since [Counter-Strike: Global Offensive])�!FGD"
					notes = ""
					description = "If set to 1, this entity will slow down aiming movement for consoles and joystick controllers when the entity is under the crosshairs."
					choices = {}
				}
			}
		}
		env_microphone = 
		{
			description = "env_microphone is a  point entity available in all Source games. It acts as a microphone. In 'Speaker mode', it picks up sound and rebroadcasts it at a Speaker target. It ignores the Hears X spawnflags and does not fire the SoundLevel output. In 'Measuring mode', it measures the sound level at a Measure target and outputs the sound level as a value between 0 and 1. It only hears sounds that match the Hears X spawnflags.\n In code, it is represented by class CEnvMicrophone, defined in envmicrophone.cpp."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Hears combat sounds"
					notes = ""
				}
				"2":
				{
					category = ""
					description = "Hears world sounds"
					notes = ""
				}
				"4":
				{
					category = ""
					description = "Hears player sounds"
					notes = ""
				}
				"8":
				{
					category = ""
					description = "Hears bullet impacts"
					notes = ""
				}
				"16":
				{
					category = ""
					description = "Swallows sounds routed through speakers - This means it will not listen to sounds coming though from any other env_microphone including itself."
					notes = ""
				}
				"32":
				{
					category = ""
					description = "Hears explosions"
					notes = ""
				}
				"64":
				{
					category = ""
					description = "Ignores non-attenuated sounds"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"SpeakerName":
				{
					typename = "targetname"
					shortinfo = "Speaker target"
					extra = ""
					notes = "Bug: If the speaker entity is moving, sounds will start playing at the correct position, but they will not follow the speaker as they continue playing./nNote: If multiple info_target with the same name are referenced only one will output sounds."
					description = "The name of an info_target at which to play any sounds heard by this microphone. If specified, the microphone will consider itself in Speaker mode. This should not be an env_speaker."
					choices = {}
				}
				"target":
				{
					typename = "targetname"
					shortinfo = "Measure target"
					extra = ""
					notes = ""
					description = "If the speaker is in Measuring mode, this is the name of the entity where the sound level is to be measured."
					choices = {}
				}
				"ListenFilter":
				{
					typename = "filter"
					shortinfo = "Listen Filter"
					extra = ""
					notes = ""
					description = "The name of a filter entity which specifies the only entities the microphone can hear. Sounds emitted by other entities will not be heard."
					choices = {}
				}
				"speaker_dsp_preset":
				{
					typename = "choices"
					shortinfo = "Speaker DSP Preset"
					extra = ""
					notes = "Bug: Having multiple env_microphones with different DSP presets active at the same time will cause only one of the DSP presets to work, even if the microphones are nowhere near each other. This is because this entity just sets a ConVar called dsp_speaker./nNote: This keyvalue can also use the settings seen on the DSP page."
					description = "0: Use environment default\n50: (No effect)\n51: (No effect)\n52: (No effect)\n53: (No effect)\n54: (No effect)\n55: Loud speaker\n56: Very small speaker\n57: Echoing speaker\n58: Small speaker\n59: Tiny speaker"
					choices = {}
				}
				"Sensitivity":
				{
					typename = "float"
					shortinfo = "Sensitivity (0-10)"
					extra = ""
					notes = ""
					description = "Sensitivity in measuring mode. 1 is normal, and anything between there and 10 is increasingly sensitive."
					choices = {}
				}
				"SmoothFactor":
				{
					typename = "float"
					shortinfo = "Smoothing (0-1)"
					extra = ""
					notes = ""
					description = "How much to smooth the output value of measuring mode."
					choices = {}
				}
				"MaxRange":
				{
					typename = "float"
					shortinfo = "Maximum hearing range (0=infinite)"
					extra = ""
					notes = "Warning: setting this to 0, or greater 1024 when the microphone is in Speaker mode can be very bad for performance!"
					description = "Sounds beyond this range won't be heard."
					choices = {}
				}
				"SoundMask":
				{
					typename = "integer"
					shortinfo = "Sound Mask"
					extra = "!FGD"
					notes = ""
					description = "To do:�Some kind of alternative to the Hears X spawnflags?"
					choices = {}
				}
				"StartDisabled":
				{
					typename = "boolean"
					shortinfo = "Start Disabled"
					extra = ""
					notes = ""
					description = "Stay dormant until activated (probably with the Enable input)."
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"disableX360":
				{
					typename = "boolean"
					shortinfo = "Disable for Xbox 360"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "If Yes, disables this entity on the Xbox 360 version of Source."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"LagCompensate":
				{
					typename = "boolean"
					shortinfo = "Lag Compensation"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "Set to Yes to lag compensate this entity. Should be used very sparingly!"
					choices = {}
				}
				"is_autoaim_target":
				{
					typename = "boolean"
					shortinfo = "Is Automatic-Aim Target"
					extra = "(in all games since [Counter-Strike: Global Offensive])�!FGD"
					notes = ""
					description = "If set to 1, this entity will slow down aiming movement for consoles and joystick controllers when the entity is under the crosshairs."
					choices = {}
				}
			}
		}
		env_particle_performance_monitor = 
		{
			description = "env_particle_performance_monitor is a  point entity available in all Source games. It is used for turning on and off measuring and display of particle throughput.\n In code, it is represented by class CParticlePerformanceMonitor, defined in sprite_perfmonitor.cpp."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"disableX360":
				{
					typename = "boolean"
					shortinfo = "Disable for Xbox 360"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "If Yes, disables this entity on the Xbox 360 version of Source."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"LagCompensate":
				{
					typename = "boolean"
					shortinfo = "Lag Compensation"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "Set to Yes to lag compensate this entity. Should be used very sparingly!"
					choices = {}
				}
				"is_autoaim_target":
				{
					typename = "boolean"
					shortinfo = "Is Automatic-Aim Target"
					extra = "(in all games since [Counter-Strike: Global Offensive])�!FGD"
					notes = ""
					description = "If set to 1, this entity will slow down aiming movement for consoles and joystick controllers when the entity is under the crosshairs."
					choices = {}
				}
			}
		}
		env_particlelight = 
		{
			description = "env_particlelight is a  point entity available in all Source games. It can be used to light the smoke particles emitted by env_smokestack entities. Does not light any other particle types.\n In code, it is represented by class CParticleLight, defined in particle_light.cpp."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"Color":
				{
					typename = "color255"
					shortinfo = "Color"
					extra = ""
					notes = ""
					description = "Color emitted by this light."
					choices = {}
				}
				"Intensity":
				{
					typename = "integer"
					shortinfo = "Intensity"
					extra = ""
					notes = ""
					description = "How strong the light is."
					choices = {}
				}
				"Directional":
				{
					typename = "choices"
					shortinfo = "Directional"
					extra = ""
					notes = ""
					description = "If this is specified, then this light will use the bump map on the particles. Each particle system can have one ambient and one directional light.\n0: No\n1: Yes"
					choices = {}
				}
				"PSName":
				{
					typename = "string"
					shortinfo = "Particle System Entity"
					extra = ""
					notes = ""
					description = "Set this to the name of the env_smokestack that you want this light to affect."
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"disableX360":
				{
					typename = "boolean"
					shortinfo = "Disable for Xbox 360"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "If Yes, disables this entity on the Xbox 360 version of Source."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"LagCompensate":
				{
					typename = "boolean"
					shortinfo = "Lag Compensation"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "Set to Yes to lag compensate this entity. Should be used very sparingly!"
					choices = {}
				}
				"is_autoaim_target":
				{
					typename = "boolean"
					shortinfo = "Is Automatic-Aim Target"
					extra = "(in all games since [Counter-Strike: Global Offensive])�!FGD"
					notes = ""
					description = "If set to 1, this entity will slow down aiming movement for consoles and joystick controllers when the entity is under the crosshairs."
					choices = {}
				}
			}
		}
		env_particlescript = 
		{
			description = "env_particlescript is a  point entity available in all Source games. It has special animation events that can be fired by a model with an animation inside its .QC designed for use by this entity.\n In code, it is represented by class CEnvParticleScript, defined in env_particlescript.cpp."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"model":
				{
					typename = "string"
					shortinfo = "World Model"
					extra = ""
					notes = ""
					description = "The model this entity should appear as. 128-character limit."
					choices = {}
				}
				"skin_or_ModelSkin_[Alien_Swarm]":
				{
					typename = "integer"
					shortinfo = "Skin"
					extra = ""
					notes = ""
					description = "Some models have multiple skins. This value selects from the index, starting with 0."
					choices = {}
				}
				"solid":
				{
					typename = "choices"
					shortinfo = "Collisions"
					extra = ""
					notes = ""
					description = "Method of collision for this entity.\n0: None\n1: BSP (QPhysics) !FGD �Bug:�In [Portal 2] Portal 2, if an entity using QPhysics collisions is hit by Gel, the game will crash!\n2: Bounding Box\n3: Oriented Bounding Box !FGD\n4: Oriented Bounding Box, constrained to Yaw only !FGD\n5: Custom/Test !FGD\n6: VPhysics"
					choices = {}
				}
				"body_or_SetBodyGroup":
				{
					typename = "integer"
					shortinfo = "Body Group"
					extra = "!FGD"
					notes = ""
					description = "Sets the the active $bodygroup."
					choices = {}
				}
				"hitboxset":
				{
					typename = "string"
					shortinfo = "Hitbox Set"
					extra = "!FGD"
					notes = ""
					description = "Sets the $hboxset to use."
					choices = {}
				}
				"sequence":
				{
					typename = "integer"
					shortinfo = "Sequence"
					extra = "!FGD"
					notes = ""
					description = "Default animation sequence for the model to be playing after spawning."
					choices = {}
				}
				"playbackrate":
				{
					typename = "float"
					shortinfo = "Playback Rate"
					extra = "!FGD"
					notes = ""
					description = "A multiplier of the framerate at which animations are played, negative values are accepted. Default is 1.0"
					choices = {}
				}
				"cycle":
				{
					typename = "float"
					shortinfo = "Cycle"
					extra = "!FGD"
					notes = ""
					description = "The current frame of the currently playing animation, on a range from 0-1."
					choices = {}
				}
				"LightingOrigin":
				{
					typename = "targetname"
					shortinfo = "Lighting Origin"
					extra = ""
					notes = ""
					description = "Select an entity (not info_lighting!) from which to sample lighting instead of the entity's origin."
					choices = {}
				}
				"LightingOriginHack":
				{
					typename = "targetname"
					shortinfo = "Lighting Origin Offset"
					extra = "!FGD"
					notes = ""
					description = "The info_lighting_relative from which to sample lighting instead of the entity's origin. Not in [Left 4 Dead][Left 4 Dead 2]."
					choices = {}
				}
				"damagefilter":
				{
					typename = "targetname"
					shortinfo = "Damage Filter Name"
					extra = ""
					notes = ""
					description = "When this entity receives damage, it will filter by this entity."
					choices = {}
				}
				"fademindist":
				{
					typename = "float"
					shortinfo = "Start Fade Distance"
					extra = ""
					notes = ""
					description = "Distance at which the entity starts fading. If <0, the entity will disappear instantly when end fade is hit. The value will scale appropriately if the entity is in a 3D Skybox."
					choices = {}
				}
				"fademaxdist":
				{
					typename = "float"
					shortinfo = "End Fade Distance"
					extra = ""
					notes = ""
					description = "Distance at which the entity ends fading. If <0, the entity won't disappear at all. The value will scale appropriately if the entity is in a 3D Skybox."
					choices = {}
				}
				"fadescale":
				{
					typename = "float"
					shortinfo = "Fade Scale"
					extra = ""
					notes = ""
					description = "If specified in the worldspawn, or if the engine is running below DirectX 8, entities will fade out even if the fade distances above aren't specified. This value gives more control over when this happens: numbers smaller than 1 cause the entity to fade out at further distances, and greater than 1 cause it to fade out at closer distances. Using 0 turns off the forced fade altogether. See also $noforcedfade."
					choices = {}
				}
				"rendermode":
				{
					typename = "choices"
					shortinfo = "Render Mode"
					extra = ""
					notes = ""
					description = "Set a non-standard rendering mode on this entity."
					choices = 
					{
						"0" : "Normal"
						"1" : "Color"
						"2" : "Texture"
						"3" : "Glow"
						"4" : "Solid/Alphatest"
						"5" : "Additive"
						"6" : "Removed, does nothing"
						"7" : "Additive Fractional Frame"
						"8" : "Alpha Add"
						"9" : "World Space Glow"
						"10" : "Don't Render"

					}
				}
				"renderamt":
				{
					typename = "integer"
					shortinfo = "Render FX / Transparency (0 - 255)"
					extra = ""
					notes = ""
					description = "Transparency amount, requires a Render Mode other than Normal. 0 is invisible, 255 is fully visible."
					choices = {}
				}
				"rendercolor":
				{
					typename = "color255"
					shortinfo = "Render Color (R G B)"
					extra = ""
					notes = ""
					description = "Color tint."
					choices = {}
				}
				"renderfx":
				{
					typename = "choices"
					shortinfo = "Render FX"
					extra = ""
					notes = ""
					description = "Preset pattern of appearance effects."
					choices = 
					{
						"0" : "None"
						"1" : "Slow Pulse"
						"2" : "Fast Pulse"
						"3" : "Slow Wide Pulse"
						"4" : "Fast Wide Pulse"
						"5" : "Slow Fade Away"
						"6" : "Fast Fade Away"
						"7" : "Slow Become Solid"
						"8" : "Fast Become Solid"
						"9" : "Slow Strobe"
						"10" : "Fast Strobe"
						"11" : "Faster Strobe"
						"12" : "Slow Flicker"
						"13" : "Fast Flicker"
						"14" : "Constant Glow"
						"15" : "Distort"
						"16" : "Hologram (Distort + fade)"
						"17" : "Scale Up"
						"22" : "Spotlight FX"
						"23" : "Cull By Distance"
						"24" : "Fade Wider Pulse"
						"26" : "Fade Near"

					}
				}
			}
		}
		env_physexplosion = 
		{
			description = "env_physexplosion is a  point entity available in all Source games. It applies a physical force to physics objects within its radius, anything from a gentle nudge to a big explosion, depending on its magnitude. The explosion itself is not visible; for visible explosions, use env_explosion.\n In code, it is represented by class CPhysExplosion, defined in physobj.cpp."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "No Damage - Only Force (Players are not ever damaged by the explosion (regardless of this flag), only objects.)"
					notes = ""
				}
				"2":
				{
					category = ""
					description = "Push players"
					notes = ""
				}
				"4":
				{
					category = ""
					description = "Push radially - not as a sphere (Radially meaning as a circle/cylinder. No upward or downward force will be generated.)"
					notes = ""
				}
				"8":
				{
					category = ""
					description = "Test LOS before pushing"
					notes = ""
				}
				"16":
				{
					category = ""
					description = "Disorient player if pushed"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"magnitude":
				{
					typename = "string"
					shortinfo = "Magnitude"
					extra = ""
					notes = "Note: The magnitude value is clamped between 1 and 100. If you require a bigger explosion than this, create multiple instances of the entity."
					description = "Amount of physics force applied by the explosion."
					choices = {}
				}
				"radius":
				{
					typename = "string"
					shortinfo = "Clamp Radius (0 = auto)"
					extra = ""
					notes = ""
					description = "If specified, the radius in which the explosion damages entities. If unspecified, the radius will be based on the magnitude."
					choices = {}
				}
				"targetentityname":
				{
					typename = "targetname"
					shortinfo = "Limit to Entity"
					extra = ""
					notes = ""
					description = "If specified, the explosion will only affect the matching entity."
					choices = {}
				}
				"inner_radius":
				{
					typename = "float"
					shortinfo = "Inner radius"
					extra = ""
					notes = ""
					description = "If not zero, the LOS is calculated from a point intersecting this sphere."
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"disableX360":
				{
					typename = "boolean"
					shortinfo = "Disable for Xbox 360"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "If Yes, disables this entity on the Xbox 360 version of Source."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"LagCompensate":
				{
					typename = "boolean"
					shortinfo = "Lag Compensation"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "Set to Yes to lag compensate this entity. Should be used very sparingly!"
					choices = {}
				}
				"is_autoaim_target":
				{
					typename = "boolean"
					shortinfo = "Is Automatic-Aim Target"
					extra = "(in all games since [Counter-Strike: Global Offensive])�!FGD"
					notes = ""
					description = "If set to 1, this entity will slow down aiming movement for consoles and joystick controllers when the entity is under the crosshairs."
					choices = {}
				}
			}
		}
		env_physimpact = 
		{
			description = "env_physimpact is a  point entity available in all Source games. It causes a physics impact on another entity. The direction of the impact is determined by the angles set.\n In code, it is represented by class CPhysImpact, defined in physobj.cpp."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "No fall-off"
					notes = ""
				}
				"2":
				{
					category = ""
					description = "Infinite Length"
					notes = ""
				}
				"4":
				{
					category = ""
					description = "Ignore Mass"
					notes = ""
				}
				"8":
				{
					category = ""
					description = "Ignore Surface Normal When Applying Force[Clarify]"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"magnitude":
				{
					typename = "integer"
					shortinfo = "Magnitude"
					extra = ""
					notes = ""
					description = "Strength of the impact."
					choices = {}
				}
				"distance":
				{
					typename = "integer"
					shortinfo = "Distance"
					extra = ""
					notes = ""
					description = "How far to project the impact (if 0 uses a default value)."
					choices = {}
				}
				"directionentityname":
				{
					typename = "targetname"
					shortinfo = "Point to Entity"
					extra = ""
					notes = ""
					description = "If set, Distance and Pitch Yaw Roll settings are ignored and the direction and distance to the target entity will be used."
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"disableX360":
				{
					typename = "boolean"
					shortinfo = "Disable for Xbox 360"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "If Yes, disables this entity on the Xbox 360 version of Source."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"LagCompensate":
				{
					typename = "boolean"
					shortinfo = "Lag Compensation"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "Set to Yes to lag compensate this entity. Should be used very sparingly!"
					choices = {}
				}
				"is_autoaim_target":
				{
					typename = "boolean"
					shortinfo = "Is Automatic-Aim Target"
					extra = "(in all games since [Counter-Strike: Global Offensive])�!FGD"
					notes = ""
					description = "If set to 1, this entity will slow down aiming movement for consoles and joystick controllers when the entity is under the crosshairs."
					choices = {}
				}
			}
		}
		env_player_surface_trigger = 
		{
			description = "env_player_surface_trigger is a  point entity available in all Source games. It monitors the material of the surface the player is standing on, and fires outputs whenever it changes to/from a specific material.\n In code, it is represented by class CEnvPlayerSurfaceTrigger, defined in env_player_surface_trigger.cpp."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"gamematerial":
				{
					typename = "choices"
					shortinfo = "Game Material to Watch"
					extra = ""
					notes = ""
					description = "Literal value\nDescription\n\n\n0\nNone (player's in the air)\n\n\n67\nConcrete\n\n\n77\nMetal\n\n\n68\nDirt\n\n\n86\nVent\n\n\n71\nGrate\n\n\n84\nTile\n\n\n83\nSlosh\n\n\n87\nWood\n\n\n80\nComputer\n\n\n89\nGlass\n\n\n70\nFlesh\n\n\n73\nClip\n\n\n79\nFoliage\n\n\n78\nSand"
					choices = {}
				}
			}
		}
		env_projectedtexture = 
		{
			description = "env_projectedtexture is a  point entity available in all Source games since [Half-Life 2: Episode One][Half-Life 2: Episode One] Half-Life 2: Episode One. It projects a texture as a dynamic light that affects all objects in the world, optionally with Shadow Mapping. env_Projectedtexture does not light the world similarly that other light entities which are ray-traced when you compile the map. This light however is real-time and works without RAD.\n In code, it is represented by class CEnvProjectedTexture, defined in env_projectedtexture.cpp."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Enabled"
					notes = ""
				}
				"2":
				{
					category = ""
					description = "Always Update (moving light) (in all games since [Alien Swarm])(also in [Mapbase])"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"target":
				{
					typename = "targetname"
					shortinfo = "Target"
					extra = ""
					notes = ""
					description = "The entity will rotate to point at this target. Make sure you check the Always update flag if you set this."
					choices = {}
				}
				"lightfov":
				{
					typename = "float"
					shortinfo = "FOV"
					extra = ""
					notes = ""
					description = "The field of view cone/pyramid at which the texture is projected.\n Confirm:This keyvalue does not work in Alien Swarm."
					choices = {}
				}
				"nearz":
				{
					typename = "float"
					shortinfo = "NearZ"
					extra = ""
					notes = ""
					description = "Objects closer than this will not receive the light from the projection."
					choices = {}
				}
				"farz":
				{
					typename = "float"
					shortinfo = "FarZ"
					extra = ""
					notes = ""
					description = "Objects beyond this distance will not receive the light from the projection."
					choices = {}
				}
				"enableshadows":
				{
					typename = "boolean"
					shortinfo = "Enable Shadows"
					extra = ""
					notes = ""
					description = "Enables/disables shadows from this projected texture. 0 = no, 1 = yes."
					choices = {}
				}
				"shadowquality":
				{
					typename = "choices"
					shortinfo = "Shadow Quality"
					extra = ""
					notes = ""
					description = "Quality of shadows.\n0: Low (sharp, pixelized shadows)\n1: High (smooth edged shadows)"
					choices = {}
				}
				"lightonlytarget":
				{
					typename = "boolean"
					shortinfo = "Light Only Target"
					extra = ""
					notes = ""
					description = "Limit flashlight effect to only affect target entity."
					choices = {}
				}
				"lightworld":
				{
					typename = "boolean"
					shortinfo = "Light World"
					extra = ""
					notes = ""
					description = "Control whether flashlight affects static world geometry. 0 = no, 1 = yes."
					choices = {}
				}
				"lightcolor":
				{
					typename = "color255_+_int"
					shortinfo = "Light Color"
					extra = ""
					notes = ""
					description = "Light color and intensity."
					choices = {}
				}
				"cameraspace":
				{
					typename = "integer"
					shortinfo = "Camera Space"
					extra = ""
					notes = ""
					description = "Angles are interpreted as being relative to camera."
					choices = {}
				}
				"texturename":
				{
					typename = "string"
					shortinfo = "Texture Name"
					extra = "!FGD"
					notes = ""
					description = "The texture which this entity projects. Must be a VTF file (not VMT), relative to /materials."
					choices = {}
				}
				"textureframe":
				{
					typename = "integer"
					shortinfo = "Texture Frame"
					extra = "!FGD"
					notes = ""
					description = "If the texture is animated, this is the frame it should begin on."
					choices = {}
				}
				"simpleprojection":
				{
					typename = "boolean"
					shortinfo = "Simple Projection"
					extra = "(in all games since [Alien Swarm])�!FGD"
					notes = ""
					description = "Indicates if this is a simple, non-light casting texture projection."
					choices = {}
				}
				"projection_size":
				{
					typename = "float"
					shortinfo = "Simple Projection Size"
					extra = "(in all games since [Alien Swarm])�!FGD"
					notes = ""
					description = "Size of the simple projection."
					choices = {}
				}
				"projection_rotation":
				{
					typename = "float"
					shortinfo = "Simple Projection Rotation"
					extra = "(in all games since [Alien Swarm])�!FGD"
					notes = ""
					description = ""
					choices = {}
				}
				"brightnessscale":
				{
					typename = "float"
					shortinfo = "Brightness Scale"
					extra = "(in all games since [Alien Swarm])"
					notes = ""
					description = "Scale the light color by this brightness."
					choices = {}
				}
				"colortransitiontime":
				{
					typename = "float"
					shortinfo = "Color Transition Time"
					extra = "(in all games since [Alien Swarm])"
					notes = ""
					description = "Amount of time it takes for a color change to occur. Higher numbers cause faster transitions."
					choices = {}
				}
				"style":
				{
					typename = "choices"
					shortinfo = "Appearance"
					extra = "(in all games since [Portal 2])�(also in [Garry's Mod])"
					notes = ""
					description = "Light Appearances\n\n\nLiteral Value\nDescription\nSequence\nPreview\n\n\n0\nNormal\nm\nSequence 0.gif\n\n\n10\nFluorescent flicker\nmmamammmmammamamaaamammma\nSequence 10.gif\n\n\n2\nSlow, strong pulse\nabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcba\nSequence 2.gif\n\n\n11\nSlow pulse, noblack\nabcdefghijklmnopqrrqponmlkjihgfedcba\nSequence 11.gif\n\n\n5\nGentle pulse\njklmnopqrstuvwxyzyxwvutsrqponmlkj\nSequence 5.gif\n\n\n1\nFlicker A\nmmnmmommommnonmmonqnmmo\nSequence 1.gif\n\n\n6\nFlicker B\nnmonqnmomnmomomno\nSequence 6.gif\n\n\n3\nCandle A\nmmmmmaaaaammmmmaaaaaabcdefgabcdefg\nSequence 3.gif\n\n\n7\nCandle B\nmmmaaaabcdefgmmmmaaaammmaamm\nSequence 7.gif\n\n\n8\nCandle C\nmmmaaammmaaammmabcdefaaaammmmabcdefmmmaaaa\nSequence 8.gif\n\n\n4\nFast strobe\nmamamamamama\nSequence 4.gif\n\n\n9\nSlow strobe\naaaaaaaazzzzzzzz\nSequence 9.gif\n\n\n12 !FGD\nUnderwater light mutation\nmmnnmmnnnmmnn\nSequence 12.gif"
					choices = {}
				}
				"pattern":
				{
					typename = "string"
					shortinfo = "Custom Appearance"
					extra = "(in all games since [Portal 2])�(also in [Garry's Mod])"
					notes = ""
					description = "Set a custom pattern of light brightness for this light. Pattern format is a string of characters, where a is total darkness, z fully bright. i.e. aaggnnttzz would be a steppy fade in from dark to light."
					choices = {}
				}
				"defaultstyle":
				{
					typename = "string"
					shortinfo = "Default Appearance"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = ""
					choices = {}
				}
				"volumetric":
				{
					typename = "boolean"
					shortinfo = "Enable Volumetrics"
					extra = "(only in [Portal 2: Community Edition])"
					notes = ""
					description = "Whether or not to use volumetrics for this projected texture."
					choices = {}
				}
				"volumetricintensity":
				{
					typename = "float"
					shortinfo = "Volumetric Intensity"
					extra = "(only in [Portal 2: Community Edition])"
					notes = ""
					description = "Defines the intensity of the volumetrics. (Default is 1. Can go above; no strict limit)"
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"disableX360":
				{
					typename = "boolean"
					shortinfo = "Disable for Xbox 360"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "If Yes, disables this entity on the Xbox 360 version of Source."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"LagCompensate":
				{
					typename = "boolean"
					shortinfo = "Lag Compensation"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "Set to Yes to lag compensate this entity. Should be used very sparingly!"
					choices = {}
				}
				"is_autoaim_target":
				{
					typename = "boolean"
					shortinfo = "Is Automatic-Aim Target"
					extra = "(in all games since [Counter-Strike: Global Offensive])�!FGD"
					notes = ""
					description = "If set to 1, this entity will slow down aiming movement for consoles and joystick controllers when the entity is under the crosshairs."
					choices = {}
				}
			}
		}
		env_rotorshooter = 
		{
			description = "env_rotorshooter is a  point entity available in all Source games. It creates gibs when it's within the influence of a helicopter's rotor wash. Ideal for stirring up dust sprites from beneath a helicopter.\n In code, it is represented by class CRotorWashShooter, defined in effects.cpp."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Repeatable"
					notes = ""
				}
				"2":
				{
					category = ""
					description = "On fire"
					notes = ""
				}
				"4":
				{
					category = ""
					description = "Fade out even when in player's view"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"rotortime":
				{
					typename = "float"
					shortinfo = "Time Under Rotor"
					extra = ""
					notes = ""
					description = "The average time it has to be under the rotor before it shoots a gib."
					choices = {}
				}
				"rotortimevariance":
				{
					typename = "float"
					shortinfo = "Time variance"
					extra = ""
					notes = ""
					description = "The random amount to vary the time it has to be under the rotor before it shoots a gib."
					choices = {}
				}
				"shootmodel":
				{
					typename = "model_path"
					shortinfo = "Model"
					extra = ""
					notes = ""
					description = "Thing to shoot out. Can be an MDL or a VMT."
					choices = {}
				}
				"shootsounds":
				{
					typename = "choices"
					shortinfo = "Material Sound"
					extra = ""
					notes = ""
					description = "Value\nDescription\n\n\n-1\nNone\n\n\n0\nGlass\n\n\n1\nWood\n\n\n2\nMetal\n\n\n3\nFlesh\n\n\n4\nConcrete"
					choices = {}
				}
				"skin":
				{
					typename = "integer"
					shortinfo = "Skin"
					extra = ""
					notes = ""
					description = "Some models have multiple skins. This value selects from the index, starting with 0."
					choices = {}
				}
				"scale":
				{
					typename = "float"
					shortinfo = "Model Scale"
					extra = ""
					notes = ""
					description = "Multiplies the size of the gib models. Physics will not be scaled up."
					choices = {}
				}
				"gibgravityscale":
				{
					typename = "float"
					shortinfo = "Gib Gravity Scale"
					extra = ""
					notes = ""
					description = "Scale gravity so that gibs fall faster, slower, or not at all."
					choices = {}
				}
				"massoverride":
				{
					typename = "float"
					shortinfo = "Mass"
					extra = "(only in [Half-Life 2: Episode One][Half-Life 2: Episode One][Half-Life 2: Episode Two])"
					notes = ""
					description = "Force gibs to be a certain mass. Default mass is 200.[confirm]"
					choices = {}
				}
				"m_iGibs":
				{
					typename = "integer"
					shortinfo = "Number of Gibs"
					extra = ""
					notes = ""
					description = "Total number of gibs to shoot each time the entity should shoot."
					choices = {}
				}
				"delay":
				{
					typename = "string"
					shortinfo = "Delay between shots"
					extra = ""
					notes = ""
					description = "Delay (in seconds) between shooting each gib. If 0, all gibs shoot at once."
					choices = {}
				}
				"gibangles":
				{
					typename = "string"
					shortinfo = "Gib Angles (Pitch Yaw Roll)"
					extra = ""
					notes = ""
					description = "The orientation of the spawned gibs."
					choices = {}
				}
				"gibanglevelocity":
				{
					typename = "string"
					shortinfo = "Max angular velocity"
					extra = ""
					notes = ""
					description = "How fast (degrees/sec) the gibs should spin. They will spin on the x and y axes between 10% and 100% of this speed."
					choices = {}
				}
				"m_flVelocity":
				{
					typename = "integer"
					shortinfo = "Gib Velocity"
					extra = ""
					notes = ""
					description = "Speed of the fired gibs."
					choices = {}
				}
				"m_flVariance":
				{
					typename = "string"
					shortinfo = "Course Variance"
					extra = ""
					notes = ""
					description = "How much variance in the direction gibs are fired."
					choices = {}
				}
				"m_flGibLife":
				{
					typename = "string"
					shortinfo = "Gib Life"
					extra = ""
					notes = ""
					description = "Time in seconds for gibs to live +/- 5%."
					choices = {}
				}
				"lightingorigin":
				{
					typename = "targetname"
					shortinfo = "Lighting Origin"
					extra = ""
					notes = ""
					description = "Select an info_lighting to specify a location to sample lighting from for all gibs spawned by this shooter, instead of their own origins."
					choices = {}
				}
				"Simulation":
				{
					typename = "choices"
					shortinfo = "Physics"
					extra = ""
					notes = ""
					description = "How the gibs will be physically simulated.\n0: Point (very cheap) (gib)\n1: Physics (gib)\n2: Ragdoll (raggib)"
					choices = {}
				}
				"nogibshadows":
				{
					typename = "boolean"
					shortinfo = "Disable Shadows"
					extra = "!FGD"
					notes = ""
					description = "Set to 1 to disable render target shadows on gibs."
					choices = {}
				}
				"rendermode":
				{
					typename = "choices"
					shortinfo = "Render Mode"
					extra = ""
					notes = ""
					description = "Set a non-standard rendering mode on this entity."
					choices = 
					{
						"0" : "Normal"
						"1" : "Color"
						"2" : "Texture"
						"3" : "Glow"
						"4" : "Solid/Alphatest"
						"5" : "Additive"
						"6" : "Removed, does nothing"
						"7" : "Additive Fractional Frame"
						"8" : "Alpha Add"
						"9" : "World Space Glow"
						"10" : "Don't Render"

					}
				}
				"renderamt":
				{
					typename = "integer"
					shortinfo = "Render FX / Transparency (0 - 255)"
					extra = ""
					notes = ""
					description = "Transparency amount, requires a Render Mode other than Normal. 0 is invisible, 255 is fully visible."
					choices = {}
				}
				"rendercolor":
				{
					typename = "color255"
					shortinfo = "Render Color (R G B)"
					extra = ""
					notes = ""
					description = "Color tint."
					choices = {}
				}
				"disablereceiveshadows":
				{
					typename = "boolean"
					shortinfo = "Disable Receiving Shadows"
					extra = ""
					notes = ""
					description = "Prevent the entity from receiving shadows on itself."
					choices = {}
				}
				"renderfx":
				{
					typename = "choices"
					shortinfo = "Render FX"
					extra = ""
					notes = ""
					description = "Preset pattern of appearance effects."
					choices = 
					{
						"0" : "None"
						"1" : "Slow Pulse"
						"2" : "Fast Pulse"
						"3" : "Slow Wide Pulse"
						"4" : "Fast Wide Pulse"
						"5" : "Slow Fade Away"
						"6" : "Fast Fade Away"
						"7" : "Slow Become Solid"
						"8" : "Fast Become Solid"
						"9" : "Slow Strobe"
						"10" : "Fast Strobe"
						"11" : "Faster Strobe"
						"12" : "Slow Flicker"
						"13" : "Fast Flicker"
						"14" : "Constant Glow"
						"15" : "Distort"
						"16" : "Hologram (Distort + fade)"
						"17" : "Scale Up"
						"18" : "Glowing Shell (OBSOLETE)"
						"19" : "Clamp Minimum Scale (OBSOLETE)"
						"20" : "Environmental Rain (OBSOLETE)"
						"21" : "Environmental Snow (OBSOLETE)"
						"22" : "Spotlight FX"
						"23" : "Ragdoll"
						"24" : "Fade Wider Pulse"

					}
				}
			}
		}
		env_rotorwash_emitter = 
		{
			description = "env_rotorwash_emitter is a point entity available in the following Source engine games:\n[Half-Life 2] Half-Life 2, [Portal] Portal, [Alien Swarm] Alien Swarm. It creates a rotor wash effect, when a helicopter flies near the ground. The surface below must always be at most 1024 units away to be detected, and can either be solid ground, water or slime.\n In code, it is represented by class CRotorWashEmitter, defined in rotorwash.cpp."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"altitude":
				{
					typename = "float"
					shortinfo = "Altitude"
					extra = ""
					notes = ""
					description = "Altitude the rotorwash will show up. Despite being present in the entity, it's not actually used for anything."
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"disableX360":
				{
					typename = "boolean"
					shortinfo = "Disable for Xbox 360"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "If Yes, disables this entity on the Xbox 360 version of Source."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"LagCompensate":
				{
					typename = "boolean"
					shortinfo = "Lag Compensation"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "Set to Yes to lag compensate this entity. Should be used very sparingly!"
					choices = {}
				}
				"is_autoaim_target":
				{
					typename = "boolean"
					shortinfo = "Is Automatic-Aim Target"
					extra = "(in all games since [Counter-Strike: Global Offensive])�!FGD"
					notes = ""
					description = "If set to 1, this entity will slow down aiming movement for consoles and joystick controllers when the entity is under the crosshairs."
					choices = {}
				}
			}
		}
		env_screeneffect = 
		{
			description = "env_screeneffect is a  point entity available in all Source games. It allows screenspace effects to be played on the player's view.\n In code, it is represented by class CEnvScreenEffect, defined in env_screenoverlay.cpp."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"type":
				{
					typename = "choices"
					shortinfo = "Effect Type"
					extra = ""
					notes = ""
					description = "Which effect to use.\n0: Advisor Stun\n1: Intro Blur\n2: Groggy Vision"
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"disableX360":
				{
					typename = "boolean"
					shortinfo = "Disable for Xbox 360"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "If Yes, disables this entity on the Xbox 360 version of Source."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"LagCompensate":
				{
					typename = "boolean"
					shortinfo = "Lag Compensation"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "Set to Yes to lag compensate this entity. Should be used very sparingly!"
					choices = {}
				}
				"is_autoaim_target":
				{
					typename = "boolean"
					shortinfo = "Is Automatic-Aim Target"
					extra = "(in all games since [Counter-Strike: Global Offensive])�!FGD"
					notes = ""
					description = "If set to 1, this entity will slow down aiming movement for consoles and joystick controllers when the entity is under the crosshairs."
					choices = {}
				}
			}
		}
		env_screenoverlay = 
		{
			description = "env_screenoverlay is a  point entity available in all Source games. It can display and control a set of screen overlays, to be displayed over the player's view. Useful for view effects like drunkenness, or teleporter afterimages, etc.\n In code, it is represented by class CEnvScreenOverlay, defined in env_screenoverlay.cpp."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Allow Suit Zoom"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"OverlayName10":
				{
					typename = "string"
					shortinfo = "Overlay Name 1 (OverlayName1)  to Overlay Name 10"
					extra = ""
					notes = ""
					description = "Name of the first overlay material to display."
					choices = {}
				}
				"OverlayTime10":
				{
					typename = "float"
					shortinfo = "Overlay Duration 1 (OverlayTime1)  to Overlay Duration 10"
					extra = ""
					notes = ""
					description = "Amount of time that the overlay should be displayed for, after which it will begin showing the next overlay. Setting this to -1 will make the entity display the overlay indefinitely, until it's forced to change by an input."
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"disableX360":
				{
					typename = "boolean"
					shortinfo = "Disable for Xbox 360"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "If Yes, disables this entity on the Xbox 360 version of Source."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"LagCompensate":
				{
					typename = "boolean"
					shortinfo = "Lag Compensation"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "Set to Yes to lag compensate this entity. Should be used very sparingly!"
					choices = {}
				}
				"is_autoaim_target":
				{
					typename = "boolean"
					shortinfo = "Is Automatic-Aim Target"
					extra = "(in all games since [Counter-Strike: Global Offensive])�!FGD"
					notes = ""
					description = "If set to 1, this entity will slow down aiming movement for consoles and joystick controllers when the entity is under the crosshairs."
					choices = {}
				}
			}
		}
		env_shake = 
		{
			description = "env_shake is a  point entity available in all Source games. It shakes the screens of players. Objects can be jostled as well.\n In code, it is represented by class CEnvShake, defined in EnvShake.cpp."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "GlobalShake - Ignore radius, EVERYTHING shakes."
					notes = ""
				}
				"4":
				{
					category = ""
					description = "In Air - Shake players in air."
					notes = ""
				}
				"8":
				{
					category = ""
					description = "Physics - Shake physics objects, not just the camera."
					notes = ""
				}
				"16":
				{
					category = ""
					description = "Ropes - Shake ropes. (Works independently from Physics.)"
					notes = ""
				}
				"32":
				{
					category = ""
					description = "DON'T shake view (for shaking ropes or physics only)"
					notes = ""
				}
				"64":
				{
					category = ""
					description = "DON'T Rumble Controller - Do not shake the controller for players using an Xbox controller, etc."
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"amplitude":
				{
					typename = "float"
					shortinfo = "Amplitude (0-16)"
					extra = ""
					notes = ""
					description = "How far away from the normal position the camera will wobble. Should be a range between 0 and 16."
					choices = {}
				}
				"radius":
				{
					typename = "float"
					shortinfo = "Effect Radius"
					extra = ""
					notes = ""
					description = "The radius around this entity in which to affect players.�Note:�Players within the effect radius will be affected by the shaking for the set duration, regardless of whether they remain within the radius after the shaking begins."
					choices = {}
				}
				"duration":
				{
					typename = "float"
					shortinfo = "Duration (seconds)"
					extra = ""
					notes = ""
					description = "The length of time in which to shake the player's screens."
					choices = {}
				}
				"frequency":
				{
					typename = "float"
					shortinfo = "Frequency"
					extra = ""
					notes = ""
					description = "How many times per second to change the direction of the camera wobble. 40 is generally enough; values higher are hardly distinguishable."
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"disableX360":
				{
					typename = "boolean"
					shortinfo = "Disable for Xbox 360"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "If Yes, disables this entity on the Xbox 360 version of Source."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"LagCompensate":
				{
					typename = "boolean"
					shortinfo = "Lag Compensation"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "Set to Yes to lag compensate this entity. Should be used very sparingly!"
					choices = {}
				}
				"is_autoaim_target":
				{
					typename = "boolean"
					shortinfo = "Is Automatic-Aim Target"
					extra = "(in all games since [Counter-Strike: Global Offensive])�!FGD"
					notes = ""
					description = "If set to 1, this entity will slow down aiming movement for consoles and joystick controllers when the entity is under the crosshairs."
					choices = {}
				}
			}
		}
		env_shooter = 
		{
			description = "env_shooter is a  point entity available in all Source games. It shoots giblets out of its origin. These gibs can be either models or sprites.\n In code, it is represented by class CEnvShooter, defined in effects.cpp."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Repeatable"
					notes = ""
				}
				"2":
				{
					category = ""
					description = "On fire"
					notes = ""
				}
				"4":
				{
					category = ""
					description = "Fade out even when in player's view"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"shootmodel":
				{
					typename = "model_path"
					shortinfo = "Model"
					extra = ""
					notes = ""
					description = "Thing to shoot out. Can be an MDL or a VMT."
					choices = {}
				}
				"shootsounds":
				{
					typename = "choices"
					shortinfo = "Material Sound"
					extra = ""
					notes = ""
					description = "Value\nDescription\n\n\n-1\nNone\n\n\n0\nGlass\n\n\n1\nWood\n\n\n2\nMetal\n\n\n3\nFlesh\n\n\n4\nConcrete"
					choices = {}
				}
				"skin":
				{
					typename = "integer"
					shortinfo = "Skin"
					extra = ""
					notes = ""
					description = "Some models have multiple skins. This value selects from the index, starting with 0."
					choices = {}
				}
				"scale":
				{
					typename = "float"
					shortinfo = "Model Scale"
					extra = ""
					notes = ""
					description = "Multiplies the size of the gib models. Physics will not be scaled up."
					choices = {}
				}
				"gibgravityscale":
				{
					typename = "float"
					shortinfo = "Gib Gravity Scale"
					extra = ""
					notes = ""
					description = "Scale gravity so that gibs fall faster, slower, or not at all."
					choices = {}
				}
				"massoverride":
				{
					typename = "float"
					shortinfo = "Mass"
					extra = "(only in [Half-Life 2: Episode One][Half-Life 2: Episode One][Half-Life 2: Episode Two])"
					notes = ""
					description = "Force gibs to be a certain mass. Default mass is 200.[confirm]"
					choices = {}
				}
				"m_iGibs":
				{
					typename = "integer"
					shortinfo = "Number of Gibs"
					extra = ""
					notes = ""
					description = "Total number of gibs to shoot each time the entity should shoot."
					choices = {}
				}
				"delay":
				{
					typename = "string"
					shortinfo = "Delay between shots"
					extra = ""
					notes = ""
					description = "Delay (in seconds) between shooting each gib. If 0, all gibs shoot at once."
					choices = {}
				}
				"gibangles":
				{
					typename = "string"
					shortinfo = "Gib Angles (Pitch Yaw Roll)"
					extra = ""
					notes = ""
					description = "The orientation of the spawned gibs."
					choices = {}
				}
				"gibanglevelocity":
				{
					typename = "string"
					shortinfo = "Max angular velocity"
					extra = ""
					notes = ""
					description = "How fast (degrees/sec) the gibs should spin. They will spin on the x and y axes between 10% and 100% of this speed."
					choices = {}
				}
				"m_flVelocity":
				{
					typename = "integer"
					shortinfo = "Gib Velocity"
					extra = ""
					notes = ""
					description = "Speed of the fired gibs."
					choices = {}
				}
				"m_flVariance":
				{
					typename = "string"
					shortinfo = "Course Variance"
					extra = ""
					notes = ""
					description = "How much variance in the direction gibs are fired."
					choices = {}
				}
				"m_flGibLife":
				{
					typename = "string"
					shortinfo = "Gib Life"
					extra = ""
					notes = ""
					description = "Time in seconds for gibs to live +/- 5%."
					choices = {}
				}
				"lightingorigin":
				{
					typename = "targetname"
					shortinfo = "Lighting Origin"
					extra = ""
					notes = ""
					description = "Select an info_lighting to specify a location to sample lighting from for all gibs spawned by this shooter, instead of their own origins."
					choices = {}
				}
				"Simulation":
				{
					typename = "choices"
					shortinfo = "Physics"
					extra = ""
					notes = ""
					description = "How the gibs will be physically simulated.\n0: Point (very cheap) (gib)\n1: Physics (gib)\n2: Ragdoll (raggib)"
					choices = {}
				}
				"nogibshadows":
				{
					typename = "boolean"
					shortinfo = "Disable Shadows"
					extra = "!FGD"
					notes = ""
					description = "Set to 1 to disable render target shadows on gibs."
					choices = {}
				}
				"rendermode":
				{
					typename = "choices"
					shortinfo = "Render Mode"
					extra = ""
					notes = ""
					description = "Set a non-standard rendering mode on this entity."
					choices = 
					{
						"0" : "Normal"
						"1" : "Color"
						"2" : "Texture"
						"3" : "Glow"
						"4" : "Solid/Alphatest"
						"5" : "Additive"
						"6" : "Removed, does nothing"
						"7" : "Additive Fractional Frame"
						"8" : "Alpha Add"
						"9" : "World Space Glow"
						"10" : "Don't Render"

					}
				}
				"renderamt":
				{
					typename = "integer"
					shortinfo = "Render FX / Transparency (0 - 255)"
					extra = ""
					notes = ""
					description = "Transparency amount, requires a Render Mode other than Normal. 0 is invisible, 255 is fully visible."
					choices = {}
				}
				"rendercolor":
				{
					typename = "color255"
					shortinfo = "Render Color (R G B)"
					extra = ""
					notes = ""
					description = "Color tint."
					choices = {}
				}
				"disablereceiveshadows":
				{
					typename = "boolean"
					shortinfo = "Disable Receiving Shadows"
					extra = ""
					notes = ""
					description = "Prevent the entity from receiving shadows on itself."
					choices = {}
				}
				"renderfx":
				{
					typename = "choices"
					shortinfo = "Render FX"
					extra = ""
					notes = ""
					description = "Preset pattern of appearance effects."
					choices = 
					{
						"0" : "None"
						"1" : "Slow Pulse"
						"2" : "Fast Pulse"
						"3" : "Slow Wide Pulse"
						"4" : "Fast Wide Pulse"
						"5" : "Slow Fade Away"
						"6" : "Fast Fade Away"
						"7" : "Slow Become Solid"
						"8" : "Fast Become Solid"
						"9" : "Slow Strobe"
						"10" : "Fast Strobe"
						"11" : "Faster Strobe"
						"12" : "Slow Flicker"
						"13" : "Fast Flicker"
						"14" : "Constant Glow"
						"15" : "Distort"
						"16" : "Hologram (Distort + fade)"
						"17" : "Scale Up"
						"18" : "Glowing Shell (OBSOLETE)"
						"19" : "Clamp Minimum Scale (OBSOLETE)"
						"20" : "Environmental Rain (OBSOLETE)"
						"21" : "Environmental Snow (OBSOLETE)"
						"22" : "Spotlight FX"
						"23" : "Ragdoll"
						"24" : "Fade Wider Pulse"

					}
				}
			}
		}
		env_smokestack = 
		{
			description = "env_smokestack is a  point entity available in all Source games. It spits out a constant stream of smoke. You can place up to two env_particlelights near the smoke stack to add ambient light to its particles.\n In code, it is represented by class CSmokeStack, defined in smokestack.cpp."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"InitialState":
				{
					typename = "choices"
					shortinfo = "Initial State"
					extra = ""
					notes = ""
					description = "Initial state of the entity.\n0: Off\n1: On"
					choices = {}
				}
				"BaseSpread":
				{
					typename = "integer"
					shortinfo = "Spread at the base"
					extra = ""
					notes = ""
					description = "Amount of random spread in the origins of the smoke particles when they're spawned."
					choices = {}
				}
				"SpreadSpeed":
				{
					typename = "integer"
					shortinfo = "Spread Speed"
					extra = ""
					notes = ""
					description = "Amount of random spread in the velocity of the smoke particles after they're spawned."
					choices = {}
				}
				"Speed":
				{
					typename = "integer"
					shortinfo = "Speed"
					extra = ""
					notes = ""
					description = "The speed at which the smoke particles move after they're spawned."
					choices = {}
				}
				"StartSize":
				{
					typename = "integer"
					shortinfo = "Particle start size"
					extra = ""
					notes = ""
					description = "Size of the smoke particles when they're first emitted."
					choices = {}
				}
				"EndSize":
				{
					typename = "integer"
					shortinfo = "Particle end size"
					extra = ""
					notes = ""
					description = "Size of the smoke particles at the point they fade out completely."
					choices = {}
				}
				"Rate":
				{
					typename = "integer"
					shortinfo = "Emission rate"
					extra = ""
					notes = ""
					description = "Rate at which to emit smoke particles (i.e. particles to emit per second)."
					choices = {}
				}
				"JetLength":
				{
					typename = "integer"
					shortinfo = "Length of smoke trail"
					extra = ""
					notes = ""
					description = "Length of the smokestack. Lifetime of the smoke particles is derived from this & particle speed."
					choices = {}
				}
				"WindAngle":
				{
					typename = "angle"
					shortinfo = "Wind X/Y Angle"
					extra = ""
					notes = ""
					description = "This specifies the wind direction. It is an angle in the XY plane."
					choices = {}
				}
				"WindSpeed":
				{
					typename = "integer"
					shortinfo = "Wind Speed"
					extra = ""
					notes = ""
					description = "The strength of the wind."
					choices = {}
				}
				"SmokeMaterial":
				{
					typename = "string"
					shortinfo = "Particle material"
					extra = ""
					notes = ""
					description = "Material of the smoke particles emitted by this stack."
					choices = {}
				}
				"Twist":
				{
					typename = "integer"
					shortinfo = "Twist"
					extra = ""
					notes = ""
					description = "The amount, in degrees per second, that the smoke particles twist around the origin."
					choices = {}
				}
				"Roll":
				{
					typename = "float"
					shortinfo = "Roll Speed"
					extra = ""
					notes = ""
					description = "Amount of roll in degrees per second."
					choices = {}
				}
				"rendercolor":
				{
					typename = "color255"
					shortinfo = "Base Color (R G B)"
					extra = ""
					notes = ""
					description = "The color of the particles."
					choices = {}
				}
				"renderamt":
				{
					typename = "integer"
					shortinfo = "Translucency"
					extra = ""
					notes = ""
					description = "How much you can see through the particles."
					choices = {}
				}
				"Wind":
				{
					typename = "vector"
					shortinfo = "Wind Vector"
					extra = "!FGD"
					notes = ""
					description = "Wind direction, not limited to any axis."
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"disableX360":
				{
					typename = "boolean"
					shortinfo = "Disable for Xbox 360"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "If Yes, disables this entity on the Xbox 360 version of Source."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"LagCompensate":
				{
					typename = "boolean"
					shortinfo = "Lag Compensation"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "Set to Yes to lag compensate this entity. Should be used very sparingly!"
					choices = {}
				}
				"is_autoaim_target":
				{
					typename = "boolean"
					shortinfo = "Is Automatic-Aim Target"
					extra = "(in all games since [Counter-Strike: Global Offensive])�!FGD"
					notes = ""
					description = "If set to 1, this entity will slow down aiming movement for consoles and joystick controllers when the entity is under the crosshairs."
					choices = {}
				}
			}
		}
		env_smoketrail = 
		{
			description = "env_smoketrail is a  point entity available in all Source games. It creates a smoke trail. \n In code, it is represented by class SmokeTrail, defined in smoke_trail.cpp."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"opacity":
				{
					typename = "float"
					shortinfo = "Sprite Opacity"
					extra = ""
					notes = ""
					description = "Opacity of the sprites (range from 0 - 1)."
					choices = {}
				}
				"spawnrate":
				{
					typename = "float"
					shortinfo = "Spawn Rate"
					extra = ""
					notes = ""
					description = "Number of particles to emit each second."
					choices = {}
				}
				"lifetime":
				{
					typename = "float"
					shortinfo = "Particle Life Time"
					extra = ""
					notes = ""
					description = "Number of seconds until each particle dies."
					choices = {}
				}
				"startcolor":
				{
					typename = "color255"
					shortinfo = "Start Color"
					extra = ""
					notes = ""
					description = "Starting color of the emitted particles."
					choices = {}
				}
				"endcolor":
				{
					typename = "color255"
					shortinfo = "End Color"
					extra = ""
					notes = ""
					description = "Ending color of the emitted particles."
					choices = {}
				}
				"emittime":
				{
					typename = "float"
					shortinfo = "Emitter Life Time"
					extra = ""
					notes = ""
					description = "Number of seconds until the env_smoketrail stops emitting particles. 0 means never stop emitting particles."
					choices = {}
				}
				"minspeed":
				{
					typename = "float"
					shortinfo = "Minimum Random Speed"
					extra = ""
					notes = ""
					description = "Minimum randomly-directed speed to use for emitted particles."
					choices = {}
				}
				"maxspeed":
				{
					typename = "float"
					shortinfo = "Maximum Random Speed"
					extra = ""
					notes = ""
					description = "Maximum randomly-directed speed to use for emitted particles."
					choices = {}
				}
				"mindirectedspeed":
				{
					typename = "float"
					shortinfo = "Minimum Directed Speed"
					extra = ""
					notes = ""
					description = "Minimum speed along the env_smoketrail's forward direction (x axis) to use for emitted particles."
					choices = {}
				}
				"maxdirectedspeed":
				{
					typename = "float"
					shortinfo = "Maximum Directed Speed"
					extra = ""
					notes = ""
					description = "Maximum speed along the env_smoketrail's forward direction (x axis) to use for emitted particles."
					choices = {}
				}
				"startsize":
				{
					typename = "float"
					shortinfo = "Starting particle size"
					extra = ""
					notes = ""
					description = "Starting particle size."
					choices = {}
				}
				"endsize":
				{
					typename = "float"
					shortinfo = "Ending particle size"
					extra = ""
					notes = ""
					description = "Ending particle size."
					choices = {}
				}
				"spawnradius":
				{
					typename = "float"
					shortinfo = "Spawn radius"
					extra = ""
					notes = ""
					description = "Distance from env_smoketrail at which particles are emitted."
					choices = {}
				}
				"firesprite":
				{
					typename = "sprite"
					shortinfo = "Fire Sprite"
					extra = "[Obsolete]"
					notes = ""
					description = "Deprecated.�Not present in code. Sprite to use for fire particles."
					choices = {}
				}
				"smokesprite":
				{
					typename = "sprite"
					shortinfo = "Smoke Puff"
					extra = "[Obsolete]"
					notes = ""
					description = "Deprecated.�Not present in code. Sprite to use for smoke puffs."
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"disableX360":
				{
					typename = "boolean"
					shortinfo = "Disable for Xbox 360"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "If Yes, disables this entity on the Xbox 360 version of Source."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"LagCompensate":
				{
					typename = "boolean"
					shortinfo = "Lag Compensation"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "Set to Yes to lag compensate this entity. Should be used very sparingly!"
					choices = {}
				}
				"is_autoaim_target":
				{
					typename = "boolean"
					shortinfo = "Is Automatic-Aim Target"
					extra = "(in all games since [Counter-Strike: Global Offensive])�!FGD"
					notes = ""
					description = "If set to 1, this entity will slow down aiming movement for consoles and joystick controllers when the entity is under the crosshairs."
					choices = {}
				}
			}
		}
		env_soundscape = 
		{
			description = "env_soundscape is a  point entity available in all Source games. It changes the active soundscape of players, and defines where positioned sounds within it play from. A player must be within the entity's radius and be able to see it for the change to take place. The entity's soundscape will then play until another one takes over. If more than one soundscape entity is fighting for control, the nearest wins.\n\nenv_soundscape_triggerable is a related entity identical to env_soundscape, but for use in conjunction with the brush entity trigger_soundscape.\n In code, it is represented by class CEnvSoundscape, defined in soundscape.cpp."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"radius":
				{
					typename = "integer"
					shortinfo = "Radius"
					extra = ""
					notes = ""
					description = "Defines the entity's sphere of influence. Players must also have LOS to the entity for it to trigger. -1 means infinite range."
					choices = {}
				}
				"soundscape":
				{
					typename = "string"
					shortinfo = "Soundscape"
					extra = ""
					notes = ""
					description = "The name of the soundscape to play. Some examples are provided, but the actual list is not. The best way to browse soundscapes is from within the game with the playsoundscape console command."
					choices = {}
				}
				"position7":
				{
					typename = "targetname"
					shortinfo = "Sound Position 0 (position0)  to Sound Position 7"
					extra = ""
					notes = ""
					description = "Entities which define the location from which any positioned sounds play. Must be entities that the client knows about (e.g info_target or anything visible)."
					choices = {}
				}
				"StartDisabled":
				{
					typename = "boolean"
					shortinfo = "Start Disabled"
					extra = ""
					notes = ""
					description = "Stay dormant until activated (probably with the Enable input)."
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"disableX360":
				{
					typename = "boolean"
					shortinfo = "Disable for Xbox 360"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "If Yes, disables this entity on the Xbox 360 version of Source."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"LagCompensate":
				{
					typename = "boolean"
					shortinfo = "Lag Compensation"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "Set to Yes to lag compensate this entity. Should be used very sparingly!"
					choices = {}
				}
				"is_autoaim_target":
				{
					typename = "boolean"
					shortinfo = "Is Automatic-Aim Target"
					extra = "(in all games since [Counter-Strike: Global Offensive])�!FGD"
					notes = ""
					description = "If set to 1, this entity will slow down aiming movement for consoles and joystick controllers when the entity is under the crosshairs."
					choices = {}
				}
			}
		}
		env_soundscape_proxy = 
		{
			description = "env_soundscape_proxy is a  point entity available in all Source games. It plays a soundscape with the properties set by an env_soundscape or env_soundscape_triggerable. This is convenient for soundscapes that can be triggered through many possible entrances/exits as it prevents the mapper from having to synchronize settings for many individual entities.\n\n In code, it is represented by class CEnvSoundscapeProxy, defined in soundscape.cpp."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"MainSoundscapeName":
				{
					typename = "targetname"
					shortinfo = "Soundscape entity"
					extra = ""
					notes = ""
					description = "The soundscape entity to become a copy of."
					choices = {}
				}
				"radius":
				{
					typename = "float"
					shortinfo = "Radius"
					extra = ""
					notes = ""
					description = "Defines the entity's sphere of influence. Players must also have LOS to the entity for it to trigger. -1 means infinite range. A note inside the FGD file says this does not work, but it does."
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"disableX360":
				{
					typename = "boolean"
					shortinfo = "Disable for Xbox 360"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "If Yes, disables this entity on the Xbox 360 version of Source."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"LagCompensate":
				{
					typename = "boolean"
					shortinfo = "Lag Compensation"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "Set to Yes to lag compensate this entity. Should be used very sparingly!"
					choices = {}
				}
				"is_autoaim_target":
				{
					typename = "boolean"
					shortinfo = "Is Automatic-Aim Target"
					extra = "(in all games since [Counter-Strike: Global Offensive])�!FGD"
					notes = ""
					description = "If set to 1, this entity will slow down aiming movement for consoles and joystick controllers when the entity is under the crosshairs."
					choices = {}
				}
			}
		}
		env_soundscape_triggerable = 
		{
			description = "env_soundscape is a  point entity available in all Source games. It changes the active soundscape of players, and defines where positioned sounds within it play from. A player must be within the entity's radius and be able to see it for the change to take place. The entity's soundscape will then play until another one takes over. If more than one soundscape entity is fighting for control, the nearest wins.\n\nenv_soundscape_triggerable is a related entity identical to env_soundscape, but for use in conjunction with the brush entity trigger_soundscape.\n In code, it is represented by class CEnvSoundscape, defined in soundscape.cpp."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"radius":
				{
					typename = "integer"
					shortinfo = "Radius"
					extra = ""
					notes = ""
					description = "Defines the entity's sphere of influence. Players must also have LOS to the entity for it to trigger. -1 means infinite range."
					choices = {}
				}
				"soundscape":
				{
					typename = "string"
					shortinfo = "Soundscape"
					extra = ""
					notes = ""
					description = "The name of the soundscape to play. Some examples are provided, but the actual list is not. The best way to browse soundscapes is from within the game with the playsoundscape console command."
					choices = {}
				}
				"position7":
				{
					typename = "targetname"
					shortinfo = "Sound Position 0 (position0)  to Sound Position 7"
					extra = ""
					notes = ""
					description = "Entities which define the location from which any positioned sounds play. Must be entities that the client knows about (e.g info_target or anything visible)."
					choices = {}
				}
				"StartDisabled":
				{
					typename = "boolean"
					shortinfo = "Start Disabled"
					extra = ""
					notes = ""
					description = "Stay dormant until activated (probably with the Enable input)."
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"disableX360":
				{
					typename = "boolean"
					shortinfo = "Disable for Xbox 360"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "If Yes, disables this entity on the Xbox 360 version of Source."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"LagCompensate":
				{
					typename = "boolean"
					shortinfo = "Lag Compensation"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "Set to Yes to lag compensate this entity. Should be used very sparingly!"
					choices = {}
				}
				"is_autoaim_target":
				{
					typename = "boolean"
					shortinfo = "Is Automatic-Aim Target"
					extra = "(in all games since [Counter-Strike: Global Offensive])�!FGD"
					notes = ""
					description = "If set to 1, this entity will slow down aiming movement for consoles and joystick controllers when the entity is under the crosshairs."
					choices = {}
				}
			}
		}
		env_spark = 
		{
			description = "env_spark is a  point entity available in all Source games. It is used to create sparks at its origin.\n In code, it is represented by class CEnvSpark, defined in EnvSpark.cpp."
			flagnotes = ""
			flags = 
			{
				"64":
				{
					category = ""
					description = "Start ON"
					notes = ""
				}
				"128":
				{
					category = ""
					description = "Glow"
					notes = ""
				}
				"256":
				{
					category = ""
					description = "Silent"
					notes = ""
				}
				"512":
				{
					category = ""
					description = "Directional"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"MaxDelay":
				{
					typename = "string"
					shortinfo = "Max Delay"
					extra = ""
					notes = ""
					description = "The longest delay between sparks (in seconds). If this value is changed with AddOutput, the change will only take effect after the entity sparks again."
					choices = {}
				}
				"Magnitude":
				{
					typename = "integer"
					shortinfo = "Magnitude"
					extra = ""
					notes = ""
					description = "The amount of the sparks.\n1: Small\n2: Medium\n5: Large\n8: Huge"
					choices = {}
				}
				"TrailLength":
				{
					typename = "integer"
					shortinfo = "Spark Trail Length"
					extra = ""
					notes = ""
					description = "Length of the spark trails. Other numbers may be entered to create extremely long or short trails.\n1: Short\n2: Medium\n3: Long"
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"disableX360":
				{
					typename = "boolean"
					shortinfo = "Disable for Xbox 360"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "If Yes, disables this entity on the Xbox 360 version of Source."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"LagCompensate":
				{
					typename = "boolean"
					shortinfo = "Lag Compensation"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "Set to Yes to lag compensate this entity. Should be used very sparingly!"
					choices = {}
				}
				"is_autoaim_target":
				{
					typename = "boolean"
					shortinfo = "Is Automatic-Aim Target"
					extra = "(in all games since [Counter-Strike: Global Offensive])�!FGD"
					notes = ""
					description = "If set to 1, this entity will slow down aiming movement for consoles and joystick controllers when the entity is under the crosshairs."
					choices = {}
				}
			}
		}
		env_splash = 
		{
			description = "env_splash is a  point entity available in all Source games. It creates a generic splash effect like the one seen when bullets fire into water, or when the player enters water.\n In code, it is represented by class CEnvSplash, defined in effects.cpp."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Automatically find water surface (place entity above water) - Make sure %compilewater is set!"
					notes = ""
				}
				"2":
				{
					category = ""
					description = "Diminish with depth (diminished completely in 10 feet of water)"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"scale":
				{
					typename = "float"
					shortinfo = "Scale of the splash"
					extra = ""
					notes = ""
					description = "Scale of the splash."
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"disableX360":
				{
					typename = "boolean"
					shortinfo = "Disable for Xbox 360"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "If Yes, disables this entity on the Xbox 360 version of Source."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"LagCompensate":
				{
					typename = "boolean"
					shortinfo = "Lag Compensation"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "Set to Yes to lag compensate this entity. Should be used very sparingly!"
					choices = {}
				}
				"is_autoaim_target":
				{
					typename = "boolean"
					shortinfo = "Is Automatic-Aim Target"
					extra = "(in all games since [Counter-Strike: Global Offensive])�!FGD"
					notes = ""
					description = "If set to 1, this entity will slow down aiming movement for consoles and joystick controllers when the entity is under the crosshairs."
					choices = {}
				}
			}
		}
		env_sprite = 
		{
			description = "env_sprite is a  point entity available in all Source games. It creates a sprite in the world. Sprites always face the player.\n\n In code, it is represented by class CSprite, defined in Sprite.cpp."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Start on"
					notes = ""
				}
				"2":
				{
					category = ""
					description = "Play Once - Used for animated sprites; texture will animate once, then the sprite will turn off."
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"model":
				{
					typename = "string"
					shortinfo = "Sprite Name"
					extra = ""
					notes = ""
					description = "The material to draw."
					choices = {}
				}
				"scale":
				{
					typename = "float"
					shortinfo = "Scale"
					extra = ""
					notes = "Bug: Hammer's default sprite scale 0.25, but the engine's is 1.0. To synchronise the values, set this keyvalue to something."
					description = "Scale multiplier of the sprite."
					choices = {}
				}
				"framerate":
				{
					typename = "string"
					shortinfo = "Framerate"
					extra = ""
					notes = ""
					description = "Rate at which the sprite should animate, if at all."
					choices = {}
				}
				"frame":
				{
					typename = "float"
					shortinfo = "Starting Frame"
					extra = "!FGD"
					notes = ""
					description = "If the sprite is animated, the frame it should start animating on."
					choices = {}
				}
				"GlowProxySize":
				{
					typename = "float"
					shortinfo = "Size of Glow Proxy Geometry"
					extra = ""
					notes = ""
					description = "Size of the glow to be rendered for visibility testing. Any time a sphere of this radius would be visible (poking through any nearby geometry), the glow will be rendered."
					choices = {}
				}
				"HDRColorScale":
				{
					typename = "float"
					shortinfo = "HDR color scale"
					extra = ""
					notes = ""
					description = "Color multiplier for players using HDR."
					choices = {}
				}
				"mindxlevel":
				{
					typename = "choices"
					shortinfo = "Minimum DX Level"
					extra = ""
					notes = ""
					description = "The entity will not exist if the engine is running outside the given range of DirectX Versions. Replaced by SystemLevelChoice from [Left 4 Dead] Left 4 Dead onwards.\n�Warning:�If these are used, the object may break when the user switches their DirectX settings."
					choices = {}
				}
				"maxdxlevel":
				{
					typename = "choices"
					shortinfo = "Maximum DX Level"
					extra = ""
					notes = ""
					description = "Default (no bounding)\nDX7\nDX8\nDX8.1\nDX9 SM2\nDX9 SM3"
					choices = {}
				}
				"mincpulevel":
				{
					typename = "choices"
					shortinfo = "Minimum CPU Level"
					extra = "(in all games since [Left 4 Dead])"
					notes = ""
					description = "A user with a CPU level lower than this will not see this object rendered in-game. CPU levels are determined by the Effect detail setting."
					choices = {}
				}
				"maxcpulevel":
				{
					typename = "choices"
					shortinfo = "Maximum CPU Level"
					extra = "(in all games since [Left 4 Dead])"
					notes = ""
					description = "0: Default\n1: Low\n2: Medium\n3: High"
					choices = {}
				}
				"mingpulevel":
				{
					typename = "choices"
					shortinfo = "Minimum GPU Level"
					extra = "(in all games since [Left 4 Dead])"
					notes = ""
					description = "A user with a GPU level lower than this will not see this object rendered in-game. GPU levels are determined by the Shader detail setting."
					choices = {}
				}
				"maxgpulevel":
				{
					typename = "choices"
					shortinfo = "Maximum GPU Level"
					extra = "(in all games since [Left 4 Dead])"
					notes = ""
					description = "0: Default\n1: Very low\n2: Low\n3: Medium\n4: High"
					choices = {}
				}
				"rendermode":
				{
					typename = "choices"
					shortinfo = "Render Mode"
					extra = ""
					notes = ""
					description = "Set a non-standard rendering mode on this entity."
					choices = 
					{
						"0" : "Normal"
						"1" : "Color"
						"2" : "Texture"
						"3" : "Glow"
						"4" : "Solid/Alphatest"
						"5" : "Additive"
						"6" : "Removed, does nothing"
						"7" : "Additive Fractional Frame"
						"8" : "Alpha Add"
						"9" : "World Space Glow"
						"10" : "Don't Render"

					}
				}
				"renderamt":
				{
					typename = "integer"
					shortinfo = "Render FX / Transparency (0 - 255)"
					extra = ""
					notes = ""
					description = "Transparency amount, requires a Render Mode other than Normal. 0 is invisible, 255 is fully visible."
					choices = {}
				}
				"rendercolor":
				{
					typename = "color255"
					shortinfo = "Render Color (R G B)"
					extra = ""
					notes = ""
					description = "Color tint."
					choices = {}
				}
				"disablereceiveshadows":
				{
					typename = "boolean"
					shortinfo = "Disable Receiving Shadows"
					extra = ""
					notes = ""
					description = "Prevent the entity from receiving shadows on itself."
					choices = {}
				}
				"renderfx":
				{
					typename = "choices"
					shortinfo = "Render FX"
					extra = ""
					notes = ""
					description = "Preset pattern of appearance effects."
					choices = 
					{
						"0" : "None"
						"1" : "Slow Pulse"
						"2" : "Fast Pulse"
						"3" : "Slow Wide Pulse"
						"4" : "Fast Wide Pulse"
						"5" : "Slow Fade Away"
						"6" : "Fast Fade Away"
						"7" : "Slow Become Solid"
						"8" : "Fast Become Solid"
						"9" : "Slow Strobe"
						"10" : "Fast Strobe"
						"11" : "Faster Strobe"
						"12" : "Slow Flicker"
						"13" : "Fast Flicker"
						"14" : "Constant Glow"
						"15" : "Distort"
						"16" : "Hologram (Distort + fade)"
						"17" : "Scale Up"
						"18" : "Glowing Shell (OBSOLETE)"
						"19" : "Clamp Minimum Scale (OBSOLETE)"
						"20" : "Environmental Rain (OBSOLETE)"
						"21" : "Environmental Snow (OBSOLETE)"
						"22" : "Spotlight FX"
						"23" : "Ragdoll"
						"24" : "Fade Wider Pulse"

					}
				}
			}
		}
		env_sprite_oriented = 
		{
			description = "env_sprite_oriented is a  point entity available in all Source games. It works like env_sprite but is forced to stay in one direction instead of always turning to face the player. The sprite material needs to use $spriteorientation.\n\n In code, it is represented by class CSpriteOriented, defined in Sprite.cpp."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Start on"
					notes = ""
				}
				"2":
				{
					category = ""
					description = "Play Once - Used for animated sprites; texture will animate once, then the sprite will turn off."
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"model":
				{
					typename = "string"
					shortinfo = "Sprite Name"
					extra = ""
					notes = ""
					description = "The material to draw."
					choices = {}
				}
				"scale":
				{
					typename = "float"
					shortinfo = "Scale"
					extra = ""
					notes = "Bug: Hammer's default sprite scale 0.25, but the engine's is 1.0. To synchronise the values, set this keyvalue to something."
					description = "Scale multiplier of the sprite."
					choices = {}
				}
				"framerate":
				{
					typename = "string"
					shortinfo = "Framerate"
					extra = ""
					notes = ""
					description = "Rate at which the sprite should animate, if at all."
					choices = {}
				}
				"frame":
				{
					typename = "float"
					shortinfo = "Starting Frame"
					extra = "!FGD"
					notes = ""
					description = "If the sprite is animated, the frame it should start animating on."
					choices = {}
				}
				"GlowProxySize":
				{
					typename = "float"
					shortinfo = "Size of Glow Proxy Geometry"
					extra = ""
					notes = ""
					description = "Size of the glow to be rendered for visibility testing. Any time a sphere of this radius would be visible (poking through any nearby geometry), the glow will be rendered."
					choices = {}
				}
				"HDRColorScale":
				{
					typename = "float"
					shortinfo = "HDR color scale"
					extra = ""
					notes = ""
					description = "Color multiplier for players using HDR."
					choices = {}
				}
				"mindxlevel":
				{
					typename = "choices"
					shortinfo = "Minimum DX Level"
					extra = ""
					notes = ""
					description = "The entity will not exist if the engine is running outside the given range of DirectX Versions. Replaced by SystemLevelChoice from [Left 4 Dead] Left 4 Dead onwards.\n�Warning:�If these are used, the object may break when the user switches their DirectX settings."
					choices = {}
				}
				"maxdxlevel":
				{
					typename = "choices"
					shortinfo = "Maximum DX Level"
					extra = ""
					notes = ""
					description = "Default (no bounding)\nDX7\nDX8\nDX8.1\nDX9 SM2\nDX9 SM3"
					choices = {}
				}
				"mincpulevel":
				{
					typename = "choices"
					shortinfo = "Minimum CPU Level"
					extra = "(in all games since [Left 4 Dead])"
					notes = ""
					description = "A user with a CPU level lower than this will not see this object rendered in-game. CPU levels are determined by the Effect detail setting."
					choices = {}
				}
				"maxcpulevel":
				{
					typename = "choices"
					shortinfo = "Maximum CPU Level"
					extra = "(in all games since [Left 4 Dead])"
					notes = ""
					description = "0: Default\n1: Low\n2: Medium\n3: High"
					choices = {}
				}
				"mingpulevel":
				{
					typename = "choices"
					shortinfo = "Minimum GPU Level"
					extra = "(in all games since [Left 4 Dead])"
					notes = ""
					description = "A user with a GPU level lower than this will not see this object rendered in-game. GPU levels are determined by the Shader detail setting."
					choices = {}
				}
				"maxgpulevel":
				{
					typename = "choices"
					shortinfo = "Maximum GPU Level"
					extra = "(in all games since [Left 4 Dead])"
					notes = ""
					description = "0: Default\n1: Very low\n2: Low\n3: Medium\n4: High"
					choices = {}
				}
				"rendermode":
				{
					typename = "choices"
					shortinfo = "Render Mode"
					extra = ""
					notes = ""
					description = "Set a non-standard rendering mode on this entity."
					choices = 
					{
						"0" : "Normal"
						"1" : "Color"
						"2" : "Texture"
						"3" : "Glow"
						"4" : "Solid/Alphatest"
						"5" : "Additive"
						"6" : "Removed, does nothing"
						"7" : "Additive Fractional Frame"
						"8" : "Alpha Add"
						"9" : "World Space Glow"
						"10" : "Don't Render"

					}
				}
				"renderamt":
				{
					typename = "integer"
					shortinfo = "Render FX / Transparency (0 - 255)"
					extra = ""
					notes = ""
					description = "Transparency amount, requires a Render Mode other than Normal. 0 is invisible, 255 is fully visible."
					choices = {}
				}
				"rendercolor":
				{
					typename = "color255"
					shortinfo = "Render Color (R G B)"
					extra = ""
					notes = ""
					description = "Color tint."
					choices = {}
				}
				"disablereceiveshadows":
				{
					typename = "boolean"
					shortinfo = "Disable Receiving Shadows"
					extra = ""
					notes = ""
					description = "Prevent the entity from receiving shadows on itself."
					choices = {}
				}
				"renderfx":
				{
					typename = "choices"
					shortinfo = "Render FX"
					extra = ""
					notes = ""
					description = "Preset pattern of appearance effects."
					choices = 
					{
						"0" : "None"
						"1" : "Slow Pulse"
						"2" : "Fast Pulse"
						"3" : "Slow Wide Pulse"
						"4" : "Fast Wide Pulse"
						"5" : "Slow Fade Away"
						"6" : "Fast Fade Away"
						"7" : "Slow Become Solid"
						"8" : "Fast Become Solid"
						"9" : "Slow Strobe"
						"10" : "Fast Strobe"
						"11" : "Faster Strobe"
						"12" : "Slow Flicker"
						"13" : "Fast Flicker"
						"14" : "Constant Glow"
						"15" : "Distort"
						"16" : "Hologram (Distort + fade)"
						"17" : "Scale Up"
						"18" : "Glowing Shell (OBSOLETE)"
						"19" : "Clamp Minimum Scale (OBSOLETE)"
						"20" : "Environmental Rain (OBSOLETE)"
						"21" : "Environmental Snow (OBSOLETE)"
						"22" : "Spotlight FX"
						"23" : "Ragdoll"
						"24" : "Fade Wider Pulse"

					}
				}
			}
		}
		env_spritetrail = 
		{
			description = "env_spritetrail is a  point entity available in all Source games. It frequently emits a sprite, intended to create a trail effect when moving.\n In code, it is represented by class CSpriteTrail, defined in SpriteTrail.cpp."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"lifetime":
				{
					typename = "float"
					shortinfo = "Lifetime"
					extra = ""
					notes = ""
					description = "How long the beam is shown."
					choices = {}
				}
				"startwidth":
				{
					typename = "float"
					shortinfo = "Start Width"
					extra = ""
					notes = ""
					description = "The width of the beam to the beginning."
					choices = {}
				}
				"endwidth":
				{
					typename = "float"
					shortinfo = "End Width"
					extra = ""
					notes = ""
					description = "The width of the beam when it has full expanded."
					choices = {}
				}
				"spritename":
				{
					typename = "string"
					shortinfo = "Sprite Name"
					extra = ""
					notes = ""
					description = "The material to draw."
					choices = {}
				}
				"animate":
				{
					typename = "boolean"
					shortinfo = "Animated"
					extra = "!FGD"
					notes = ""
					description = "To do:�Untested. Tells the sprite to animate if it can. All the keyvalues, flags, and inputs from env_sprite may be used."
					choices = {}
				}
				"rendermode":
				{
					typename = "choices"
					shortinfo = "Render Mode"
					extra = ""
					notes = ""
					description = "Set a non-standard rendering mode on this entity."
					choices = 
					{
						"0" : "Normal"
						"1" : "Color"
						"2" : "Texture"
						"3" : "Glow"
						"4" : "Solid/Alphatest"
						"5" : "Additive"
						"6" : "Removed, does nothing"
						"7" : "Additive Fractional Frame"
						"8" : "Alpha Add"
						"9" : "World Space Glow"
						"10" : "Don't Render"

					}
				}
				"renderamt":
				{
					typename = "integer"
					shortinfo = "Render FX / Transparency (0 - 255)"
					extra = ""
					notes = ""
					description = "Transparency amount, requires a Render Mode other than Normal. 0 is invisible, 255 is fully visible."
					choices = {}
				}
				"rendercolor":
				{
					typename = "color255"
					shortinfo = "Render Color (R G B)"
					extra = ""
					notes = ""
					description = "Color tint."
					choices = {}
				}
				"disablereceiveshadows":
				{
					typename = "boolean"
					shortinfo = "Disable Receiving Shadows"
					extra = ""
					notes = ""
					description = "Prevent the entity from receiving shadows on itself."
					choices = {}
				}
				"renderfx":
				{
					typename = "choices"
					shortinfo = "Render FX"
					extra = ""
					notes = ""
					description = "Preset pattern of appearance effects."
					choices = 
					{
						"0" : "None"
						"1" : "Slow Pulse"
						"2" : "Fast Pulse"
						"3" : "Slow Wide Pulse"
						"4" : "Fast Wide Pulse"
						"5" : "Slow Fade Away"
						"6" : "Fast Fade Away"
						"7" : "Slow Become Solid"
						"8" : "Fast Become Solid"
						"9" : "Slow Strobe"
						"10" : "Fast Strobe"
						"11" : "Faster Strobe"
						"12" : "Slow Flicker"
						"13" : "Fast Flicker"
						"14" : "Constant Glow"
						"15" : "Distort"
						"16" : "Hologram (Distort + fade)"
						"17" : "Scale Up"
						"18" : "Glowing Shell (OBSOLETE)"
						"19" : "Clamp Minimum Scale (OBSOLETE)"
						"20" : "Environmental Rain (OBSOLETE)"
						"21" : "Environmental Snow (OBSOLETE)"
						"22" : "Spotlight FX"
						"23" : "Ragdoll"
						"24" : "Fade Wider Pulse"

					}
				}
			}
		}
		env_steam = 
		{
			description = "env_steam is a  point entity available in all Source games. It is used to create a jet of steam, or heat wave distortion. \nThe entity appears as a cone in Hammer, the shape indicates the direction the emitter outputs the particles (away from the point).\n In code, it is represented by class CSteamJet, defined in steamjet.cpp."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Emissive - Uses the value specified in rendercolor. If not checked, color is automatically determined by environmental lighting."
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"InitialState":
				{
					typename = "choices"
					shortinfo = "Initial State"
					extra = ""
					notes = ""
					description = "Start enabled?\n0: Off\n1: On"
					choices = {}
				}
				"Type":
				{
					typename = "choices"
					shortinfo = "Particle Type"
					extra = ""
					notes = ""
					description = "Steam effect type, see image on the top right.\n0: Normal\n1: Heat Wave"
					choices = {}
				}
				"SpreadSpeed":
				{
					typename = "integer"
					shortinfo = "Spread Speed"
					extra = ""
					notes = ""
					description = "The amount of random spread in the particle's velocity after they spawn."
					choices = {}
				}
				"Speed":
				{
					typename = "integer"
					shortinfo = "Speed"
					extra = ""
					notes = ""
					description = "The default speed at which the particles move after they spawn."
					choices = {}
				}
				"StartSize":
				{
					typename = "integer"
					shortinfo = "Particle start size"
					extra = ""
					notes = ""
					description = "The initial size of the particles after they spawn."
					choices = {}
				}
				"EndSize":
				{
					typename = "integer"
					shortinfo = "Particle end size"
					extra = ""
					notes = ""
					description = "The size of the particles at the point at which they are removed."
					choices = {}
				}
				"Rate":
				{
					typename = "integer"
					shortinfo = "Emission rate"
					extra = ""
					notes = ""
					description = "The rate of particle emission. i.e. particles per second."
					choices = {}
				}
				"JetLength":
				{
					typename = "integer"
					shortinfo = "Length of steam jet"
					extra = ""
					notes = ""
					description = "The length of the jet determines the lifetime of each particle."
					choices = {}
				}
				"RollSpeed":
				{
					typename = "float"
					shortinfo = "How fast does the particles spin"
					extra = ""
					notes = ""
					description = "Particle roll speed."
					choices = {}
				}
				"rendercolor":
				{
					typename = "color255"
					shortinfo = "Color (R G B)"
					extra = ""
					notes = ""
					description = "Steam color, only used if Emissive flag is set."
					choices = {}
				}
				"renderamt":
				{
					typename = "integer"
					shortinfo = "Translucency"
					extra = ""
					notes = ""
					description = "Render alpha value."
					choices = {}
				}
				"StartNoise":
				{
					typename = "sound"
					shortinfo = "Start Sound"
					extra = "(in all games since [Left 4 Dead])"
					notes = ""
					description = "Only in [Left 4 Dead][Left 4 Dead 2]. Sound to play when starting emission."
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"disableX360":
				{
					typename = "boolean"
					shortinfo = "Disable for Xbox 360"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "If Yes, disables this entity on the Xbox 360 version of Source."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"LagCompensate":
				{
					typename = "boolean"
					shortinfo = "Lag Compensation"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "Set to Yes to lag compensate this entity. Should be used very sparingly!"
					choices = {}
				}
				"is_autoaim_target":
				{
					typename = "boolean"
					shortinfo = "Is Automatic-Aim Target"
					extra = "(in all games since [Counter-Strike: Global Offensive])�!FGD"
					notes = ""
					description = "If set to 1, this entity will slow down aiming movement for consoles and joystick controllers when the entity is under the crosshairs."
					choices = {}
				}
			}
		}
		env_sun = 
		{
			description = "env_sun is a  point entity available in all Source games. It places a glowing sun effect skybox where it does not parallax, giving the impression that it is nearly infinitely far away. The entity does not contribute any actual lighting; it is merely a visual representation of the Sun. Use light_environment to provide actual sunlight for your map.\n\nWhen the sun is looked at directly, it will transition to the properties of an 'overlay'.\n In code, it is represented by class CSun, defined in sun.cpp."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"use_angles":
				{
					typename = "boolean"
					shortinfo = "UseAngles"
					extra = ""
					notes = ""
					description = "The old way to orient env_sun is to use Viewer entity. The new way is by Pitch Yaw Roll. If you want to use the new way, set this property to YES."
					choices = {}
				}
				"target":
				{
					typename = "targetname"
					shortinfo = "Viewer entity"
					extra = ""
					notes = ""
					description = "Name of an entity (probably sky_camera) used to determine where the sun is in the skybox. The resulting sun sprite will be positioned based on a line starting from the Viewer entity towards the env_sun."
					choices = {}
				}
				"pitch":
				{
					typename = "float"
					shortinfo = "Pitch"
					extra = ""
					notes = ""
					description = "This value sets the pitch position of the sun. It overrides the Pitch in Pitch Yaw Roll, even if left at 0, so it needs to be specified. This Pitch is reverse of the normal, so 90 is straight up, while -90 is straight down."
					choices = {}
				}
				"angle":
				{
					typename = "float"
					shortinfo = "Yaw"
					extra = "!FGD"
					notes = ""
					description = "Override for Yaw in Pitch Yaw Roll, similar to Pitch."
					choices = {}
				}
				"rendercolor":
				{
					typename = "color255"
					shortinfo = "Sun Color (R G B)"
					extra = ""
					notes = ""
					description = "Color of the sun. The effect is additive with the sky: a pure yellow sun with a bright blue sky will appear white in-game; change the color to account for this."
					choices = {}
				}
				"overlaycolor":
				{
					typename = "color255"
					shortinfo = "Overlay Color (R G B)"
					extra = ""
					notes = ""
					description = "Color of the sun overlay."
					choices = {}
				}
				"size":
				{
					typename = "integer"
					shortinfo = "Size"
					extra = ""
					notes = ""
					description = "Size of the sun."
					choices = {}
				}
				"overlaysize":
				{
					typename = "integer"
					shortinfo = "Overlay Size"
					extra = ""
					notes = ""
					description = "A value of -1 means the overlay will act the old way."
					choices = {}
				}
				"material":
				{
					typename = "sprite"
					shortinfo = "Material Name"
					extra = ""
					notes = ""
					description = "Material of the inner glow."
					choices = {}
				}
				"overlaymaterial":
				{
					typename = "sprite"
					shortinfo = "Overlay Material Name"
					extra = ""
					notes = ""
					description = "Material of the overlay glow."
					choices = {}
				}
				"HDRColorScale":
				{
					typename = "float"
					shortinfo = "HDR color scale"
					extra = ""
					notes = ""
					description = "Color multiplier when in HDR mode."
					choices = {}
				}
				"glowDistanceScale":
				{
					typename = "float"
					shortinfo = "Glow Distance Scale"
					extra = "(in all games since [Counter-Strike: Global Offensive])"
					notes = ""
					description = "Scales the distance used to test for sun glow occlusion. If the player can see any part of the skybox within this range, the overlay will render."
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"disableX360":
				{
					typename = "boolean"
					shortinfo = "Disable for Xbox 360"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "If Yes, disables this entity on the Xbox 360 version of Source."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"LagCompensate":
				{
					typename = "boolean"
					shortinfo = "Lag Compensation"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "Set to Yes to lag compensate this entity. Should be used very sparingly!"
					choices = {}
				}
				"is_autoaim_target":
				{
					typename = "boolean"
					shortinfo = "Is Automatic-Aim Target"
					extra = "(in all games since [Counter-Strike: Global Offensive])�!FGD"
					notes = ""
					description = "If set to 1, this entity will slow down aiming movement for consoles and joystick controllers when the entity is under the crosshairs."
					choices = {}
				}
			}
		}
		env_texturetoggle = 
		{
			description = "env_texturetoggle is a  point entity available in all Source games. It allows you to change the textures on brush entities or overlays.\nIn order for env_texturetoggle to work properly, your overlay or at least one face of your brush must use a VMT material with the ToggleTexture proxy defined and pointing to an animated VTF file with at least two frames.\n In code, it is represented by class CTextureToggle, defined in env_texturetoggle.cpp."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"target":
				{
					typename = "targetname"
					shortinfo = "Target Brush(es)"
					extra = ""
					notes = ""
					description = "Name of the brushes or info_overlays. All ToggleTexture materials on all entities (including sprites) matching the targetname will be affected."
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"disableX360":
				{
					typename = "boolean"
					shortinfo = "Disable for Xbox 360"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "If Yes, disables this entity on the Xbox 360 version of Source."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"LagCompensate":
				{
					typename = "boolean"
					shortinfo = "Lag Compensation"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "Set to Yes to lag compensate this entity. Should be used very sparingly!"
					choices = {}
				}
				"is_autoaim_target":
				{
					typename = "boolean"
					shortinfo = "Is Automatic-Aim Target"
					extra = "(in all games since [Counter-Strike: Global Offensive])�!FGD"
					notes = ""
					description = "If set to 1, this entity will slow down aiming movement for consoles and joystick controllers when the entity is under the crosshairs."
					choices = {}
				}
			}
		}
		env_tonemap_controller = 
		{
			description = "env_tonemap_controller is a  point entity available in all Source games. It controls the HDR tonemapping for the player. Think of it as a method of controlling the exposure of the player's eyes. Tonemapping affect all players in multiplayer. HDR settings should normally be changed through triggers, whenever transitioning between environments of different light levels.\n\n In code, it is represented by class CEnvTonemapController, defined in env_tonemap_controller.cpp."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Master (Has priority if multiple env_tonemap_controllers exist) (in all games since [Left 4 Dead])"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"disableX360":
				{
					typename = "boolean"
					shortinfo = "Disable for Xbox 360"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "If Yes, disables this entity on the Xbox 360 version of Source."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"LagCompensate":
				{
					typename = "boolean"
					shortinfo = "Lag Compensation"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "Set to Yes to lag compensate this entity. Should be used very sparingly!"
					choices = {}
				}
				"is_autoaim_target":
				{
					typename = "boolean"
					shortinfo = "Is Automatic-Aim Target"
					extra = "(in all games since [Counter-Strike: Global Offensive])�!FGD"
					notes = ""
					description = "If set to 1, this entity will slow down aiming movement for consoles and joystick controllers when the entity is under the crosshairs."
					choices = {}
				}
			}
		}
		env_tonemap_controller_ghost = 
		{
			description = "[Left 4 Dead][Left 4 Dead 2]�env_tonemap_controller_ghost is a  point entity available in the Left 4 Dead series.\nAn entity that controls the HDR tonemapping for ghost player. Think of it as a method of controlling the exposure of the player's eyes."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Master (Has priority if multiple env_tonemap_controller_ghost(s) exist)(FLAG VALUE MAY BE INCORRECT)"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = {}
		}
		env_tonemap_controller_infected = 
		{
			description = "[Left 4 Dead][Left 4 Dead 2]�env_tonemap_controller_infected is a  point entity available in the Left 4 Dead series.\nAn entity that controls the HDR tonemapping for infected player. Think of it as a method of controlling the exposure of the player's eyes."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Master (Has priority if multiple env_tonemap_controller_infected(s) exist)(FLAG VALUE MAY BE INCORRECT)"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = {}
		}
		env_viewpunch = 
		{
			description = "env_viewpunch is a  point entity available in all Episode One games. It applies a view punch according to the origin, radius, and angle. Generally, it moves the screen as if the player was 'punched'."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Punch all players (ignore radius)"
					notes = ""
				}
				"2":
				{
					category = ""
					description = "Punch players in the air"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "angle"
					shortinfo = "Punch angles"
					extra = ""
					notes = ""
					description = "The punch angles to apply."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "float"
					shortinfo = "Effect Radius"
					extra = ""
					notes = ""
					description = "The radius around this entity in which to affect players."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
			}
		}
		env_wind = 
		{
			description = "env_wind is a  point entity available in all Source games. It creates wind throughout an entire map.\n In code, it is represented by class CEnvWind, defined in effects.cpp."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"minwind":
				{
					typename = "integer"
					shortinfo = "Min normal speed"
					extra = ""
					notes = ""
					description = "Minimum speed of the wind while idling."
					choices = {}
				}
				"maxwind":
				{
					typename = "integer"
					shortinfo = "Max normal speed"
					extra = ""
					notes = ""
					description = "Maximum speed of the wind while idling."
					choices = {}
				}
				"mingust":
				{
					typename = "integer"
					shortinfo = "Min gust speed"
					extra = ""
					notes = ""
					description = "Minimum speed of wind gusts."
					choices = {}
				}
				"maxgust":
				{
					typename = "integer"
					shortinfo = "Max gust speed"
					extra = ""
					notes = ""
					description = "Maximum speed of wind gusts."
					choices = {}
				}
				"mingustdelay":
				{
					typename = "integer"
					shortinfo = "Min gust delay"
					extra = ""
					notes = ""
					description = "Minimum time delay between random gusts."
					choices = {}
				}
				"maxgustdelay":
				{
					typename = "integer"
					shortinfo = "Max gust delay"
					extra = ""
					notes = ""
					description = "Maximum time delay between random gusts."
					choices = {}
				}
				"gustduration":
				{
					typename = "integer"
					shortinfo = "Gust Duration"
					extra = ""
					notes = ""
					description = "How long will the wind gust for."
					choices = {}
				}
				"gustdirchange":
				{
					typename = "integer"
					shortinfo = "Max gust dir change (degrees)"
					extra = ""
					notes = ""
					description = "Maximum amount that the wind's direction changes due to a gust."
					choices = {}
				}
				"windradius":
				{
					typename = "float"
					shortinfo = "Radius"
					extra = "(only in [Left 4 Dead][Left 4 Dead 2])"
					notes = ""
					description = "The radius this entity applies wind effects to. -1 for global effect."
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"disableX360":
				{
					typename = "boolean"
					shortinfo = "Disable for Xbox 360"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "If Yes, disables this entity on the Xbox 360 version of Source."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"LagCompensate":
				{
					typename = "boolean"
					shortinfo = "Lag Compensation"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "Set to Yes to lag compensate this entity. Should be used very sparingly!"
					choices = {}
				}
				"is_autoaim_target":
				{
					typename = "boolean"
					shortinfo = "Is Automatic-Aim Target"
					extra = "(in all games since [Counter-Strike: Global Offensive])�!FGD"
					notes = ""
					description = "If set to 1, this entity will slow down aiming movement for consoles and joystick controllers when the entity is under the crosshairs."
					choices = {}
				}
			}
		}
		env_zoom = 
		{
			description = "env_zoom is a  point entity available in all Source games. It can be used to control the player's FOV. Useful for scenes where the player's view is being controlled, or player-usable \nbinoculars/telescopes, etc.\n In code, it is represented by class CEnvZoom, defined in env_zoom.cpp."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Allow Suit Zoom"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"FOV":
				{
					typename = "integer"
					shortinfo = "Target FOV"
					extra = ""
					notes = ""
					description = "FOV that this entity should set the player's FOV to when active."
					choices = {}
				}
				"Rate":
				{
					typename = "float"
					shortinfo = "Seconds to reach target"
					extra = ""
					notes = ""
					description = "Amount of time it should take to zoom to the specified FOV."
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"disableX360":
				{
					typename = "boolean"
					shortinfo = "Disable for Xbox 360"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "If Yes, disables this entity on the Xbox 360 version of Source."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"LagCompensate":
				{
					typename = "boolean"
					shortinfo = "Lag Compensation"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "Set to Yes to lag compensate this entity. Should be used very sparingly!"
					choices = {}
				}
				"is_autoaim_target":
				{
					typename = "boolean"
					shortinfo = "Is Automatic-Aim Target"
					extra = "(in all games since [Counter-Strike: Global Offensive])�!FGD"
					notes = ""
					description = "If set to 1, this entity will slow down aiming movement for consoles and joystick controllers when the entity is under the crosshairs."
					choices = {}
				}
			}
		}
		
	}
	filter = 
	{
		filter_activator_infected_class = 
		{
			description = "[Left 4 Dead][Left 4 Dead 2]�filter_activator_infected_class is a  point entity available in the Left 4 Dead series. It is a filter that checks the activator's infected class."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"filterinfectedclass":
				{
					typename = "choices"
					shortinfo = "Filter Infected Class"
					extra = ""
					notes = ""
					description = "Value\nDescription\n\n\n1\nSmoker\n\n\n2\nBoomer\n\n\n3\nHunter\n\n\n4\nSpitter\n\n\n5\nJockey\n\n\n6\nCharger\n\n\n7\n Confirm:Witch?!FGD\n\n\n8\nTank"
					choices = {}
				}
				"Negated":
				{
					typename = "boolean"
					shortinfo = "Filter mode"
					extra = ""
					notes = ""
					description = "Inverts the filter, making the specified criteria fail and all others pass."
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"disableX360":
				{
					typename = "boolean"
					shortinfo = "Disable for Xbox 360"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "If Yes, disables this entity on the Xbox 360 version of Source."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"LagCompensate":
				{
					typename = "boolean"
					shortinfo = "Lag Compensation"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "Set to Yes to lag compensate this entity. Should be used very sparingly!"
					choices = {}
				}
			}
		}
		filter_activator_team = 
		{
			description = "filter_activator_team is a  point entity available in all Source games. This filter checks the TeamNum keyvalue of the activator. If the SetTeam input is used to change teams, it will read the parameter passed from the input instead. \n In code, it is represented by class FilterTeam, defined in filters.cpp."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"filterteam":
				{
					typename = "choices"
					shortinfo = "Filter Team Number"
					extra = ""
					notes = ""
					description = "The team number to filter by. Values vary from game to game."
					choices = {}
				}
				"Negated":
				{
					typename = "boolean"
					shortinfo = "Filter mode"
					extra = ""
					notes = ""
					description = "Inverts the filter, making the specified criteria fail and all others pass."
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"disableX360":
				{
					typename = "boolean"
					shortinfo = "Disable for Xbox 360"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "If Yes, disables this entity on the Xbox 360 version of Source."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"LagCompensate":
				{
					typename = "boolean"
					shortinfo = "Lag Compensation"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "Set to Yes to lag compensate this entity. Should be used very sparingly!"
					choices = {}
				}
				"is_autoaim_target":
				{
					typename = "boolean"
					shortinfo = "Is Automatic-Aim Target"
					extra = "(in all games since [Counter-Strike: Global Offensive])�!FGD"
					notes = ""
					description = "If set to 1, this entity will slow down aiming movement for consoles and joystick controllers when the entity is under the crosshairs."
					choices = {}
				}
			}
		}
		filter_health = 
		{
			description = "[Left 4 Dead 2]�filter_health is a  point entity available in Left 4 Dead 2. It is a damage filter that checks if the entity causing the damage has adrenaline active or not."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"adrenalinepresence":
				{
					typename = "choices"
					shortinfo = "Adrenaline presence"
					extra = ""
					notes = ""
					description = "Allows this state of adrenaline on the attacker to pass the filter.\n0: only inactive\n1: only active"
					choices = {}
				}
				"healthmin":
				{
					typename = "integer"
					shortinfo = "Min Health"
					extra = ""
					notes = ""
					description = "The lower bound on player health that will pass this filter (inclusive)."
					choices = {}
				}
				"healthmax":
				{
					typename = "integer"
					shortinfo = "Max Health"
					extra = ""
					notes = ""
					description = "The upper bound on player health that will pass this filter (inclusive)."
					choices = {}
				}
				"Negated":
				{
					typename = "boolean"
					shortinfo = "Filter mode"
					extra = ""
					notes = ""
					description = "Inverts the filter, making the specified criteria fail and all others pass."
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"disableX360":
				{
					typename = "boolean"
					shortinfo = "Disable for Xbox 360"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "If Yes, disables this entity on the Xbox 360 version of Source."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"LagCompensate":
				{
					typename = "boolean"
					shortinfo = "Lag Compensation"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "Set to Yes to lag compensate this entity. Should be used very sparingly!"
					choices = {}
				}
			}
		}
		filter_melee_damage = 
		{
			description = "[Left 4 Dead 2]�filter_melee_damage is a  point entity available in Left 4 Dead 2. It is a damage filter that filters by the damage, allowing only melee damage. It can also filter between slicing and bludgeoning damage."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"damagetype":
				{
					typename = "choices"
					shortinfo = "Damage type"
					extra = ""
					notes = ""
					description = "The damage type to filter by. Allows the specified damage type.\n0: All Melee Damage\n4: only SLASH\n128: only CLUB"
					choices = {}
				}
				"Negated":
				{
					typename = "boolean"
					shortinfo = "Filter mode"
					extra = ""
					notes = ""
					description = "Inverts the filter, making the specified criteria fail and all others pass."
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"disableX360":
				{
					typename = "boolean"
					shortinfo = "Disable for Xbox 360"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "If Yes, disables this entity on the Xbox 360 version of Source."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"LagCompensate":
				{
					typename = "boolean"
					shortinfo = "Lag Compensation"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "Set to Yes to lag compensate this entity. Should be used very sparingly!"
					choices = {}
				}
			}
		}
		filter_activator_class = 
		{
			description = "filter_activator_class is a  point entity available in all Source games. It is a filter that checks the classname (keyvalue) of the activator.\n In code, it is represented by class CFilterClass, defined in filters.cpp."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"filterclass":
				{
					typename = "string"
					shortinfo = "Filter Classname"
					extra = ""
					notes = ""
					description = "The classname to filter by."
					choices = {}
				}
				"Negated":
				{
					typename = "boolean"
					shortinfo = "Filter mode"
					extra = ""
					notes = ""
					description = "Inverts the filter, making the specified criteria fail and all others pass."
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"disableX360":
				{
					typename = "boolean"
					shortinfo = "Disable for Xbox 360"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "If Yes, disables this entity on the Xbox 360 version of Source."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"LagCompensate":
				{
					typename = "boolean"
					shortinfo = "Lag Compensation"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "Set to Yes to lag compensate this entity. Should be used very sparingly!"
					choices = {}
				}
				"is_autoaim_target":
				{
					typename = "boolean"
					shortinfo = "Is Automatic-Aim Target"
					extra = "(in all games since [Counter-Strike: Global Offensive])�!FGD"
					notes = ""
					description = "If set to 1, this entity will slow down aiming movement for consoles and joystick controllers when the entity is under the crosshairs."
					choices = {}
				}
			}
		}
		filter_activator_context = 
		{
			description = "filter_activator_context is a  point entity available in all Source games since [Left 4 Dead] Left 4 Dead. It is a filter that filters by a single context on the activator. It takes the name only, with no specific value.[confirm]\n In code, it is represented by class CFilterContext, defined in filters.cpp."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"Negated":
				{
					typename = "boolean"
					shortinfo = "Filter mode"
					extra = ""
					notes = ""
					description = "Inverts the filter, making the specified criteria fail and all others pass."
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"disableX360":
				{
					typename = "boolean"
					shortinfo = "Disable for Xbox 360"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "If Yes, disables this entity on the Xbox 360 version of Source."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"LagCompensate":
				{
					typename = "boolean"
					shortinfo = "Lag Compensation"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "Set to Yes to lag compensate this entity. Should be used very sparingly!"
					choices = {}
				}
				"is_autoaim_target":
				{
					typename = "boolean"
					shortinfo = "Is Automatic-Aim Target"
					extra = "(in all games since [Counter-Strike: Global Offensive])�!FGD"
					notes = ""
					description = "If set to 1, this entity will slow down aiming movement for consoles and joystick controllers when the entity is under the crosshairs."
					choices = {}
				}
			}
		}
		filter_activator_mass_greater = 
		{
			description = "filter_activator_mass_greater is a  point entity available in all Source games. It is a filter that checks the mass of the activator.\n In code, it is represented by class CFilterMassGreater, defined in filters.cpp."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"filtermass":
				{
					typename = "float"
					shortinfo = "Filter Mass"
					extra = ""
					notes = ""
					description = "The mass to filter by. Set Filter mode to Disallow if you want to check masses lower than this number."
					choices = {}
				}
				"Negated":
				{
					typename = "boolean"
					shortinfo = "Filter mode"
					extra = ""
					notes = ""
					description = "Inverts the filter, making the specified criteria fail and all others pass."
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"disableX360":
				{
					typename = "boolean"
					shortinfo = "Disable for Xbox 360"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "If Yes, disables this entity on the Xbox 360 version of Source."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"LagCompensate":
				{
					typename = "boolean"
					shortinfo = "Lag Compensation"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "Set to Yes to lag compensate this entity. Should be used very sparingly!"
					choices = {}
				}
				"is_autoaim_target":
				{
					typename = "boolean"
					shortinfo = "Is Automatic-Aim Target"
					extra = "(in all games since [Counter-Strike: Global Offensive])�!FGD"
					notes = ""
					description = "If set to 1, this entity will slow down aiming movement for consoles and joystick controllers when the entity is under the crosshairs."
					choices = {}
				}
			}
		}
		filter_activator_model = 
		{
			description = "filter_activator_model is a  point entity available in all Source games since [Left 4 Dead] Left 4 Dead. It is a filter that filters by the model of the activator.\n In code, it is represented by class CFilterModel, defined in filters.cpp."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"model":
				{
					typename = "model_path"
					shortinfo = "Filter Model"
					extra = ""
					notes = ""
					description = "The model to filter by."
					choices = {}
				}
				"Negated":
				{
					typename = "boolean"
					shortinfo = "Filter mode"
					extra = ""
					notes = ""
					description = "Inverts the filter, making the specified criteria fail and all others pass."
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"disableX360":
				{
					typename = "boolean"
					shortinfo = "Disable for Xbox 360"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "If Yes, disables this entity on the Xbox 360 version of Source."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"LagCompensate":
				{
					typename = "boolean"
					shortinfo = "Lag Compensation"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "Set to Yes to lag compensate this entity. Should be used very sparingly!"
					choices = {}
				}
				"is_autoaim_target":
				{
					typename = "boolean"
					shortinfo = "Is Automatic-Aim Target"
					extra = "(in all games since [Counter-Strike: Global Offensive])�!FGD"
					notes = ""
					description = "If set to 1, this entity will slow down aiming movement for consoles and joystick controllers when the entity is under the crosshairs."
					choices = {}
				}
			}
		}
		filter_activator_name = 
		{
			description = "filter_activator_name is a  point entity available in all Source games. It is a filter that checks the targetname of the activator.\n In code, it is represented by class CFilterName, defined in filters.cpp."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"filtername":
				{
					typename = "targetname"
					shortinfo = "Filter Name"
					extra = ""
					notes = ""
					description = "The name to filter by.\n�Note:�Entities without any targetname can be filtered by leaving the Filter Name blank."
					choices = {}
				}
				"Negated":
				{
					typename = "boolean"
					shortinfo = "Filter mode"
					extra = ""
					notes = ""
					description = "Inverts the filter, making the specified criteria fail and all others pass."
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"disableX360":
				{
					typename = "boolean"
					shortinfo = "Disable for Xbox 360"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "If Yes, disables this entity on the Xbox 360 version of Source."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"LagCompensate":
				{
					typename = "boolean"
					shortinfo = "Lag Compensation"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "Set to Yes to lag compensate this entity. Should be used very sparingly!"
					choices = {}
				}
				"is_autoaim_target":
				{
					typename = "boolean"
					shortinfo = "Is Automatic-Aim Target"
					extra = "(in all games since [Counter-Strike: Global Offensive])�!FGD"
					notes = ""
					description = "If set to 1, this entity will slow down aiming movement for consoles and joystick controllers when the entity is under the crosshairs."
					choices = {}
				}
			}
		}
		filter_damage_typename = 
		{
			description = "filter_damage_type is a  point entity available in all Source games. It is a damage filter that filters by the type of damage inflicted\n In code, it is represented by class FilterDamageType, defined in filters.cpp."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "choices"
					shortinfo = "Damage type"
					extra = ""
					notes = ""
					description = "The damage type to filter by. The page linked to above has a more complete list. Similar to spawnflags, these types can be combined by adding their numbers together, but damage events must match the types perfectly."
					choices = {}
				}
			}
		}
		filter_enemy = 
		{
			description = "filter_enemy is a  point entity available in all Source games. It is a filter intended to filter a potential enemy entity by a set of criteria. Despite the name, much of its functionality is not enemy-related, allowing it to be used as a name and proximity filter for any type of entity. Enmity and proximity are measured relative to the !caller.\n In code, it is represented by class CFilterEnemy, defined in filters.cpp."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Do not lose target if already acquired but filter failed."
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"filtername":
				{
					typename = "string"
					shortinfo = "Name/Classname"
					extra = ""
					notes = ""
					description = "The classname or targetname to filter by. If no string is given, all entities will have further criteria tested. Entities for which further criteria are not tested will always pass the filter. A filtername of '!player' is treated specially and will pass if the enemy entity is a player."
					choices = {}
				}
				"filter_radius":
				{
					typename = "float"
					shortinfo = "Radius"
					extra = ""
					notes = ""
					description = "Radius an enemy must be within."
					choices = {}
				}
				"filter_outer_radius":
				{
					typename = "float"
					shortinfo = "Outer Radius"
					extra = ""
					notes = ""
					description = "Enemies outside this radius are considered invalid if Allow is set and valid if Disallow is set."
					choices = {}
				}
				"filter_max_per_enemy":
				{
					typename = "integer"
					shortinfo = "Max Squadmates Per Enemy"
					extra = ""
					notes = ""
					description = "Maximum number of squadmates allowed to target any given entity."
					choices = {}
				}
				"Negated":
				{
					typename = "boolean"
					shortinfo = "Filter mode"
					extra = ""
					notes = ""
					description = "Inverts the filter, making the specified criteria fail and all others pass."
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"disableX360":
				{
					typename = "boolean"
					shortinfo = "Disable for Xbox 360"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "If Yes, disables this entity on the Xbox 360 version of Source."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"LagCompensate":
				{
					typename = "boolean"
					shortinfo = "Lag Compensation"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "Set to Yes to lag compensate this entity. Should be used very sparingly!"
					choices = {}
				}
				"is_autoaim_target":
				{
					typename = "boolean"
					shortinfo = "Is Automatic-Aim Target"
					extra = "(in all games since [Counter-Strike: Global Offensive])�!FGD"
					notes = ""
					description = "If set to 1, this entity will slow down aiming movement for consoles and joystick controllers when the entity is under the crosshairs."
					choices = {}
				}
			}
		}
		filter_multi = 
		{
			description = "filter_multi is a  point entity available in all Source games. It is a filter that tests the activator against multiple other filters. This allows you to build more complex filters, such as 'Allow anyone on Team 1 who is also class engineer', or 'Allow everything except classes npc_zombie and npc_headcrab'. filter_multi can even be used with other filter_multis.\n In code, it is represented by class CFilterMultiple, defined in filters.cpp."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"FilterType":
				{
					typename = "choices"
					shortinfo = "Logic Type"
					extra = ""
					notes = ""
					description = "Boolean logic applied when testing the filters. See logic gate for information on more complex checking patterns.\n0: AND (all filters must pass)\n1: OR (any filter must pass)"
					choices = {}
				}
				"Filter05":
				{
					typename = "filter"
					shortinfo = "Filter 1 (Filter01)  to Filter 5"
					extra = ""
					notes = ""
					description = "Activator filter to test."
					choices = {}
				}
				"Filter10":
				{
					typename = "filter"
					shortinfo = "Filter 6 (Filter06)  to Filter 10"
					extra = "(in all games since [Left 4 Dead])"
					notes = ""
					description = "Activator filter to test."
					choices = {}
				}
				"Negated":
				{
					typename = "boolean"
					shortinfo = "Negate Outcome"
					extra = ""
					notes = ""
					description = "Whether to negate the result of the sub-filters, after combining them using the Logic Type chosen. Negating the outcome using the AND logic type means that any sub-filter must fail for this filter to pass. Negating the outcome using the OR logic type means that all sub-filters must fail for this filter to pass."
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"disableX360":
				{
					typename = "boolean"
					shortinfo = "Disable for Xbox 360"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "If Yes, disables this entity on the Xbox 360 version of Source."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"LagCompensate":
				{
					typename = "boolean"
					shortinfo = "Lag Compensation"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "Set to Yes to lag compensate this entity. Should be used very sparingly!"
					choices = {}
				}
				"is_autoaim_target":
				{
					typename = "boolean"
					shortinfo = "Is Automatic-Aim Target"
					extra = "(in all games since [Counter-Strike: Global Offensive])�!FGD"
					notes = ""
					description = "If set to 1, this entity will slow down aiming movement for consoles and joystick controllers when the entity is under the crosshairs."
					choices = {}
				}
			}
		}
		
	}
	fog = 
	{
		fog_volume = 
		{
			description = "fog_volume is a  brush entity available in all Source games since [Left 4 Dead] Left 4 Dead. It controls fog and other visual cinematic elements within its volume. It is necessary to have at least one fog_volume in order for (a master) color_correction to take effect in Left 4 Dead and Left 4 Dead 2."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "targetname"
					shortinfo = "Fog Name"
					extra = ""
					notes = ""
					description = "The name of the fog entity associated with this volume."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "targetname"
					shortinfo = "Postprocess Name"
					extra = ""
					notes = ""
					description = "The name of the postprocess entity associated with this volume."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "targetname"
					shortinfo = "ColorCorrection Name"
					extra = ""
					notes = ""
					description = "The name of the color_correction entity associated with this volume."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"StartDisabled":
				{
					typename = "boolean"
					shortinfo = "Start Disabled"
					extra = ""
					notes = ""
					description = "Stay dormant until activated (probably with the Enable input)."
					choices = {}
				}
			}
		}
		
	}
	func = 
	{
		func_block_charge = 
		{
			description = "[Left 4 Dead 2]�func_block_charge is a  brush entity available in Left 4 Dead 2. Chargers will not charge through this brush."
			flagnotes = ""
			flags = 
			{
				"2":
				{
					category = ""
					description = "Ignore player +USE"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "float"
					shortinfo = "Minimum Light Level"
					extra = ""
					notes = ""
					description = "The minimum level of ambient light that hits this brush."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "choices"
					shortinfo = "Solidity"
					extra = ""
					notes = ""
					description = "Used to control the solidity/collision of these brushes.\n0: Toggle - The solidity can be toggled together with its visibility.\n1: Never Solid\n2: Always Solid"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "boolean"
					shortinfo = "Solid BSP"
					extra = ""
					notes = ""
					description = "Set this if this brush is in hierarchy with a moving object of some kind, and the player can stand on this brush."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "classname"
					shortinfo = "NPC class excluded from collisions"
					extra = ""
					notes = ""
					description = "If an NPC classname (i.e. npc_zombie) is specified here, NPCs of that type won't collide with these brushes."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_5":
				{
					typename = "boolean"
					shortinfo = "Invert NPC class exclusion"
					extra = ""
					notes = ""
					description = "If set, then the excluded NPC class will consider this brush solid, and all other NPC classes will consider it non-solid."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_6":
				{
					typename = "boolean"
					shortinfo = "Shadows"
					extra = ""
					notes = ""
					description = "Configures whether this brush casts lightmap shadows."
					choices = {}
				}
				"StartDisabled":
				{
					typename = "boolean"
					shortinfo = "Start Disabled"
					extra = ""
					notes = ""
					description = "Stay dormant until activated (probably with the Enable input). �Tip:�If Solidity is Toggle, disabling func_brush also makes it non-solid."
					choices = {}
				}
				"origin":
				{
					typename = "origin"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"disableshadows":
				{
					typename = "boolean"
					shortinfo = "Disable Shadows"
					extra = ""
					notes = ""
					description = "Prevents the entity from creating cheap render-to-texture shadows, or lightmap shadows if the entity is a prop_static. Does not affect shadow mapping."
					choices = {}
				}
				"disableshadowdepth":
				{
					typename = "boolean"
					shortinfo = "Disable ShadowDepth"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable rendering into shadow depth (for projected textures) for this entity."
					choices = {}
				}
				"shadowdepthnocache":
				{
					typename = "choices"
					shortinfo = "Projected Texture Cache"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to hint projected texture system whether it is sufficient to cache shadow volume of this entity or to force render it every frame instead.\n0�: Default\n1�: No cache - render every frame\n2�: Cache it - render only once"
					choices = {}
				}
				"disableflashlight":
				{
					typename = "boolean"
					shortinfo = "Disable flashlight"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable projected texture lighting and shadows on this entity."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma.�Warning:�In [Counter-Strike: Source], parenting this entity to another can break your map."
					choices = {}
				}
				"rendermode":
				{
					typename = "choices"
					shortinfo = "Render Mode"
					extra = ""
					notes = ""
					description = "Set a non-standard rendering mode on this entity."
					choices = 
					{
						"0" : "Normal"
						"1" : "Color"
						"2" : "Texture"
						"3" : "Glow"
						"4" : "Solid/Alphatest"
						"5" : "Additive"
						"6" : "Removed, does nothing"
						"7" : "Additive Fractional Frame"
						"8" : "Alpha Add"
						"9" : "World Space Glow"
						"10" : "Don't Render"

					}
				}
			}
		}
		func_buildable_button = 
		{
			description = "[Left 4 Dead 2]�func_buildable_button is a  brush entity available in Left 4 Dead 2. It appears to be a brush based button similar to func_button_timed, intended to interface with VScripts instead of entity logic. It has likely been removed in favor of point_script_use_target."
			flagnotes = ""
			flags = 
			{
				"2048":
				{
					category = ""
					description = "Starts locked"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "choices"
					shortinfo = "Cumulative Use"
					extra = ""
					notes = ""
					description = "Value\nDescription\n\n\n0\nNo\n\n\n1\nYes"
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
				"origin":
				{
					typename = "origin"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
			}
		}
		func_button_timed = 
		{
			description = "[Left 4 Dead][Left 4 Dead 2]�func_button_timed is a  brush entity available in the Left 4 Dead series. It is a button that takes time to use."
			flagnotes = ""
			flags = 
			{
				"2048":
				{
					category = ""
					description = "Starts locked"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "integer"
					shortinfo = "Use Time"
					extra = ""
					notes = ""
					description = "The amount of time player must hold down use, in seconds."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "string"
					shortinfo = "Use String"
					extra = ""
					notes = ""
					description = "The text/string that appears on the progress bar while the player is holding down use."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "string"
					shortinfo = "Use Sub-String"
					extra = ""
					notes = ""
					description = "A sub-string that appears below the Use String."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "targetname"
					shortinfo = "Glow Entity"
					extra = ""
					notes = ""
					description = "The name of an entity that will get the +use glow for this button."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_5":
				{
					typename = "boolean"
					shortinfo = "Auto-Disable On Time Up"
					extra = ""
					notes = ""
					description = "When the use timer is up, disable the button. (Can be enabled with an input)"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_6":
				{
					typename = "choices"
					shortinfo = "Locked Sound"
					extra = ""
					notes = ""
					description = "Value\nDescription\n\n\n0\nNone\n\n\n2\nAccess Denied\n\n\n8\nSmall zap\n\n\n10\nBuzz\n\n\n11\nBuzz Off\n\n\n12\nLatch Locked"
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
				"origin":
				{
					typename = "origin"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"rendermode":
				{
					typename = "choices"
					shortinfo = "Render Mode"
					extra = ""
					notes = ""
					description = "Set a non-standard rendering mode on this entity."
					choices = 
					{
						"0" : "Normal"
						"1" : "Color"
						"2" : "Texture"
						"3" : "Glow"
						"4" : "Solid/Alphatest"
						"5" : "Additive"
						"6" : "Removed, does nothing"
						"7" : "Additive Fractional Frame"
						"8" : "Alpha Add"
						"9" : "World Space Glow"
						"10" : "Don't Render"

					}
				}
				"renderamt":
				{
					typename = "integer"
					shortinfo = "Render FX / Transparency (0 - 255)"
					extra = ""
					notes = ""
					description = "Transparency amount, requires a Render Mode other than Normal. 0 is invisible, 255 is fully visible."
					choices = {}
				}
				"rendercolor":
				{
					typename = "color255"
					shortinfo = "Render Color (R G B)"
					extra = ""
					notes = ""
					description = "Color tint."
					choices = {}
				}
				"disablereceiveshadows":
				{
					typename = "boolean"
					shortinfo = "Disable Receiving Shadows"
					extra = ""
					notes = ""
					description = "Prevent the entity from receiving shadows on itself."
					choices = {}
				}
				"renderfx":
				{
					typename = "choices"
					shortinfo = "Render FX"
					extra = ""
					notes = ""
					description = "Preset pattern of appearance effects."
					choices = 
					{
						"0" : "None"
						"1" : "Slow Pulse"
						"2" : "Fast Pulse"
						"3" : "Slow Wide Pulse"
						"4" : "Fast Wide Pulse"
						"5" : "Slow Fade Away"
						"6" : "Fast Fade Away"
						"7" : "Slow Become Solid"
						"8" : "Fast Become Solid"
						"9" : "Slow Strobe"
						"10" : "Fast Strobe"
						"11" : "Faster Strobe"
						"12" : "Slow Flicker"
						"13" : "Fast Flicker"
						"14" : "Constant Glow"
						"15" : "Distort"
						"16" : "Hologram (Distort + fade)"
						"17" : "Scale Up"
						"18" : "Glowing Shell (OBSOLETE)"
						"19" : "Clamp Minimum Scale (OBSOLETE)"
						"20" : "Environmental Rain (OBSOLETE)"
						"21" : "Environmental Snow (OBSOLETE)"
						"22" : "Spotlight FX"
						"23" : "Ragdoll"
						"24" : "Fade Wider Pulse"

					}
				}
			}
		}
		func_elevator = 
		{
			description = "[Left 4 Dead][Left 4 Dead 2]�func_elevator is a  brush entity available in the Left 4 Dead series. It is an elevator that moves vertically.\nExample map: sdk_content/mapsrc/No Mercy/l4d_hospital04_interior.vmf."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "vector"
					shortinfo = "Top floor position"
					extra = ""
					notes = ""
					description = "The position of this brush while at the top floor."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "vector"
					shortinfo = "Bottom floor position"
					extra = ""
					notes = ""
					description = "The position of this brush while at the bottom floor."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "integer"
					shortinfo = "Speed"
					extra = ""
					notes = ""
					description = "The speed that the elevator moves, in inches per second."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "integer"
					shortinfo = "Acceleration"
					extra = ""
					notes = ""
					description = "The acceleration at which the elevator approaches its target speed, in inches per second per second."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_5":
				{
					typename = "float"
					shortinfo = "Block Damage"
					extra = ""
					notes = ""
					description = "The amount of damage to do to any entity that blocks the elevator, per frame."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_6":
				{
					typename = "sound"
					shortinfo = "Sound played when the elevator starts moving."
					extra = ""
					notes = ""
					description = ""
					choices = {}
				}
				"UNKNOWN_KEY_NAME_7":
				{
					typename = "sound"
					shortinfo = "Sound played when the elevator stops moving."
					extra = ""
					notes = ""
					description = ""
					choices = {}
				}
				"UNKNOWN_KEY_NAME_8":
				{
					typename = "sound"
					shortinfo = "Sound played when the elevator is disabled."
					extra = ""
					notes = ""
					description = ""
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
				"origin":
				{
					typename = "origin"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"rendermode":
				{
					typename = "choices"
					shortinfo = "Render Mode"
					extra = ""
					notes = ""
					description = "Set a non-standard rendering mode on this entity."
					choices = 
					{
						"0" : "Normal"
						"1" : "Color"
						"2" : "Texture"
						"3" : "Glow"
						"4" : "Solid/Alphatest"
						"5" : "Additive"
						"6" : "Removed, does nothing"
						"7" : "Additive Fractional Frame"
						"8" : "Alpha Add"
						"9" : "World Space Glow"
						"10" : "Don't Render"

					}
				}
				"renderamt":
				{
					typename = "integer"
					shortinfo = "Render FX / Transparency (0 - 255)"
					extra = ""
					notes = ""
					description = "Transparency amount, requires a Render Mode other than Normal. 0 is invisible, 255 is fully visible."
					choices = {}
				}
				"rendercolor":
				{
					typename = "color255"
					shortinfo = "Render Color (R G B)"
					extra = ""
					notes = ""
					description = "Color tint."
					choices = {}
				}
				"disablereceiveshadows":
				{
					typename = "boolean"
					shortinfo = "Disable Receiving Shadows"
					extra = ""
					notes = ""
					description = "Prevent the entity from receiving shadows on itself."
					choices = {}
				}
				"renderfx":
				{
					typename = "choices"
					shortinfo = "Render FX"
					extra = ""
					notes = ""
					description = "Preset pattern of appearance effects."
					choices = 
					{
						"0" : "None"
						"1" : "Slow Pulse"
						"2" : "Fast Pulse"
						"3" : "Slow Wide Pulse"
						"4" : "Fast Wide Pulse"
						"5" : "Slow Fade Away"
						"6" : "Fast Fade Away"
						"7" : "Slow Become Solid"
						"8" : "Fast Become Solid"
						"9" : "Slow Strobe"
						"10" : "Fast Strobe"
						"11" : "Faster Strobe"
						"12" : "Slow Flicker"
						"13" : "Fast Flicker"
						"14" : "Constant Glow"
						"15" : "Distort"
						"16" : "Hologram (Distort + fade)"
						"17" : "Scale Up"
						"18" : "Glowing Shell (OBSOLETE)"
						"19" : "Clamp Minimum Scale (OBSOLETE)"
						"20" : "Environmental Rain (OBSOLETE)"
						"21" : "Environmental Snow (OBSOLETE)"
						"22" : "Spotlight FX"
						"23" : "Ragdoll"
						"24" : "Fade Wider Pulse"

					}
				}
			}
		}
		func_extinguisher = 
		{
			description = "[Left 4 Dead][Left 4 Dead 2]�func_extinguisher is a  brush entity available in the Left 4 Dead series. This volume entity will extinguish 'infernos' set from molotovs, gas cans, etc. In other words it is a brush entity that will delete inferno entities that touch it."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Fire"
					notes = ""
				}
				"2":
				{
					category = ""
					description = "Acid"
					notes = ""
				}
				"4":
				{
					category = ""
					description = "Fireworks"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"StartDisabled":
				{
					typename = "boolean"
					shortinfo = "Start Disabled"
					extra = ""
					notes = ""
					description = "Stay dormant until activated (probably with the Enable input)."
					choices = {}
				}
			}
		}
		func_ladder = 
		{
			description = "func_ladder is a internal brush entity available in all Source games."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		func_nav_attribute_region = 
		{
			description = "[Left 4 Dead][Left 4 Dead 2]�func_nav_attribute_region is a  brush entity available in the Left 4 Dead series. It holds attributes to be applied to regions of nav areas during generation."
			flagnotes = ""
			flags = 
			{
				"2":
				{
					category = ""
					description = "Empty (no wanderers)"
					notes = ""
				}
				"32":
				{
					category = ""
					description = "Battlestation"
					notes = ""
				}
				"64":
				{
					category = ""
					description = "Finale"
					notes = ""
				}
				"128":
				{
					category = ""
					description = "Mission Start"
					notes = ""
				}
				"256":
				{
					category = ""
					description = "Battlefield"
					notes = ""
				}
				"1024":
				{
					category = ""
					description = "Not Clearable"
					notes = ""
				}
				"2048":
				{
					category = ""
					description = "Checkpoint"
					notes = ""
				}
				"4096":
				{
					category = ""
					description = "Obscured"
					notes = ""
				}
				"8192":
				{
					category = ""
					description = "No mobs"
					notes = ""
				}
				"32768":
				{
					category = ""
					description = "Rescue Vehicle"
					notes = ""
				}
				"65536":
				{
					category = ""
					description = "Rescue Closet"
					notes = ""
				}
				"524288":
				{
					category = ""
					description = "No Threat (L4D2 Attribute)"
					notes = ""
				}
				"1048576":
				{
					category = ""
					description = "Lying down (L4D2 Attribute)"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "choices"
					shortinfo = "Precise"
					extra = ""
					notes = ""
					description = "0�: Off\n1�: On"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "choices"
					shortinfo = "Crouch"
					extra = ""
					notes = ""
					description = "0�: Off\n1�: On"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "choices"
					shortinfo = "Stairs"
					extra = ""
					notes = ""
					description = "0�: Off\n1�: On"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "choices"
					shortinfo = "Tank Only"
					extra = ""
					notes = ""
					description = "0�: Off\n1�: On"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_5":
				{
					typename = "choices"
					shortinfo = "Mob Only"
					extra = ""
					notes = ""
					description = "0�: Off\n1�: On"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_6":
				{
					typename = "boolean"
					shortinfo = "Remove Attributes"
					extra = ""
					notes = ""
					description = "Should remove attributes from nav areas instead of applying them?"
					choices = {}
				}
			}
		}
		func_nav_avoidance_obstacle = 
		{
			description = "[Left 4 Dead][Left 4 Dead 2]�func_nav_avoidance_obstacle is a  brush entity available in the Left 4 Dead series. It is a brush entity that tells bots to avoid nav areas touching its AABB."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"StartDisabled":
				{
					typename = "boolean"
					shortinfo = "Start Disabled"
					extra = ""
					notes = ""
					description = "Stay dormant until activated (probably with the Enable input)."
					choices = {}
				}
			}
		}
		func_nav_blocker = 
		{
			description = "Available in [Left 4 Dead] [Left 4 Dead 2] [Counter-Strike: Global Offensive] [Team Fortress 2]. It is a brush entity that can block nav areas touching its AABB used to restrict NPCs from crossing over nav areas.\nTo do:�Any other games?\nTo do:�Use templates to display which games include this entity."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "choices"
					shortinfo = "Team(s) to block"
					extra = ""
					notes = ""
					description = "Team(s) this entity should block\n-1�: Everyone\n2�: [Left 4 Dead][Left 4 Dead 2] Survivors, [Counter-Strike: Global Offensive] Terrorists\n3�: [Left 4 Dead][Left 4 Dead 2] Infected, [Counter-Strike: Global Offensive] Counter-Terrorists"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "boolean"
					shortinfo = "Affects Flow?"
					extra = ""
					notes = ""
					description = "Does this func_nav_blocker block flow in the level? Only func_nav_blockers with this enabled will cause flow recomputation on blocking/unblocking."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"StartDisabled":
				{
					typename = "boolean"
					shortinfo = "Start Disabled"
					extra = ""
					notes = "Note: This KeyValue is not available in Smart Edit and must be added manually./nWarning: Enabled/disabled state does not block or unblock NAV areas. Use BlockNav/UnblockNav"
					description = "Stay dormant until activated (probably with the Enable input)."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "Boolean"
					shortinfo = "Recheck Breakables"
					extra = ""
					notes = "Note: This KeyValue is not available in Smart Edit and must be added manually."
					description = "Appears to respond to any changes to breakables even though a BlockNav/UnblockNav input is fire anyway from the breakable prop anyway."
					choices = {}
				}
			}
		}
		func_nav_connection_blocker = 
		{
			description = "[Left 4 Dead 2]�func_nav_connection_blocker is a  brush entity available in Left 4 Dead 2. It is a brush entity that prevents navigation mesh (on creation) connections to be made through its volume."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
			}
		}
		func_playerghostinfected_clip = 
		{
			description = "[Left 4 Dead 2]�func_playerghostinfected_clip is a  brush entity available in Left 4 Dead 2. It is a simple clip brush that blocks player ghost infected movement."
			flagnotes = ""
			flags = 
			{
				"2":
				{
					category = ""
					description = "Ignore player +USE"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "choices"
					shortinfo = "Solidity"
					extra = ""
					notes = ""
					description = "Used to control the solidity/collision of these brushes.\n0�: Toggle\n1�: Never Solid\n2�: Always Solid"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "boolean"
					shortinfo = "Shadows"
					extra = ""
					notes = ""
					description = "Set this if this brush casts lightmap shadows."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
				"rendermode":
				{
					typename = "choices"
					shortinfo = "Render Mode"
					extra = ""
					notes = ""
					description = "Set a non-standard rendering mode on this entity."
					choices = 
					{
						"0" : "Normal"
						"1" : "Color"
						"2" : "Texture"
						"3" : "Glow"
						"4" : "Solid/Alphatest"
						"5" : "Additive"
						"6" : "Removed, does nothing"
						"7" : "Additive Fractional Frame"
						"8" : "Alpha Add"
						"9" : "World Space Glow"
						"10" : "Don't Render"

					}
				}
				"renderamt":
				{
					typename = "integer"
					shortinfo = "Render FX / Transparency (0 - 255)"
					extra = ""
					notes = ""
					description = "Transparency amount, requires a Render Mode other than Normal. 0 is invisible, 255 is fully visible."
					choices = {}
				}
				"rendercolor":
				{
					typename = "color255"
					shortinfo = "Render Color (R G B)"
					extra = ""
					notes = ""
					description = "Color tint."
					choices = {}
				}
				"disablereceiveshadows":
				{
					typename = "boolean"
					shortinfo = "Disable Receiving Shadows"
					extra = ""
					notes = ""
					description = "Prevent the entity from receiving shadows on itself."
					choices = {}
				}
				"renderfx":
				{
					typename = "choices"
					shortinfo = "Render FX"
					extra = ""
					notes = ""
					description = "Preset pattern of appearance effects."
					choices = 
					{
						"0" : "None"
						"1" : "Slow Pulse"
						"2" : "Fast Pulse"
						"3" : "Slow Wide Pulse"
						"4" : "Fast Wide Pulse"
						"5" : "Slow Fade Away"
						"6" : "Fast Fade Away"
						"7" : "Slow Become Solid"
						"8" : "Fast Become Solid"
						"9" : "Slow Strobe"
						"10" : "Fast Strobe"
						"11" : "Faster Strobe"
						"12" : "Slow Flicker"
						"13" : "Fast Flicker"
						"14" : "Constant Glow"
						"15" : "Distort"
						"16" : "Hologram (Distort + fade)"
						"17" : "Scale Up"
						"18" : "Glowing Shell (OBSOLETE)"
						"19" : "Clamp Minimum Scale (OBSOLETE)"
						"20" : "Environmental Rain (OBSOLETE)"
						"21" : "Environmental Snow (OBSOLETE)"
						"22" : "Spotlight FX"
						"23" : "Ragdoll"
						"24" : "Fade Wider Pulse"

					}
				}
			}
		}
		func_playerinfected_clip = 
		{
			description = "[Left 4 Dead][Left 4 Dead 2]�func_playerinfected_clip is a  brush entity available in the Left 4 Dead series. It is a simple clip brush that blocks player infected movement. In other words, the entity is used to prevent player infected (also known as 'PZ') in versus from accessing an area."
			flagnotes = ""
			flags = 
			{
				"2":
				{
					category = ""
					description = "Ignore player +USE"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "choices"
					shortinfo = "Solidity"
					extra = ""
					notes = ""
					description = "Used to control the solidity/collision of these brushes.\n0�: Toggle\n1�: Never Solid\n2�: Always Solid"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "boolean"
					shortinfo = "Shadows"
					extra = ""
					notes = ""
					description = "Set this if this brush casts lightmap shadows."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
				"rendermode":
				{
					typename = "choices"
					shortinfo = "Render Mode"
					extra = ""
					notes = ""
					description = "Set a non-standard rendering mode on this entity."
					choices = 
					{
						"0" : "Normal"
						"1" : "Color"
						"2" : "Texture"
						"3" : "Glow"
						"4" : "Solid/Alphatest"
						"5" : "Additive"
						"6" : "Removed, does nothing"
						"7" : "Additive Fractional Frame"
						"8" : "Alpha Add"
						"9" : "World Space Glow"
						"10" : "Don't Render"

					}
				}
				"renderamt":
				{
					typename = "integer"
					shortinfo = "Render FX / Transparency (0 - 255)"
					extra = ""
					notes = ""
					description = "Transparency amount, requires a Render Mode other than Normal. 0 is invisible, 255 is fully visible."
					choices = {}
				}
				"rendercolor":
				{
					typename = "color255"
					shortinfo = "Render Color (R G B)"
					extra = ""
					notes = ""
					description = "Color tint."
					choices = {}
				}
				"disablereceiveshadows":
				{
					typename = "boolean"
					shortinfo = "Disable Receiving Shadows"
					extra = ""
					notes = ""
					description = "Prevent the entity from receiving shadows on itself."
					choices = {}
				}
				"renderfx":
				{
					typename = "choices"
					shortinfo = "Render FX"
					extra = ""
					notes = ""
					description = "Preset pattern of appearance effects."
					choices = 
					{
						"0" : "None"
						"1" : "Slow Pulse"
						"2" : "Fast Pulse"
						"3" : "Slow Wide Pulse"
						"4" : "Fast Wide Pulse"
						"5" : "Slow Fade Away"
						"6" : "Fast Fade Away"
						"7" : "Slow Become Solid"
						"8" : "Fast Become Solid"
						"9" : "Slow Strobe"
						"10" : "Fast Strobe"
						"11" : "Faster Strobe"
						"12" : "Slow Flicker"
						"13" : "Fast Flicker"
						"14" : "Constant Glow"
						"15" : "Distort"
						"16" : "Hologram (Distort + fade)"
						"17" : "Scale Up"
						"18" : "Glowing Shell (OBSOLETE)"
						"19" : "Clamp Minimum Scale (OBSOLETE)"
						"20" : "Environmental Rain (OBSOLETE)"
						"21" : "Environmental Snow (OBSOLETE)"
						"22" : "Spotlight FX"
						"23" : "Ragdoll"
						"24" : "Fade Wider Pulse"

					}
				}
			}
		}
		func_ragdoll_fader = 
		{
			description = "[Left 4 Dead][Left 4 Dead 2]�func_ragdoll_fader is a  brush entity available in the Left 4 Dead series. It is a brush entity that will fade out any ragdolls that touch it. In other words, this entity can be used to immediately fade out server and client ragdolls. This is useful when it is necessary clear part of the map for an event, like a complex moving object."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"StartDisabled":
				{
					typename = "boolean"
					shortinfo = "Start Disabled"
					extra = ""
					notes = ""
					description = "Stay dormant until activated (probably with the Enable input)."
					choices = {}
				}
			}
		}
		func_simpleladder = 
		{
			description = "[Left 4 Dead][Left 4 Dead 2]�func_simpleladder is a  brush entity available in the Left 4 Dead series. It is used to designate climbable ladder areas. func_ladder brushes are automatically converted to this entity by VBSP during map compile. It doesn't exist in the FGD and is not designed to be created by Hammer."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "float"
					shortinfo = "normal.x"
					extra = ""
					notes = ""
					description = "X normal of the ladder."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "float"
					shortinfo = "normal.y"
					extra = ""
					notes = ""
					description = "Y normal of the ladder."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "float"
					shortinfo = "normal.z"
					extra = ""
					notes = ""
					description = "Z normal of the ladder."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "integer"
					shortinfo = "team"
					extra = ""
					notes = ""
					description = "Team that can climb this ladder.\n0�: Any team\n1�: Survivors\n2�: Infected"
					choices = {}
				}
			}
		}
		func_areaportal = 
		{
			description = "func_areaportal is a  brush entity available in all Source games. It creates an areaportal, used to manage visibility in maps. When the portal is open it stops objects not visible through it from rendering; when the portal is closed it cannot be seen through at all.\nThese are not really brush entities. They are brush entities from a mapper/Hammer perspective, but by the time they reach the game, the brush is gone and this is, in effect, a point entity.\nThe entity's brush must be textured with tools/toolsareaportal (seen on the left) for it to function.\n In code, it is represented by class CAreaPortal, defined in func_areaportal.cpp."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"target":
				{
					typename = "targetname"
					shortinfo = "Name of Linked Door"
					extra = ""
					notes = ""
					description = "A prop_door_rotating or func_door whose open/closed state controls the on/off state of the portal. This is optional."
					choices = {}
				}
				"StartOpen":
				{
					typename = "boolean"
					shortinfo = "Initial State"
					extra = ""
					notes = ""
					description = "Initial state of the portal."
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"disableX360":
				{
					typename = "boolean"
					shortinfo = "Disable for Xbox 360"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "If Yes, disables this entity on the Xbox 360 version of Source."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"LagCompensate":
				{
					typename = "boolean"
					shortinfo = "Lag Compensation"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "Set to Yes to lag compensate this entity. Should be used very sparingly!"
					choices = {}
				}
				"is_autoaim_target":
				{
					typename = "boolean"
					shortinfo = "Is Automatic-Aim Target"
					extra = "(in all games since [Counter-Strike: Global Offensive])�!FGD"
					notes = ""
					description = "If set to 1, this entity will slow down aiming movement for consoles and joystick controllers when the entity is under the crosshairs."
					choices = {}
				}
			}
		}
		func_areaportalwindow = 
		{
			description = "func_areaportalwindow is a  brush entity available in all Source games. It creates an areaportal that automatically closes as the camera moves away, fading a second, opaque brush in to fill the gap.\n In code, it is represented by class CFuncAreaPortalWindow, defined in func_areaportalwindow.cpp."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"target":
				{
					typename = "targetname"
					shortinfo = "Rendered Window"
					extra = ""
					notes = ""
					description = "The brush entity that fills the gap left by the portal when closed."
					choices = {}
				}
				"FadeStartDist":
				{
					typename = "integer"
					shortinfo = "Fade Start Distance"
					extra = ""
					notes = ""
					description = "Distance that the fade into the Rendered Window brush entity begins. The further back the player views, the more visible the brush entity will be."
					choices = {}
				}
				"FadeDist":
				{
					typename = "integer"
					shortinfo = "Fade End Distance"
					extra = ""
					notes = ""
					description = "Distance at which the Rendered Window is fully visible, and the portal closes."
					choices = {}
				}
				"TranslucencyLimit":
				{
					typename = "normal"
					shortinfo = "Translucency limit"
					extra = ""
					notes = ""
					description = "Prevents the Rendered Window brush from ever going completely transparent. Useful if your rendered window uses an opaque glass material."
					choices = {}
				}
				"BackgroundBModel":
				{
					typename = "targetname"
					shortinfo = "Foreground bmodel"
					extra = ""
					notes = ""
					description = "Optional brush entity that is drawn after the fading brush model. This model should have alpha in its textures so you can see through it."
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"disableX360":
				{
					typename = "boolean"
					shortinfo = "Disable for Xbox 360"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "If Yes, disables this entity on the Xbox 360 version of Source."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"LagCompensate":
				{
					typename = "boolean"
					shortinfo = "Lag Compensation"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "Set to Yes to lag compensate this entity. Should be used very sparingly!"
					choices = {}
				}
				"is_autoaim_target":
				{
					typename = "boolean"
					shortinfo = "Is Automatic-Aim Target"
					extra = "(in all games since [Counter-Strike: Global Offensive])�!FGD"
					notes = ""
					description = "If set to 1, this entity will slow down aiming movement for consoles and joystick controllers when the entity is under the crosshairs."
					choices = {}
				}
			}
		}
		func_breakable = 
		{
			description = "func_breakable is a  brush entity available in all Source games. This entity can take damage and break apart, optionally producing gibs.\n In code, it is represented by class CBreakable, defined in func_break.cpp."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Only Break on Trigger"
					notes = ""
				}
				"2":
				{
					category = ""
					description = "Break on Touch"
					notes = ""
				}
				"4":
				{
					category = ""
					description = "Break on Pressure"
					notes = ""
				}
				"512":
				{
					category = ""
					description = "Break immediately on Physics"
					notes = ""
				}
				"1024":
				{
					category = ""
					description = "Don't take physics damage"
					notes = ""
				}
				"2048":
				{
					category = ""
					description = "Don't allow bullet penetration"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"propdata":
				{
					typename = "choices"
					shortinfo = "Prop Data"
					extra = ""
					notes = ""
					description = "Note:�Some settings can make the brush unbreakable."
					choices = 
					{
						"0" : "None"
						"1" : "Wooden.Tiny"
						"2" : "Wooden.Small"
						"3" : "Wooden.Medium"
						"4" : "Wooden.Large"
						"5" : "Wooden.Huge"
						"6" : "Metal.Small"
						"7" : "Metal.Medium"
						"8" : "Metal.Large"
						"9" : "Cardboard.Small"
						"10" : "Cardboard.Medium"
						"11" : "Cardboard.Large"
						"12" : "Stone.Small"
						"13" : "Stone.Medium"
						"14" : "Stone.Large"
						"15" : "Stone.Huge"
						"16" : "Glass.Small"
						"17" : "Plastic.Small"
						"18" : "Plastic.Medium"
						"19" : "Plastic.Large"
						"20" : "Pottery.Small"
						"21" : "Pottery.Medium"
						"22" : "Pottery.Large"
						"23" : "Pottery.Huge"
						"24" : "Glass.Window"

					}
				}
				"health":
				{
					typename = "integer"
					shortinfo = "Strength/Health"
					extra = ""
					notes = ""
					description = "The damage to take before breaking. The brush will not break from damage if this is 0."
					choices = {}
				}
				"material":
				{
					typename = "choices"
					shortinfo = "Material Type"
					extra = ""
					notes = ""
					description = "Set to the material type of the brush. Decides what sounds to make when damaged, and what gibs to produce when broken."
					choices = {}
				}
			}
		}
		func_breakable_surf = 
		{
			description = "func_breakable_surf is a  brush entity available in all Source games. It defines a breakable surface, for partially breakable glass/tile/etc. All faces that are not ever visible to the player should use nodraw. Faces that will be broken must have exactly four sides. The material applied to the visible face must be set up to be breakable. This entity is functionally similar to real-life tempered glass.\nThe following standard textures are meant to work with this entity (using any other may crash the game on startup!):\nInfo for creating a material compatible with func_breakable_surf can be found here"
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Physics damage decals. (Breakable brush) Only Break on Trigger"
					notes = ""
				}
				"2":
				{
					category = ""
					description = "Take damage from held objects. (Breakable brush) Break on Touch"
					notes = "Note: The 1 and 2 flags listed below (from CBreakable) do not apply to this entity! CBreakableSurface overrides them."
				}
				"4":
				{
					category = "Breakable brush"
					description = "Break on Pressure"
					notes = ""
				}
				"512":
				{
					category = "Breakable brush"
					description = "Break immediately on Physics"
					notes = ""
				}
				"1024":
				{
					category = "Breakable brush"
					description = "Don't take physics damage"
					notes = ""
				}
				"2048":
				{
					category = "Breakable brush"
					description = "Don't allow bullet penetration"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"fragility":
				{
					typename = "integer"
					shortinfo = "Fragility"
					extra = ""
					notes = ""
					description = "If the 'Surface Type' is set to Glass, this value sets how fragile the glass pieces are after the surface has been broken."
					choices = {}
				}
				"surfacetype":
				{
					typename = "choices"
					shortinfo = "Surface Type"
					extra = ""
					notes = ""
					description = "Surface material type\n0: Glass\n1: Tile"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "choices"
					shortinfo = "error"
					extra = "!FGD"
					notes = ""
					description = "Set automatically by Hammer to indicate an invalid glass/tile surface, when non-zero the entity will be removed when spawned, and a error message will be thrown in the console. This keyvalue is not included in Valve's FGDs, but is still fully functional.\n0: No Error\n1: Multiple Textured Faces\n�Note:�You must use tools/toolsnodraw to no draw the 5 remaining sides, or otherwise this error will be thrown!\n2: Non-Square Face"
					choices = {}
				}
				"propdata":
				{
					typename = "choices"
					shortinfo = "Prop Data"
					extra = ""
					notes = ""
					description = "Note:�Some settings can make the brush unbreakable."
					choices = 
					{
						"0" : "None"
						"1" : "Wooden.Tiny"
						"2" : "Wooden.Small"
						"3" : "Wooden.Medium"
						"4" : "Wooden.Large"
						"5" : "Wooden.Huge"
						"6" : "Metal.Small"
						"7" : "Metal.Medium"
						"8" : "Metal.Large"
						"9" : "Cardboard.Small"
						"10" : "Cardboard.Medium"
						"11" : "Cardboard.Large"
						"12" : "Stone.Small"
						"13" : "Stone.Medium"
						"14" : "Stone.Large"
						"15" : "Stone.Huge"
						"16" : "Glass.Small"
						"17" : "Plastic.Small"
						"18" : "Plastic.Medium"
						"19" : "Plastic.Large"
						"20" : "Pottery.Small"
						"21" : "Pottery.Medium"
						"22" : "Pottery.Large"
						"23" : "Pottery.Huge"
						"24" : "Glass.Window"

					}
				}
				"health":
				{
					typename = "integer"
					shortinfo = "Strength/Health"
					extra = ""
					notes = ""
					description = "The damage to take before breaking. The brush will not break from damage if this is 0."
					choices = {}
				}
				"material":
				{
					typename = "choices"
					shortinfo = "Material Type"
					extra = ""
					notes = ""
					description = "Set to the material type of the brush. Decides what sounds to make when damaged, and what gibs to produce when broken."
					choices = {}
				}
			}
		}
		func_brush = 
		{
			description = "func_brush is a  brush entity available in all Source games. It's a generic brush entity with various features.\nIt combines the functions of func_wall, func_illusionary and func_wall_toggle from Goldsource. The older entities can still be used, for a very very small amount of memory saved.\n\n In code, it is represented by class CFuncBrush, defined in modelentities.cpp."
			flagnotes = ""
			flags = 
			{
				"2":
				{
					category = ""
					description = "Ignore player +USE - Entity will ignore all Use inputs, including ones from the player."
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"Solidity":
				{
					typename = "choices"
					shortinfo = "Solidity"
					extra = ""
					notes = ""
					description = "Used to control the solidity/collision of these brushes.\n0: Toggle - The solidity can be toggled together with its visibility.\n1: Never Solid\n2: Always Solid"
					choices = {}
				}
				"solidbsp":
				{
					typename = "boolean"
					shortinfo = "Solid BSP"
					extra = ""
					notes = ""
					description = "Set this to BSP if the player seems to rotate oddly relative to the surface.\n0: VPhysics\n1: BSP (QPhysics)"
					choices = {}
				}
				"excludednpc":
				{
					typename = "classname"
					shortinfo = "NPC class excluded from collisions"
					extra = ""
					notes = ""
					description = "If an NPC classname (i.e. npc_zombie) is specified here, NPCs of that type won't collide with these brushes."
					choices = {}
				}
				"invert_exclusion":
				{
					typename = "boolean"
					shortinfo = "Invert NPC class exclusion"
					extra = ""
					notes = ""
					description = "If set, then the excluded NPC class will consider this brush solid, and all other NPC classes will consider it non-solid."
					choices = {}
				}
				"StartDisabled":
				{
					typename = "boolean"
					shortinfo = "Start Disabled"
					extra = ""
					notes = ""
					description = "Stay dormant until activated (probably with the Enable input).\n�Tip:�If Solidity is Toggle, disabling will also make the entity non-solid."
					choices = {}
				}
				"_minlight":
				{
					typename = "float"
					shortinfo = "Minimum Light"
					extra = ""
					notes = ""
					description = "Minimum amount of light to hit this brush. 0 is none, 1 is normal, and 2 is doubled."
					choices = {}
				}
				"damagefilter":
				{
					typename = "targetname"
					shortinfo = "Damage Filter Name"
					extra = ""
					notes = ""
					description = "When this entity receives damage, it will filter by this entity."
					choices = {}
				}
				"rendermode":
				{
					typename = "choices"
					shortinfo = "Render Mode"
					extra = ""
					notes = ""
					description = "Set a non-standard rendering mode on this entity."
					choices = 
					{
						"0" : "Normal"
						"1" : "Color"
						"2" : "Texture"
						"3" : "Glow"
						"4" : "Solid/Alphatest"
						"5" : "Additive"
						"6" : "Removed, does nothing"
						"7" : "Additive Fractional Frame"
						"8" : "Alpha Add"
						"9" : "World Space Glow"
						"10" : "Don't Render"

					}
				}
				"renderfx":
				{
					typename = "choices"
					shortinfo = "Render FX"
					extra = ""
					notes = ""
					description = "Preset pattern of appearance effects."
					choices = 
					{
						"0" : "None"
						"1" : "Slow Pulse"
						"2" : "Fast Pulse"
						"3" : "Slow Wide Pulse"
						"4" : "Fast Wide Pulse"
						"5" : "Slow Fade Away"
						"6" : "Fast Fade Away"
						"7" : "Slow Become Solid"
						"8" : "Fast Become Solid"
						"9" : "Slow Strobe"
						"10" : "Fast Strobe"
						"11" : "Faster Strobe"
						"12" : "Slow Flicker"
						"13" : "Fast Flicker"
						"14" : "Constant Glow"
						"15" : "Distort"
						"16" : "Hologram (Distort + fade)"
						"17" : "Scale Up"
						"22" : "Spotlight FX"
						"23" : "Cull By Distance"
						"24" : "Fade Wider Pulse"
						"26" : "Fade Near"

					}
				}
			}
		}
		func_button = 
		{
			description = "func_button is a  brush entity available in all Source games. It is designed to be used for a player-usable button. When used by the player, it moves to a pressed position. For an example of a func_button used to make a keypad, see the button_keypad prefab.\n In code, it is represented by class CBaseButton, defined in buttons.cpp."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Don't move"
					notes = ""
				}
				"32":
				{
					category = ""
					description = "Toggle"
					notes = ""
				}
				"256":
				{
					category = ""
					description = "Touch Activates"
					notes = ""
				}
				"512":
				{
					category = ""
					description = "Damage Activates"
					notes = ""
				}
				"1024":
				{
					category = ""
					description = "Use Activates"
					notes = ""
				}
				"2048":
				{
					category = ""
					description = "Starts locked"
					notes = ""
				}
				"4096":
				{
					category = ""
					description = "Sparks"
					notes = ""
				}
				"16384":
				{
					category = ""
					description = "Non-solid (in all games since [Counter-Strike\t Global Offensive]) (also in [Garry's Mod])"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"movedir":
				{
					typename = "angle"
					shortinfo = "Move Direction (Pitch Yaw Roll)"
					extra = ""
					notes = ""
					description = "Specifies the direction of motion to move when the button is used."
					choices = {}
				}
				"speed":
				{
					typename = "integer"
					shortinfo = "Speed"
					extra = ""
					notes = ""
					description = "The speed that the button moves, in units per second."
					choices = {}
				}
				"health":
				{
					typename = "integer"
					shortinfo = "Health (Obsolete)"
					extra = ""
					notes = ""
					description = "Legacy method of specifying whether or not the button can be shot to activate it. Use the Damage Activates spawnflag instead."
					choices = {}
				}
				"lip":
				{
					typename = "integer"
					shortinfo = "Lip"
					extra = ""
					notes = ""
					description = "The amount, in inches, of the button to leave sticking out of the wall it recedes into when pressed. Negative values make the button recede even further into the wall."
					choices = {}
				}
				"master":
				{
					typename = "string"
					shortinfo = "Master (Obsolete)"
					extra = ""
					notes = ""
					description = "Legacy support: The name of a master entity. If the master hasn't been activated, this button cannot be pressed."
					choices = {}
				}
				"sounds":
				{
					typename = "choices"
					shortinfo = "Sounds"
					extra = ""
					notes = ""
					description = "Value\nDescription\nDefault Sound\n\n\nButtons\n\n\n0\nNone (Silent)\ncommon/null.wav\n\n\n1\nBig zap & Warmup\nbuttons/button1.wav\n\n\n2\nAccess Denied\nbuttons/button2.wav\n\n\n3\nAccess Granted\nbuttons/button3.wav\n\n\n4\nQuick Combolock\nbuttons/button4.wav\n\n\n5\nPower Deadbolt 1\nbuttons/button5.wav\n\n\n6\nPower Deadbolt 2\nbuttons/button6.wav\n\n\n7\nPlunger\nbuttons/button7.wav\n\n\n8\nSmall zap\nbuttons/button8.wav\n\n\n9\nKeycard Sound\nbuttons/button9.wav\n\n\n10\nBuzz\nbuttons/button10.wav\n\n\n11\nBuzz Off\nbuttons/button11.wav\n\n\n12\nlatch locked\ndoors/latchlocked2.wav\n\n\n13\nLatch Unlocked\ndoors/latchunlocked1.wav\n\n\n14\nLightswitch\nbuttons/lightswitch2.wav\n\n\n15\nsmall bleek\nbuttons/button15.wav\n\n\n16\nsmall deny\nbuttons/button16.wav\n\n\n17\nsmall doop\nbuttons/button17.wav\n\n\n18\nsmall tech deny\nbuttons/button18.wav\n\n\n19\nclick and combine screen fuzz\nbuttons/button19.wav\n\n\n20\nroomy beep\nbuttons/button20.wav\n\n\nLevers\n\n\n21\nlever or wheel: turn + move sqeek\nbuttons/lever1.wav\n\n\n22\nlever or wheel: latch + release gas\nbuttons/lever2.wav\n\n\n23\nlever or wheel: ratchet + sqeek\nbuttons/lever3.wav\n\n\n24\nlever or wheel: large ratchet\nbuttons/lever4.wav\n\n\n25\nlever or wheel: clanky + gas release\nbuttons/lever5.wav\n\n\n26\nlever or wheel: latch + large metal thud\nbuttons/Lever6.wav\n\n\n27\nlever or wheel: smaller ratchet\nbuttons/Lever7.wav\n\n\n28\nlever or wheel: smaller lever move\nbuttons/Lever8.wav\n\n\nNew buttons\n\n\n31\nshock buzz\nbuttons/button21.wav\n\n\n32\nclickbeep\nbuttons/button22.wav\n\n\n33\ntech blip\nbuttons/button23.wav\n\n\n34\nclickbeepbeep open\nbuttons/button24.wav\n\n\n35\nsmall high blip\nbuttons/button12.wav\n\n\n36\nsmall tech fuzz blip\nbuttons/button13.wav\n\n\n37\nsmall click bleep (change to lightswitch)\nbuttons/button14.wav\n\n\nCombine Buttons\n\n\n40\ncombine door lock - locked\nbuttons/combine_button_locked.wav\n\n\n41\ncombine blip growl\nbuttons/combine_button1.wav\n\n\n42\ncombine squick growl\nbuttons/combine_button2.wav\n\n\n43\ncombine whine purr\nbuttons/combine_button3.wav\n\n\n44\ncombine click talk\nbuttons/combine_button4.wav\n\n\n45\ncombine click growl fizz\nbuttons/combine_button5.wav\n\n\n46\ncombine click fizz (deny)\nbuttons/combine_button6.wav\n\n\n47\ncombine click talker\nbuttons/combine_button7.wav"
					choices = {}
				}
				"wait":
				{
					typename = "integer"
					shortinfo = "Delay Before Reset (-1 stay)"
					extra = ""
					notes = ""
					description = "Amount of time, in seconds, after the button has been pressed before it returns to the starting position. Once it has returned, it can be used again. If the value is set to -1, the button never returns."
					choices = {}
				}
				"locked_sound":
				{
					typename = "choices"
					shortinfo = "Locked Sound"
					extra = ""
					notes = ""
					description = "Value\nDescription\nDefault Sound\n\n\n0\nNone\ncommon/null.wav\n\n\n2\nAccess Denied\nbuttons/button2.wav\n\n\n8\nSmall zap\nbuttons/button8.wav\n\n\n10\nBuzz\nbuttons/button10.wav\n\n\n11\nBuzz Off\nbuttons/button11.wav\n\n\n12\nLatch Locked\ndoors/latchlocked2.wav"
					choices = {}
				}
				"unlocked_sound":
				{
					typename = "choices"
					shortinfo = "Unlocked Sound"
					extra = ""
					notes = ""
					description = "Value\nDescription\nDefault Sound\n\n\n0\nNone\ncommon/null.wav\n\n\n1\nBig zap & Warmup\nbuttons/button1.wav\n\n\n3\nAccess Granted\nbuttons/button3.wav\n\n\n4\nQuick Combolock\nbuttons/button4.wav\n\n\n5\nPower Deadbolt 1\nbuttons/button5.wav\n\n\n6\nPower Deadbolt 2\nbuttons/button6.wav\n\n\n7\nPlunger\nbuttons/button7.wav\n\n\n8\nSmall zap\nbuttons/button8.wav\n\n\n9\nKeycard Sound\nbuttons/button9.wav\n\n\n10\nBuzz\nbuttons/button10.wav\n\n\n13\nLatch Unlocked\ndoors/latchunlocked1.wav\n\n\n14\nLightswitch\nbuttons/lightswitch2.wav"
					choices = {}
				}
				"locked_sentence":
				{
					typename = "choices"
					shortinfo = "Locked Sentence"
					extra = ""
					notes = ""
					description = "Value\nDescription\n\n\n0\nNone\n\n\n1\nGen. Access Denied\n\n\n2\nSecurity Lockout\n\n\n3\nBlast Door\n\n\n4\nFire Door\n\n\n5\nChemical Door\n\n\n6\nRadiation Door\n\n\n7\nGen. Containment\n\n\n8\nMaintenance Door\n\n\n9\nBroken Shut Door"
					choices = {}
				}
				"unlocked_sentence":
				{
					typename = "choices"
					shortinfo = "Unlocked Sentence"
					extra = ""
					notes = ""
					description = "Value\nDescription\n\n\n0\nNone\n\n\n1\nGen. Access Granted\n\n\n2\nSecurity Disengaged\n\n\n3\nBlast Door\n\n\n4\nFire Door\n\n\n5\nChemical Door\n\n\n6\nRadiation Door\n\n\n7\nGen. Containment\n\n\n8\nMaintenance area"
					choices = {}
				}
				"glow":
				{
					typename = "targetname"
					shortinfo = "Glow Entity"
					extra = "(in all games since [Left 4 Dead])"
					notes = "Note: The Engine cannot properly find the Glow entity if its off-grid. It will pick several entities close to where the supposed off-grid glow entity is."
					description = "The name of an entity that will get a +use glow for this button."
					choices = {}
				}
				"min_use_angle":
				{
					typename = "string"
					shortinfo = "Use Look-At Limit"
					extra = "(in all games since [Counter-Strike: Global Offensive])"
					notes = ""
					description = "Limit the usable look-at angle. -1 is looking directly away, 0 is looking perpendicular, 1 is looking directly at."
					choices = {}
				}
				"_minlight":
				{
					typename = "float"
					shortinfo = "Minimum Light"
					extra = ""
					notes = ""
					description = "Minimum amount of light to hit this brush. 0 is none, 1 is normal, and 2 is doubled."
					choices = {}
				}
				"damagefilter":
				{
					typename = "targetname"
					shortinfo = "Damage Filter Name"
					extra = ""
					notes = ""
					description = "When this entity receives damage, it will filter by this entity."
					choices = {}
				}
				"rendermode":
				{
					typename = "choices"
					shortinfo = "Render Mode"
					extra = ""
					notes = ""
					description = "Set a non-standard rendering mode on this entity."
					choices = 
					{
						"0" : "Normal"
						"1" : "Color"
						"2" : "Texture"
						"3" : "Glow"
						"4" : "Solid/Alphatest"
						"5" : "Additive"
						"6" : "Removed, does nothing"
						"7" : "Additive Fractional Frame"
						"8" : "Alpha Add"
						"9" : "World Space Glow"
						"10" : "Don't Render"

					}
				}
				"renderfx":
				{
					typename = "choices"
					shortinfo = "Render FX"
					extra = ""
					notes = ""
					description = "Preset pattern of appearance effects."
					choices = 
					{
						"0" : "None"
						"1" : "Slow Pulse"
						"2" : "Fast Pulse"
						"3" : "Slow Wide Pulse"
						"4" : "Fast Wide Pulse"
						"5" : "Slow Fade Away"
						"6" : "Fast Fade Away"
						"7" : "Slow Become Solid"
						"8" : "Fast Become Solid"
						"9" : "Slow Strobe"
						"10" : "Fast Strobe"
						"11" : "Faster Strobe"
						"12" : "Slow Flicker"
						"13" : "Fast Flicker"
						"14" : "Constant Glow"
						"15" : "Distort"
						"16" : "Hologram (Distort + fade)"
						"17" : "Scale Up"
						"22" : "Spotlight FX"
						"23" : "Cull By Distance"
						"24" : "Fade Wider Pulse"
						"26" : "Fade Near"

					}
				}
			}
		}
		func_clip_vphysics = 
		{
			description = "func_clip_vphysics is a  brush entity available in all Source games. It is considered solid to VPhysics objects (such as a prop_physics). QPhysics objects (such as players) can pass freely. It can also use a filter to only collide with specific objects.\n In code, it is represented by class CFuncVPhysicsClip, defined in bmodels.cpp."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"filtername":
				{
					typename = "filter"
					shortinfo = "Filter Name"
					extra = ""
					notes = ""
					description = "Filter to use to see if activator collides with this entity."
					choices = {}
				}
				"StartDisabled":
				{
					typename = "boolean"
					shortinfo = "Start Disabled"
					extra = ""
					notes = ""
					description = "Stay dormant until activated (probably with the Enable input)."
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"disableX360":
				{
					typename = "boolean"
					shortinfo = "Disable for Xbox 360"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "If Yes, disables this entity on the Xbox 360 version of Source."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"LagCompensate":
				{
					typename = "boolean"
					shortinfo = "Lag Compensation"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "Set to Yes to lag compensate this entity. Should be used very sparingly!"
					choices = {}
				}
				"is_autoaim_target":
				{
					typename = "boolean"
					shortinfo = "Is Automatic-Aim Target"
					extra = "(in all games since [Counter-Strike: Global Offensive])�!FGD"
					notes = ""
					description = "If set to 1, this entity will slow down aiming movement for consoles and joystick controllers when the entity is under the crosshairs."
					choices = {}
				}
			}
		}
		func_conveyor = 
		{
			description = "func_conveyor is a  brush entity available in all Source games. It functions as a conveyor belt, with a moving surface. The surface material should have a ConveyorScroll Material Proxy, to synchronize the material movement and push effect.\n In code, it is represented by class CFuncConveyor, defined in bmodels.cpp."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "No Push"
					notes = ""
				}
				"2":
				{
					category = ""
					description = "Not Solid"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"movedir":
				{
					typename = "angle"
					shortinfo = "Move Direction (Pitch Yaw Roll)"
					extra = ""
					notes = ""
					description = "The direction conveyor moves."
					choices = {}
				}
				"speed":
				{
					typename = "string"
					shortinfo = "Conveyor Speed"
					extra = ""
					notes = ""
					description = "Linear speed of moving surface."
					choices = {}
				}
				"_minlight":
				{
					typename = "float"
					shortinfo = "Minimum Light"
					extra = ""
					notes = ""
					description = "Minimum amount of light to hit this brush. 0 is none, 1 is normal, and 2 is doubled."
					choices = {}
				}
				"damagefilter":
				{
					typename = "targetname"
					shortinfo = "Damage Filter Name"
					extra = ""
					notes = ""
					description = "When this entity receives damage, it will filter by this entity."
					choices = {}
				}
				"rendermode":
				{
					typename = "choices"
					shortinfo = "Render Mode"
					extra = ""
					notes = ""
					description = "Set a non-standard rendering mode on this entity."
					choices = 
					{
						"0" : "Normal"
						"1" : "Color"
						"2" : "Texture"
						"3" : "Glow"
						"4" : "Solid/Alphatest"
						"5" : "Additive"
						"6" : "Removed, does nothing"
						"7" : "Additive Fractional Frame"
						"8" : "Alpha Add"
						"9" : "World Space Glow"
						"10" : "Don't Render"

					}
				}
				"renderfx":
				{
					typename = "choices"
					shortinfo = "Render FX"
					extra = ""
					notes = ""
					description = "Preset pattern of appearance effects."
					choices = 
					{
						"0" : "None"
						"1" : "Slow Pulse"
						"2" : "Fast Pulse"
						"3" : "Slow Wide Pulse"
						"4" : "Fast Wide Pulse"
						"5" : "Slow Fade Away"
						"6" : "Fast Fade Away"
						"7" : "Slow Become Solid"
						"8" : "Fast Become Solid"
						"9" : "Slow Strobe"
						"10" : "Fast Strobe"
						"11" : "Faster Strobe"
						"12" : "Slow Flicker"
						"13" : "Fast Flicker"
						"14" : "Constant Glow"
						"15" : "Distort"
						"16" : "Hologram (Distort + fade)"
						"17" : "Scale Up"
						"22" : "Spotlight FX"
						"23" : "Cull By Distance"
						"24" : "Fade Wider Pulse"
						"26" : "Fade Near"

					}
				}
			}
		}
		func_detail = 
		{
			description = "func_detail is a internal brush entity available in all Source games. It creates a brush that does not affect visibility or cause other brushes to be chopped. All brushwork that does not form the 'backbone' of the world (and that is not tied to a real entity) should be detail.\nValve provides an example map at sourcesdk_content/hl2/mapsrc/sdk_func_detail.vmf. You can also load up the HL2 map sources and hide detail brushes with their auto visgroup to see where Valve used them."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"mindxlevel":
				{
					typename = "choices"
					shortinfo = "Minimum DX Level"
					extra = ""
					notes = ""
					description = "The entity will not exist if the engine is running outside the given range of DirectX Versions. Replaced by SystemLevelChoice from [Left 4 Dead] Left 4 Dead onwards.\n�Warning:�If these are used, the object may break when the user switches their DirectX settings."
					choices = {}
				}
				"maxdxlevel":
				{
					typename = "choices"
					shortinfo = "Maximum DX Level"
					extra = ""
					notes = ""
					description = "Default (no bounding)\nDX7\nDX8\nDX8.1\nDX9 SM2\nDX9 SM3"
					choices = {}
				}
			}
		}
		func_detail_blocker = 
		{
			description = "func_detail_blocker is a  brush entity available in all Source games since [Left 4 Dead] Left 4 Dead. It disallows detail props from being placed inside its volume.\n In code, it is represented by class CDetailBlocker, defined in effects.cpp."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"mins":
				{
					typename = "vector"
					shortinfo = "Minimum Bounding Box Size"
					extra = "!FGD"
					notes = ""
					description = "Co-ordinate of the minimum bounding box corner. The bounding box is drawn from this corner to the other one. Requires Bounding Box collisions (solid 2) to be used. Can be used to overwrite the collision shape of a brush, although it can only be a cuboid."
					choices = {}
				}
				"maxs":
				{
					typename = "vector"
					shortinfo = "Maximum Bounding Box Size"
					extra = "!FGD"
					notes = ""
					description = "Co-ordinate of the maximum bounding box corner. The bounding box is drawn from this corner to the other one. Requires Bounding Box collisions (solid 2) to be used. Can be used to overwrite the collision shape of a brush, although it can only be a cuboid."
					choices = {}
				}
				"solid":
				{
					typename = "choices"
					shortinfo = "Collisions"
					extra = "!FGD"
					notes = ""
					description = "Method of collision for this entity.\n0: None\n1: BSP (QPhysics)\n2: Bounding Box\n3: Oriented Bounding Box\n4: Oriented Bounding Box, constrained to Yaw only\n5: Custom/Test\n6: VPhysics"
					choices = {}
				}
				"modelindex":
				{
					typename = "short"
					shortinfo = "Model Index"
					extra = "!FGD"
					notes = ""
					description = "Changes the entity's model to a precached model on the map."
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"disableX360":
				{
					typename = "boolean"
					shortinfo = "Disable for Xbox 360"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "If Yes, disables this entity on the Xbox 360 version of Source."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"LagCompensate":
				{
					typename = "boolean"
					shortinfo = "Lag Compensation"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "Set to Yes to lag compensate this entity. Should be used very sparingly!"
					choices = {}
				}
				"is_autoaim_target":
				{
					typename = "boolean"
					shortinfo = "Is Automatic-Aim Target"
					extra = "(in all games since [Counter-Strike: Global Offensive])�!FGD"
					notes = ""
					description = "If set to 1, this entity will slow down aiming movement for consoles and joystick controllers when the entity is under the crosshairs."
					choices = {}
				}
			}
		}
		func_door = 
		{
			description = "func_door is a  brush entity available in all Source games. It creates a simple sliding door.\n In code, it is represented by class CBaseDoor, defined in doors.cpp."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Starts Open - Obsolete. Door behaves more like the doors in Half-Life. Some outputs don't work."
					notes = ""
				}
				"4":
				{
					category = ""
					description = "Non-solid to Player - Sets the collision group to COLLISION_GROUP_PASSABLE_DOOR, so the player cannot collide with it while other things can. This is not compatible with Ignore Debris as that also sets a collision group."
					notes = ""
				}
				"8":
				{
					category = ""
					description = "Passable - This door is solid to nothing at all."
					notes = ""
				}
				"32":
				{
					category = ""
					description = "Toggle - Inputs are interpreted as to change between open and shut. That is, inputs are interpreted as to open if the door is closed and to close if open, instead of the default behavior where inputs are always interpreted as to open. This overrides the delay before reset (wait) to -1 i.e. never reset."
					notes = ""
				}
				"256":
				{
					category = ""
					description = "Use Opens"
					notes = ""
				}
				"512":
				{
					category = ""
					description = "NPCs Can't - NPCs can't open this door."
					notes = ""
				}
				"1024":
				{
					category = ""
					description = "Touch Opens - When a player or NPC touches the door, it will count as an attempt to open it."
					notes = ""
				}
				"2048":
				{
					category = ""
					description = "Starts locked - This door spawns locked and cannot be opened by the player or NPCs (but buttons can still trigger it)"
					notes = ""
				}
				"4096":
				{
					category = ""
					description = "Door Silent - This door makes no noise."
					notes = ""
				}
				"65536":
				{
					category = ""
					description = "New Use rules !FGD - Door can only be used if it's not moving, is closing, or when it's open."
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"movedir":
				{
					typename = "angles"
					shortinfo = "Move Direction"
					extra = ""
					notes = ""
					description = "The direction in which the door will move when it opens. It will open far enough that it does not occupy the space it spawned in."
					choices = {}
				}
				"chainstodoor":
				{
					typename = "string"
					shortinfo = "Linked Door"
					extra = "!FGD"
					notes = ""
					description = "Passes the door's +use inputs and touch events onto a different door, so it also is activated."
					choices = {}
				}
				"filtername":
				{
					typename = "targetname"
					shortinfo = "Block Filter Name"
					extra = ""
					notes = ""
					description = "(For Half-Life: Source) Filter to use to determine entities that can block the door."
					choices = {}
				}
				"speed":
				{
					typename = "float"
					shortinfo = "Speed"
					extra = ""
					notes = ""
					description = "Speed that the door moves, in units (sliding door) or degrees (rotating door) per second."
					choices = {}
				}
				"noise1":
				{
					typename = "sound"
					shortinfo = "Start Sound"
					extra = ""
					notes = ""
					description = "Sound to play when the door starts moving (regardless of opening or closing)."
					choices = {}
				}
				"noise2":
				{
					typename = "sound"
					shortinfo = "Stop Sound"
					extra = ""
					notes = ""
					description = "Sound to play when the door stops moving (regardless of opening or closing)."
					choices = {}
				}
				"startclosesound":
				{
					typename = "sound"
					shortinfo = "Start Close Sound"
					extra = ""
					notes = ""
					description = "Sound to play when the door starts closing."
					choices = {}
				}
				"closesound":
				{
					typename = "sound"
					shortinfo = "Stop Close Sound"
					extra = ""
					notes = ""
					description = "Sound to play when the door stops closing."
					choices = {}
				}
				"wait":
				{
					typename = "float"
					shortinfo = "Delay Before Reset"
					extra = ""
					notes = ""
					description = "Time until the door returns to the closed position. A value of -1 means the door never auto-closes."
					choices = {}
				}
				"lip":
				{
					typename = "float"
					shortinfo = "Lip"
					extra = ""
					notes = ""
					description = "When the door opens, it will move its full length minus this many units. Negative values will make the door move that many more than its length."
					choices = {}
				}
				"dmg":
				{
					typename = "float"
					shortinfo = "Blocking Damage"
					extra = ""
					notes = "Bug: Normally a door will damage things blocking it, however if the player is teleported by a trigger_teleport while using noclip, they will not be damaged."
					description = "Amount of damage done to entities that block the movement of this door, per frame."
					choices = {}
				}
				"forceclosed":
				{
					typename = "boolean"
					shortinfo = "Force Closed"
					extra = ""
					notes = ""
					description = "Makes the door close no matter what. Useful for doors that have to close even if the player tries to block them with objects."
					choices = {}
				}
				"ignoredebris":
				{
					typename = "boolean"
					shortinfo = "Ignore Debris"
					extra = ""
					notes = ""
					description = "Changes the door's collision group to COLLISION_GROUP_INTERACTIVE, which ignores debris objects. Not compatible with the Non-solid to Player spawnflag as it also sets a collision group."
					choices = {}
				}
				"health":
				{
					typename = "integer"
					shortinfo = "Health"
					extra = "[Obsolete]"
					notes = ""
					description = "Deprecated.�Do not use."
					choices = {}
				}
				"message":
				{
					typename = "string"
					shortinfo = "Message If Triggered"
					extra = "[Obsolete]"
					notes = ""
					description = "Deprecated.�Do not use."
					choices = {}
				}
				"locked_sound":
				{
					typename = "string"
					shortinfo = "Locked Sound"
					extra = ""
					notes = ""
					description = "Sound played when the player tries to open the door, and fails because it's locked."
					choices = {}
				}
				"unlocked_sound":
				{
					typename = "string"
					shortinfo = "Unlocked Sound"
					extra = ""
					notes = ""
					description = "Sound played when door is unlocked."
					choices = {}
				}
				"spawnpos":
				{
					typename = "choices"
					shortinfo = "Spawn Position"
					extra = ""
					notes = ""
					description = "State the door should begin in.\n0: Closed\n1: Open"
					choices = {}
				}
				"locked_sentence":
				{
					typename = "choices"
					shortinfo = "Locked Sentence"
					extra = "(only in [Half-Life: Source])"
					notes = ""
					description = "Intercom voiceline for when the player tries to use the door, but it's locked."
					choices = {}
				}
				"unlocked_sentence":
				{
					typename = "choices"
					shortinfo = "Unlocked Sentence"
					extra = "(only in [Half-Life: Source])"
					notes = ""
					description = "Intercom voiceline for when the door is unlocked."
					choices = {}
				}
				"loopmovesound":
				{
					typename = "boolean"
					shortinfo = "Loop Moving Sound?"
					extra = ""
					notes = "Bug: If an already-looping sound is played with this enabled, it can continue forever. Further attempts to open or close the door will only add another looping sample to the noise."
					description = "Makes the door's Start Sound loop until the door finishes moving."
					choices = {}
				}
				"_minlight":
				{
					typename = "float"
					shortinfo = "Minimum Light"
					extra = ""
					notes = ""
					description = "Minimum amount of light to hit this brush. 0 is none, 1 is normal, and 2 is doubled."
					choices = {}
				}
				"damagefilter":
				{
					typename = "targetname"
					shortinfo = "Damage Filter Name"
					extra = ""
					notes = ""
					description = "When this entity receives damage, it will filter by this entity."
					choices = {}
				}
				"rendermode":
				{
					typename = "choices"
					shortinfo = "Render Mode"
					extra = ""
					notes = ""
					description = "Set a non-standard rendering mode on this entity."
					choices = 
					{
						"0" : "Normal"
						"1" : "Color"
						"2" : "Texture"
						"3" : "Glow"
						"4" : "Solid/Alphatest"
						"5" : "Additive"
						"6" : "Removed, does nothing"
						"7" : "Additive Fractional Frame"
						"8" : "Alpha Add"
						"9" : "World Space Glow"
						"10" : "Don't Render"

					}
				}
				"renderfx":
				{
					typename = "choices"
					shortinfo = "Render FX"
					extra = ""
					notes = ""
					description = "Preset pattern of appearance effects."
					choices = 
					{
						"0" : "None"
						"1" : "Slow Pulse"
						"2" : "Fast Pulse"
						"3" : "Slow Wide Pulse"
						"4" : "Fast Wide Pulse"
						"5" : "Slow Fade Away"
						"6" : "Fast Fade Away"
						"7" : "Slow Become Solid"
						"8" : "Fast Become Solid"
						"9" : "Slow Strobe"
						"10" : "Fast Strobe"
						"11" : "Faster Strobe"
						"12" : "Slow Flicker"
						"13" : "Fast Flicker"
						"14" : "Constant Glow"
						"15" : "Distort"
						"16" : "Hologram (Distort + fade)"
						"17" : "Scale Up"
						"22" : "Spotlight FX"
						"23" : "Cull By Distance"
						"24" : "Fade Wider Pulse"
						"26" : "Fade Near"

					}
				}
			}
		}
		func_door_rotating = 
		{
			description = "func_door_rotating is a  brush entity available in all Source games. It is a rotating brush that can be 'opened' by players or NPCs.\n In code, it is represented by class CRotDoor, defined in doors.cpp."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = "BaseDoor"
					description = "Starts Open - Obsolete. Door behaves more like the doors in Half-Life. Some outputs don't work."
					notes = ""
				}
				"2":
				{
					category = ""
					description = "Reverse Dir - This door opens in the opposite direction."
					notes = ""
				}
				"4":
				{
					category = "BaseDoor"
					description = "Non-solid to Player - Sets the collision group to COLLISION_GROUP_PASSABLE_DOOR, so the player cannot collide with it while other things can. This is not compatible with Ignore Debris as that also sets a collision group."
					notes = ""
				}
				"8":
				{
					category = "BaseDoor"
					description = "Passable - This door is solid to nothing at all."
					notes = ""
				}
				"16":
				{
					category = ""
					description = "One-way - This door only opens in one direction."
					notes = ""
				}
				"32":
				{
					category = "BaseDoor"
					description = "Toggle - Inputs are interpreted as to change between open and shut. That is, inputs are interpreted as to open if the door is closed and to close if open, instead of the default behavior where inputs are always interpreted as to open. This overrides the delay before reset (wait) to -1 i.e. never reset."
					notes = ""
				}
				"64":
				{
					category = ""
					description = "X Axis - This door rotates on the X axis."
					notes = ""
				}
				"128":
				{
					category = ""
					description = "Y Axis - This door rotates on the Y axis."
					notes = ""
				}
				"256":
				{
					category = "BaseDoor"
					description = "Use Opens"
					notes = ""
				}
				"512":
				{
					category = "BaseDoor"
					description = "NPCs Can't - NPCs can't open this door."
					notes = ""
				}
				"1024":
				{
					category = "BaseDoor"
					description = "Touch Opens - When a player or NPC touches the door, it will count as an attempt to open it."
					notes = ""
				}
				"2048":
				{
					category = "BaseDoor"
					description = "Starts locked - This door spawns locked and cannot be opened by the player or NPCs (but buttons can still trigger it)"
					notes = ""
				}
				"4096":
				{
					category = "BaseDoor"
					description = "Door Silent - This door makes no noise."
					notes = ""
				}
				"65536":
				{
					category = "BaseDoor"
					description = "New Use rules !FGD - Door can only be used if it's not moving, is closing, or when it's open."
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"distance":
				{
					typename = "float"
					shortinfo = "Distance"
					extra = ""
					notes = ""
					description = "Degrees the door should rotate. It will rotate away from the player if +used. Otherwise, direction is determined by if the value is negative or positive."
					choices = {}
				}
				"solidbsp":
				{
					typename = "choices"
					shortinfo = "Solid Type"
					extra = ""
					notes = ""
					description = "How to calculate collisions. Set this to BSP if the player seems to rotate oddly relative to the surface.\n0: VPhysics\n1: BSP (QPhysics)"
					choices = {}
				}
				"chainstodoor":
				{
					typename = "string"
					shortinfo = "Linked Door"
					extra = "!FGD"
					notes = ""
					description = "Passes the door's +use inputs and touch events onto a different door, so it also is activated."
					choices = {}
				}
				"filtername":
				{
					typename = "targetname"
					shortinfo = "Block Filter Name"
					extra = ""
					notes = ""
					description = "(For Half-Life: Source) Filter to use to determine entities that can block the door."
					choices = {}
				}
				"speed":
				{
					typename = "float"
					shortinfo = "Speed"
					extra = ""
					notes = ""
					description = "Speed that the door moves, in units (sliding door) or degrees (rotating door) per second."
					choices = {}
				}
				"noise1":
				{
					typename = "sound"
					shortinfo = "Start Sound"
					extra = ""
					notes = ""
					description = "Sound to play when the door starts moving (regardless of opening or closing)."
					choices = {}
				}
				"noise2":
				{
					typename = "sound"
					shortinfo = "Stop Sound"
					extra = ""
					notes = ""
					description = "Sound to play when the door stops moving (regardless of opening or closing)."
					choices = {}
				}
				"startclosesound":
				{
					typename = "sound"
					shortinfo = "Start Close Sound"
					extra = ""
					notes = ""
					description = "Sound to play when the door starts closing."
					choices = {}
				}
				"closesound":
				{
					typename = "sound"
					shortinfo = "Stop Close Sound"
					extra = ""
					notes = ""
					description = "Sound to play when the door stops closing."
					choices = {}
				}
				"wait":
				{
					typename = "float"
					shortinfo = "Delay Before Reset"
					extra = ""
					notes = ""
					description = "Time until the door returns to the closed position. A value of -1 means the door never auto-closes."
					choices = {}
				}
				"lip":
				{
					typename = "float"
					shortinfo = "Lip"
					extra = ""
					notes = ""
					description = "When the door opens, it will move its full length minus this many units. Negative values will make the door move that many more than its length."
					choices = {}
				}
				"dmg":
				{
					typename = "float"
					shortinfo = "Blocking Damage"
					extra = ""
					notes = "Bug: Normally a door will damage things blocking it, however if the player is teleported by a trigger_teleport while using noclip, they will not be damaged."
					description = "Amount of damage done to entities that block the movement of this door, per frame."
					choices = {}
				}
				"forceclosed":
				{
					typename = "boolean"
					shortinfo = "Force Closed"
					extra = ""
					notes = ""
					description = "Makes the door close no matter what. Useful for doors that have to close even if the player tries to block them with objects."
					choices = {}
				}
				"ignoredebris":
				{
					typename = "boolean"
					shortinfo = "Ignore Debris"
					extra = ""
					notes = ""
					description = "Changes the door's collision group to COLLISION_GROUP_INTERACTIVE, which ignores debris objects. Not compatible with the Non-solid to Player spawnflag as it also sets a collision group."
					choices = {}
				}
				"health":
				{
					typename = "integer"
					shortinfo = "Health"
					extra = "[Obsolete]"
					notes = ""
					description = "Deprecated.�Do not use."
					choices = {}
				}
				"message":
				{
					typename = "string"
					shortinfo = "Message If Triggered"
					extra = "[Obsolete]"
					notes = ""
					description = "Deprecated.�Do not use."
					choices = {}
				}
				"locked_sound":
				{
					typename = "string"
					shortinfo = "Locked Sound"
					extra = ""
					notes = ""
					description = "Sound played when the player tries to open the door, and fails because it's locked."
					choices = {}
				}
				"unlocked_sound":
				{
					typename = "string"
					shortinfo = "Unlocked Sound"
					extra = ""
					notes = ""
					description = "Sound played when door is unlocked."
					choices = {}
				}
				"spawnpos":
				{
					typename = "choices"
					shortinfo = "Spawn Position"
					extra = ""
					notes = ""
					description = "State the door should begin in.\n0: Closed\n1: Open"
					choices = {}
				}
				"locked_sentence":
				{
					typename = "choices"
					shortinfo = "Locked Sentence"
					extra = "(only in [Half-Life: Source])"
					notes = ""
					description = "Intercom voiceline for when the player tries to use the door, but it's locked."
					choices = {}
				}
				"unlocked_sentence":
				{
					typename = "choices"
					shortinfo = "Unlocked Sentence"
					extra = "(only in [Half-Life: Source])"
					notes = ""
					description = "Intercom voiceline for when the door is unlocked."
					choices = {}
				}
				"loopmovesound":
				{
					typename = "boolean"
					shortinfo = "Loop Moving Sound?"
					extra = ""
					notes = "Bug: If an already-looping sound is played with this enabled, it can continue forever. Further attempts to open or close the door will only add another looping sample to the noise."
					description = "Makes the door's Start Sound loop until the door finishes moving."
					choices = {}
				}
				"_minlight":
				{
					typename = "float"
					shortinfo = "Minimum Light"
					extra = ""
					notes = ""
					description = "Minimum amount of light to hit this brush. 0 is none, 1 is normal, and 2 is doubled."
					choices = {}
				}
				"damagefilter":
				{
					typename = "targetname"
					shortinfo = "Damage Filter Name"
					extra = ""
					notes = ""
					description = "When this entity receives damage, it will filter by this entity."
					choices = {}
				}
				"rendermode":
				{
					typename = "choices"
					shortinfo = "Render Mode"
					extra = ""
					notes = ""
					description = "Set a non-standard rendering mode on this entity."
					choices = 
					{
						"0" : "Normal"
						"1" : "Color"
						"2" : "Texture"
						"3" : "Glow"
						"4" : "Solid/Alphatest"
						"5" : "Additive"
						"6" : "Removed, does nothing"
						"7" : "Additive Fractional Frame"
						"8" : "Alpha Add"
						"9" : "World Space Glow"
						"10" : "Don't Render"

					}
				}
				"renderfx":
				{
					typename = "choices"
					shortinfo = "Render FX"
					extra = ""
					notes = ""
					description = "Preset pattern of appearance effects."
					choices = 
					{
						"0" : "None"
						"1" : "Slow Pulse"
						"2" : "Fast Pulse"
						"3" : "Slow Wide Pulse"
						"4" : "Fast Wide Pulse"
						"5" : "Slow Fade Away"
						"6" : "Fast Fade Away"
						"7" : "Slow Become Solid"
						"8" : "Fast Become Solid"
						"9" : "Slow Strobe"
						"10" : "Fast Strobe"
						"11" : "Faster Strobe"
						"12" : "Slow Flicker"
						"13" : "Fast Flicker"
						"14" : "Constant Glow"
						"15" : "Distort"
						"16" : "Hologram (Distort + fade)"
						"17" : "Scale Up"
						"22" : "Spotlight FX"
						"23" : "Cull By Distance"
						"24" : "Fade Wider Pulse"
						"26" : "Fade Near"

					}
				}
			}
		}
		func_dustcloud = 
		{
			description = "func_dustcloud is a  brush entity available in all Source games. It spawns randomly-sized dust particles within its volume. Use the trigger texture with this entity. The nodraw texture can also be used, but not recommended."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "integer"
					shortinfo = "Alpha"
					extra = ""
					notes = ""
					description = "Transparency of the particles. 0 means that they are invisible, 255 means opaque."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "string"
					shortinfo = "Minimum Particle Size"
					extra = ""
					notes = ""
					description = "This value determines the minimum size the particles can be."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "string"
					shortinfo = "Maximum Particle Size"
					extra = ""
					notes = ""
					description = "This value determines the maximum size the particles can be."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "boolean"
					shortinfo = "Start Disabled"
					extra = ""
					notes = ""
					description = "Don't create particles when spawned."
					choices = {}
				}
				"R_G_B":
				{
					typename = "color255"
					shortinfo = "Particle Color"
					extra = ""
					notes = ""
					description = "Color of the particles."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_5":
				{
					typename = "integer"
					shortinfo = "Particle Per Second"
					extra = ""
					notes = ""
					description = "Number of particles to spawn, per second."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_6":
				{
					typename = "string"
					shortinfo = "Maximum Particle Speed"
					extra = ""
					notes = ""
					description = "Maximum speed that the particles can move after spawning."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_7":
				{
					typename = "string"
					shortinfo = "Minimum Particle Lifetime"
					extra = ""
					notes = ""
					description = "Minimum number of seconds until each particle dies. Particles live for a random duration between this and 'Maximum Particle Lifetime'."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_8":
				{
					typename = "string"
					shortinfo = "Maximum Particle Lifetime"
					extra = ""
					notes = ""
					description = "Maximum number of seconds until each particle dies. Particles live for a random duration between 'Minimum Particle Lifetime' and this."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_9":
				{
					typename = "integer"
					shortinfo = "Maximum Visible Distance"
					extra = ""
					notes = ""
					description = "Maximum distance at which particles are visible. They fade to translucent at this distance."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_10":
				{
					typename = "boolean"
					shortinfo = "Frozen"
					extra = ""
					notes = ""
					description = "When set, this entity spawns the number of particles in SpawnRate immediately, and then goes inactive."
					choices = {}
				}
			}
		}
		func_dustmotes = 
		{
			description = "func_dustmotes is a  brush entity available in all Source games. It spawns sparkling dust motes within its volume. Use the trigger texture with this entity. The nodraw texture can also be used, but not recommended."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "string"
					shortinfo = "Minimum Particle Size"
					extra = ""
					notes = ""
					description = "Minimum size a dust mote should be. The units aren't exactly clear, but 100 is the highest you should probably be going."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "string"
					shortinfo = "Maximum Particle Size"
					extra = ""
					notes = ""
					description = "Maximum size a dust mote should be."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "integer"
					shortinfo = "Alpha"
					extra = ""
					notes = ""
					description = "Transparency of the particles. 255 is fully opaque, 0 is invisible (won't render at all)."
					choices = {}
				}
				"AffectedByWind":
				{
					typename = "boolean"
					shortinfo = "Affected By Wind"
					extra = "(in all games since [Counter-Strike: Global Offensive])"
					notes = ""
					description = "Sets if dust particles are affected by wind."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "boolean"
					shortinfo = "Start Disabled"
					extra = ""
					notes = ""
					description = "Don't create particles when spawned."
					choices = {}
				}
				"R_G_B":
				{
					typename = "color255"
					shortinfo = "Particle Color"
					extra = ""
					notes = ""
					description = "Color of the particles."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_5":
				{
					typename = "integer"
					shortinfo = "Particle Per Second"
					extra = ""
					notes = ""
					description = "Number of particles to spawn, per second."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_6":
				{
					typename = "string"
					shortinfo = "Maximum Particle Speed"
					extra = ""
					notes = ""
					description = "Maximum speed that the particles can move after spawning."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_7":
				{
					typename = "string"
					shortinfo = "Minimum Particle Lifetime"
					extra = ""
					notes = ""
					description = "Minimum number of seconds until each particle dies. Particles live for a random duration between this and 'Maximum Particle Lifetime'."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_8":
				{
					typename = "string"
					shortinfo = "Maximum Particle Lifetime"
					extra = ""
					notes = ""
					description = "Maximum number of seconds until each particle dies. Particles live for a random duration between 'Minimum Particle Lifetime' and this."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_9":
				{
					typename = "integer"
					shortinfo = "Maximum Visible Distance"
					extra = ""
					notes = ""
					description = "Maximum distance at which particles are visible. They fade to translucent at this distance."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_10":
				{
					typename = "boolean"
					shortinfo = "Frozen"
					extra = ""
					notes = ""
					description = "When set, this entity spawns the number of particles in SpawnRate immediately, and then goes inactive."
					choices = {}
				}
			}
		}
		func_fish_pool = 
		{
			description = "func_fish_pool is a  point entity available in all Source games."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
				"model":
				{
					typename = "model_path"
					shortinfo = "World model"
					extra = ""
					notes = ""
					description = "The fish model."
					choices = {}
				}
				"fish_count":
				{
					typename = "integer"
					shortinfo = "Fish Count"
					extra = ""
					notes = ""
					description = "Number of fish in this pool."
					choices = {}
				}
				"max_range":
				{
					typename = "float"
					shortinfo = "Max Range"
					extra = ""
					notes = ""
					description = "How far away a fish can wander, in units. Maximum is 255 units."
					choices = {}
				}
				"origin":
				{
					typename = "origin"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
			}
		}
		func_guntarget = 
		{
			description = "func_guntarget is a  brush entity available in all Source games."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"units_per_second":
				{
					typename = "integer"
					shortinfo = "Speed"
					extra = ""
					notes = ""
					description = "The speed at which the target moves along its path."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "targetname"
					shortinfo = "First stop target"
					extra = ""
					notes = ""
					description = "The name of the first path_track entity in the path that this target should follow."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "integer"
					shortinfo = "Damage to Take"
					extra = ""
					notes = ""
					description = "The amount of damage taken before this target is killed."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "string"
					shortinfo = "Minimum Light Level"
					extra = ""
					notes = ""
					description = "The minimum level of ambient light that hits this brush."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
				"rendermode":
				{
					typename = "choices"
					shortinfo = "Render Mode"
					extra = ""
					notes = ""
					description = "Set a non-standard rendering mode on this entity."
					choices = 
					{
						"0" : "Normal"
						"1" : "Color"
						"2" : "Texture"
						"3" : "Glow"
						"4" : "Solid/Alphatest"
						"5" : "Additive"
						"6" : "Removed, does nothing"
						"7" : "Additive Fractional Frame"
						"8" : "Alpha Add"
						"9" : "World Space Glow"
						"10" : "Don't Render"

					}
				}
				"renderamt":
				{
					typename = "integer"
					shortinfo = "Render FX / Transparency (0 - 255)"
					extra = ""
					notes = ""
					description = "Transparency amount, requires a Render Mode other than Normal. 0 is invisible, 255 is fully visible."
					choices = {}
				}
				"rendercolor":
				{
					typename = "color255"
					shortinfo = "Render Color (R G B)"
					extra = ""
					notes = ""
					description = "Color tint."
					choices = {}
				}
				"disablereceiveshadows":
				{
					typename = "boolean"
					shortinfo = "Disable Receiving Shadows"
					extra = ""
					notes = ""
					description = "Prevent the entity from receiving shadows on itself."
					choices = {}
				}
				"renderfx":
				{
					typename = "choices"
					shortinfo = "Render FX"
					extra = ""
					notes = ""
					description = "Preset pattern of appearance effects."
					choices = 
					{
						"0" : "None"
						"1" : "Slow Pulse"
						"2" : "Fast Pulse"
						"3" : "Slow Wide Pulse"
						"4" : "Fast Wide Pulse"
						"5" : "Slow Fade Away"
						"6" : "Fast Fade Away"
						"7" : "Slow Become Solid"
						"8" : "Fast Become Solid"
						"9" : "Slow Strobe"
						"10" : "Fast Strobe"
						"11" : "Faster Strobe"
						"12" : "Slow Flicker"
						"13" : "Fast Flicker"
						"14" : "Constant Glow"
						"15" : "Distort"
						"16" : "Hologram (Distort + fade)"
						"17" : "Scale Up"
						"18" : "Glowing Shell (OBSOLETE)"
						"19" : "Clamp Minimum Scale (OBSOLETE)"
						"20" : "Environmental Rain (OBSOLETE)"
						"21" : "Environmental Snow (OBSOLETE)"
						"22" : "Spotlight FX"
						"23" : "Ragdoll"
						"24" : "Fade Wider Pulse"

					}
				}
			}
		}
		func_illusionary = 
		{
			description = "func_illusionary is a  brush entity available in all Source games. Legacy support only. Use func_brush instead."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "string"
					shortinfo = "Minimum Light Level"
					extra = ""
					notes = ""
					description = "The minimum level of ambient light that hits this brush."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma.�Warning:�In [Counter-Strike: Source], parenting this entity to another can break your map."
					choices = {}
				}
				"origin":
				{
					typename = "origin"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"rendermode":
				{
					typename = "choices"
					shortinfo = "Render Mode"
					extra = ""
					notes = ""
					description = "Set a non-standard rendering mode on this entity."
					choices = 
					{
						"0" : "Normal"
						"1" : "Color"
						"2" : "Texture"
						"3" : "Glow"
						"4" : "Solid/Alphatest"
						"5" : "Additive"
						"6" : "Removed, does nothing"
						"7" : "Additive Fractional Frame"
						"8" : "Alpha Add"
						"9" : "World Space Glow"
						"10" : "Don't Render"

					}
				}
				"renderamt":
				{
					typename = "integer"
					shortinfo = "Render FX / Transparency (0 - 255)"
					extra = ""
					notes = ""
					description = "Transparency amount, requires a Render Mode other than Normal. 0 is invisible, 255 is fully visible."
					choices = {}
				}
				"rendercolor":
				{
					typename = "color255"
					shortinfo = "Render Color (R G B)"
					extra = ""
					notes = ""
					description = "Color tint."
					choices = {}
				}
				"disablereceiveshadows":
				{
					typename = "boolean"
					shortinfo = "Disable Receiving Shadows"
					extra = ""
					notes = ""
					description = "Prevent the entity from receiving shadows on itself."
					choices = {}
				}
				"renderfx":
				{
					typename = "choices"
					shortinfo = "Render FX"
					extra = ""
					notes = ""
					description = "Preset pattern of appearance effects."
					choices = 
					{
						"0" : "None"
						"1" : "Slow Pulse"
						"2" : "Fast Pulse"
						"3" : "Slow Wide Pulse"
						"4" : "Fast Wide Pulse"
						"5" : "Slow Fade Away"
						"6" : "Fast Fade Away"
						"7" : "Slow Become Solid"
						"8" : "Fast Become Solid"
						"9" : "Slow Strobe"
						"10" : "Fast Strobe"
						"11" : "Faster Strobe"
						"12" : "Slow Flicker"
						"13" : "Fast Flicker"
						"14" : "Constant Glow"
						"15" : "Distort"
						"16" : "Hologram (Distort + fade)"
						"17" : "Scale Up"
						"18" : "Glowing Shell (OBSOLETE)"
						"19" : "Clamp Minimum Scale (OBSOLETE)"
						"20" : "Environmental Rain (OBSOLETE)"
						"21" : "Environmental Snow (OBSOLETE)"
						"22" : "Spotlight FX"
						"23" : "Ragdoll"
						"24" : "Fade Wider Pulse"

					}
				}
			}
		}
		func_instance = 
		{
			description = "func_instance is a internal point entity available in all Source games. It inserts an instance of another VMF file into the current one. You can translate and rotate the instance without breaking anything or creating an off-grid editing nightmare. By default, instances are drawn in Hammer with an orange tint, though this can be disabled in Instancing > View Instances."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "string"
					shortinfo = "VMF Filename"
					extra = ""
					notes = ""
					description = "The VMF file to insert as an instance."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "string"
					shortinfo = "Fix Up Name"
					extra = ""
					notes = "Note: Entity names that start with the @ symbol e.g. @exit_door will not be changed by the instance name fix up. To do:�only confirmed for Portal 2"
					description = "Essentially the name of the instance. All entities within it will have this string added to them based upon the fix up style. If no name is provided, InstanceAutoX or AutoInstanceX will be used, where X is a number that is incremented with each instance."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "choices"
					shortinfo = "Entity Name Fix Up"
					extra = ""
					notes = ""
					description = "How to apply the fix up name.\nPrefix (Default)\nPostfix\nNone"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "string_value"
					shortinfo = "Replace <string $variable>"
					extra = ""
					notes = ""
					description = "This is a replacement parameter. Any usage of $variable inside the instance will be replaced with value.\nExample: $color 255 0 0"
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
			}
		}
		func_instance_parms = 
		{
			description = "func_instance_parms is a internal point entity available in all Source games. When placed inside an instance, it handles conversion between $parameters and the properties of other entities in the instance."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "instance_parm"
					shortinfo = "parm1  to parm10"
					extra = ""
					notes = "Warning: If using a targetname variable, Hammer will add the fix-up name to the variable wherever it's used, i.e. myinstance-$variable"
					description = "[default value]: The default value of the value type. In the case of value type color1, the default value is 255 255 255."
					choices = {}
				}
			}
		}
		func_ladderendpoint = 
		{
			description = "func_ladderendpoint is a  point entity available in all Source games."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "targetname"
					shortinfo = "Other"
					extra = ""
					notes = ""
					description = "A ladder goes between any two func_ladderendpoints pointing at each other."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
			}
		}
		func_lod = 
		{
			description = "func_lod is a  brush entity available in all Source games."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "integer"
					shortinfo = "Disappear Distance"
					extra = ""
					notes = ""
					description = "Distance at which these brushes should fade out. Acts as 'Min Disappear Distance' (and +800 as max distance) in L4D and newer games."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "integer"
					shortinfo = "Min Disappear Distance"
					extra = ""
					notes = ""
					description = "Distance at which these brushes should start fading out. (in all games since [Left 4 Dead])"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "integer"
					shortinfo = "Max Disappear Distance"
					extra = ""
					notes = ""
					description = "Distance at which these brushes should finish fading out. (in all games since [Left 4 Dead])"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "choices"
					shortinfo = "Solid"
					extra = ""
					notes = ""
					description = "Set whether or not these brushes should collide with other entities.\n0�: Solid\n1�: Nonsolid"
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		func_movelinear = 
		{
			description = "func_movelinear is a  brush entity available in all Source games. It moves linearly along a given distance, in a given direction. Unlike a func_door, it can be positioned anywhere along its axis of movement, making moving things much simpler in most cases while also using less memory. For moving water, use func_water_analog instead.\n In code, it is represented by class CFuncMoveLinear, defined in func_movelinear.cpp."
			flagnotes = ""
			flags = 
			{
				"8":
				{
					category = ""
					description = "Not Solid"
					notes = "Bug: Physics objects cannot be constrained to this entity when this flag is enabled."
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"movedir":
				{
					typename = "angle"
					shortinfo = "Move Direction (Pitch Yaw Roll)"
					extra = ""
					notes = ""
					description = "The direction the entity will move in."
					choices = {}
				}
				"startposition":
				{
					typename = "float"
					shortinfo = "Start Position"
					extra = ""
					notes = ""
					description = "Position of brush when spawned, where 0 is the starting position and 1 is starting position + (move direction * move distance)."
					choices = {}
				}
				"speed":
				{
					typename = "integer"
					shortinfo = "Speed"
					extra = ""
					notes = ""
					description = "The speed that the brush moves, in inches per second."
					choices = {}
				}
				"movedistance":
				{
					typename = "float"
					shortinfo = "Move Distance"
					extra = ""
					notes = ""
					description = "The distance from the starting point that the brush should move, in inches."
					choices = {}
				}
				"blockdamage":
				{
					typename = "float"
					shortinfo = "Block Damage"
					extra = ""
					notes = "Bug: Block damage doesn't function on players who passed through a trigger_teleport using noclip, though it will have effect again if the the player goes through a trigger_teleport without noclip."
					description = "The amount of damage to do to any entity that blocks the brushes, per frame."
					choices = {}
				}
				"startsound":
				{
					typename = "sound"
					shortinfo = "Sound played when the brush starts moving."
					extra = ""
					notes = ""
					description = "The sound to play when the brush starts moving."
					choices = {}
				}
				"stopsound":
				{
					typename = "sound"
					shortinfo = "Sound played when the brush stops moving."
					extra = ""
					notes = ""
					description = "The sound to play when the brush stops moving."
					choices = {}
				}
				"_minlight":
				{
					typename = "float"
					shortinfo = "Minimum Light"
					extra = ""
					notes = ""
					description = "Minimum amount of light to hit this brush. 0 is none, 1 is normal, and 2 is doubled."
					choices = {}
				}
				"damagefilter":
				{
					typename = "targetname"
					shortinfo = "Damage Filter Name"
					extra = ""
					notes = ""
					description = "When this entity receives damage, it will filter by this entity."
					choices = {}
				}
				"rendermode":
				{
					typename = "choices"
					shortinfo = "Render Mode"
					extra = ""
					notes = ""
					description = "Set a non-standard rendering mode on this entity."
					choices = 
					{
						"0" : "Normal"
						"1" : "Color"
						"2" : "Texture"
						"3" : "Glow"
						"4" : "Solid/Alphatest"
						"5" : "Additive"
						"6" : "Removed, does nothing"
						"7" : "Additive Fractional Frame"
						"8" : "Alpha Add"
						"9" : "World Space Glow"
						"10" : "Don't Render"

					}
				}
				"renderfx":
				{
					typename = "choices"
					shortinfo = "Render FX"
					extra = ""
					notes = ""
					description = "Preset pattern of appearance effects."
					choices = 
					{
						"0" : "None"
						"1" : "Slow Pulse"
						"2" : "Fast Pulse"
						"3" : "Slow Wide Pulse"
						"4" : "Fast Wide Pulse"
						"5" : "Slow Fade Away"
						"6" : "Fast Fade Away"
						"7" : "Slow Become Solid"
						"8" : "Fast Become Solid"
						"9" : "Slow Strobe"
						"10" : "Fast Strobe"
						"11" : "Faster Strobe"
						"12" : "Slow Flicker"
						"13" : "Fast Flicker"
						"14" : "Constant Glow"
						"15" : "Distort"
						"16" : "Hologram (Distort + fade)"
						"17" : "Scale Up"
						"22" : "Spotlight FX"
						"23" : "Cull By Distance"
						"24" : "Fade Wider Pulse"
						"26" : "Fade Near"

					}
				}
			}
		}
		func_occluder = 
		{
			description = "func_occluder is a  brush entity available in all Source games."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "bool"
					shortinfo = "Start Active"
					extra = ""
					notes = ""
					description = "If the entity starts inactive, use the Activate or Toggle inputs to turn it on."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		func_orator = 
		{
			description = "[Left 4 Dead][Left 4 Dead 2]�func_orator is a  point entity available in the Left 4 Dead series."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Not Solid"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "float"
					shortinfo = "Max Followup Dist"
					extra = ""
					notes = ""
					description = "A 'then ANY' followup on a response from this orator will dispatch to characters up to this many units away. Leave 0 to mean that even an infinitely distant character may respond."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
				"renderfx":
				{
					typename = "choices"
					shortinfo = "Render FX"
					extra = ""
					notes = ""
					description = "Preset pattern of appearance effects."
					choices = 
					{
						"0" : "None"
						"1" : "Slow Pulse"
						"2" : "Fast Pulse"
						"3" : "Slow Wide Pulse"
						"4" : "Fast Wide Pulse"
						"5" : "Slow Fade Away"
						"6" : "Fast Fade Away"
						"7" : "Slow Become Solid"
						"8" : "Fast Become Solid"
						"9" : "Slow Strobe"
						"10" : "Fast Strobe"
						"11" : "Faster Strobe"
						"12" : "Slow Flicker"
						"13" : "Fast Flicker"
						"14" : "Constant Glow"
						"15" : "Distort"
						"16" : "Hologram (Distort + fade)"
						"17" : "Scale Up"
						"18" : "Glowing Shell (OBSOLETE)"
						"19" : "Clamp Minimum Scale (OBSOLETE)"
						"20" : "Environmental Rain (OBSOLETE)"
						"21" : "Environmental Snow (OBSOLETE)"
						"22" : "Spotlight FX"
						"23" : "Ragdoll"
						"24" : "Fade Wider Pulse"

					}
				}
				"rendermode":
				{
					typename = "choices"
					shortinfo = "Render Mode"
					extra = ""
					notes = ""
					description = "Set a non-standard rendering mode on this entity."
					choices = 
					{
						"0" : "Normal"
						"1" : "Color"
						"2" : "Texture"
						"3" : "Glow"
						"4" : "Solid/Alphatest"
						"5" : "Additive"
						"6" : "Removed, does nothing"
						"7" : "Additive Fractional Frame"
						"8" : "Alpha Add"
						"9" : "World Space Glow"
						"10" : "Don't Render"

					}
				}
			}
		}
		func_physbox = 
		{
			description = "func_physbox is a  brush entity available in all Source games."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = "Breakable brush"
					description = "Only Break on Trigger"
					notes = ""
				}
				"2":
				{
					category = "Breakable brush"
					description = "Break on Touch"
					notes = ""
				}
				"4":
				{
					category = "Breakable brush"
					description = "Break on Pressure"
					notes = ""
				}
				"512":
				{
					category = "Breakable brush"
					description = "Break immediately on Physics"
					notes = ""
				}
				"1024":
				{
					category = "Breakable brush"
					description = "Don't take physics damage"
					notes = ""
				}
				"2048":
				{
					category = "Breakable brush"
					description = "Don't allow bullet penetration"
					notes = ""
				}
				"4096":
				{
					category = ""
					description = "Start Asleep"
					notes = ""
				}
				"8192":
				{
					category = ""
					description = "Ignore +USE for Pickup"
					notes = ""
				}
				"16384":
				{
					category = ""
					description = "Debris - Don't collide with the player or other debris"
					notes = ""
				}
				"32768":
				{
					category = ""
					description = "Motion Disabled"
					notes = ""
				}
				"65536":
				{
					category = ""
					description = "Use Preferred Carry Angles"
					notes = ""
				}
				"131072":
				{
					category = ""
					description = "Enable motion on Physcannon grab"
					notes = ""
				}
				"262144":
				{
					category = ""
					description = "Not affected by rotor wash"
					notes = ""
				}
				"524288":
				{
					category = ""
					description = "Generate output on +USE"
					notes = ""
				}
				"1048576":
				{
					category = ""
					description = "Physgun can ALWAYS pick up. No matter what."
					notes = ""
				}
				"2097152":
				{
					category = ""
					description = "Physgun is NOT allowed to pick this up."
					notes = ""
				}
				"4194304":
				{
					category = ""
					description = "Physgun is NOT allowed to punt this object."
					notes = ""
				}
				"8388608":
				{
					category = ""
					description = "Prevent motion enable on player bump"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "string"
					shortinfo = "Minimum Light Level"
					extra = ""
					notes = ""
					description = "The minimum level of ambient light that hits this brush."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "choices"
					shortinfo = "Impact Damage Type"
					extra = ""
					notes = ""
					description = "Sets the 'sharpness' of the brush. Sharp objects are far more damaging.\n0�: Blunt\n1�: Sharp"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "float"
					shortinfo = "Mass Scale"
					extra = ""
					notes = ""
					description = "A scale multiplier for the object's mass. Use the convar sv_massreport 1 to see the actual mass of the object ingame."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "string"
					shortinfo = "Override Parameters"
					extra = ""
					notes = ""
					description = "A list of physics key/value pairs that are usually in a physics prop .qc file. Format is 'key,value,key,value,etc'."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_5":
				{
					typename = "integer"
					shortinfo = "Health Level to Override Motion"
					extra = ""
					notes = ""
					description = "If specified, this object will start motion disabled. Once its health has dropped below this specified amount, it will enable motion."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_6":
				{
					typename = "float"
					shortinfo = "Physics Impact Force to Override Motion"
					extra = ""
					notes = ""
					description = "If specified, this object will start motion disabled. Any impact that imparts a force greater than this value on the physbox will enable motion."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_7":
				{
					typename = "integer"
					shortinfo = "Strength"
					extra = ""
					notes = ""
					description = "Number of points of damage to take before breaking.  0 means don't break."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_8":
				{
					typename = "vector"
					shortinfo = "Preferred Player-carry Angles"
					extra = ""
					notes = ""
					description = "If the 'Use Preferred Carry Angles' spawnflag is set, this angle is the angle which the object should orient to when the player picks it up, with the physgun or +USE."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_9":
				{
					typename = "choices"
					shortinfo = "Not solid to world"
					extra = ""
					notes = ""
					description = "If set, the object will pass through world geometry.\n0�: Solid to World\n1�: Passes through World"
					choices = {}
				}
				"propdata":
				{
					typename = "choices"
					shortinfo = "Prop Data"
					extra = ""
					notes = ""
					description = "Note:�Some settings can make the brush unbreakable."
					choices = 
					{
						"0" : "None"
						"1" : "Wooden.Tiny"
						"2" : "Wooden.Small"
						"3" : "Wooden.Medium"
						"4" : "Wooden.Large"
						"5" : "Wooden.Huge"
						"6" : "Metal.Small"
						"7" : "Metal.Medium"
						"8" : "Metal.Large"
						"9" : "Cardboard.Small"
						"10" : "Cardboard.Medium"
						"11" : "Cardboard.Large"
						"12" : "Stone.Small"
						"13" : "Stone.Medium"
						"14" : "Stone.Large"
						"15" : "Stone.Huge"
						"16" : "Glass.Small"
						"17" : "Plastic.Small"
						"18" : "Plastic.Medium"
						"19" : "Plastic.Large"
						"20" : "Pottery.Small"
						"21" : "Pottery.Medium"
						"22" : "Pottery.Large"
						"23" : "Pottery.Huge"
						"24" : "Glass.Window"

					}
				}
				"health":
				{
					typename = "integer"
					shortinfo = "Strength/Health"
					extra = ""
					notes = ""
					description = "The damage to take before breaking. The brush will not break from damage if this is 0."
					choices = {}
				}
				"material":
				{
					typename = "choices"
					shortinfo = "Material Type"
					extra = ""
					notes = ""
					description = "Set to the material type of the brush. Decides what sounds to make when damaged, and what gibs to produce when broken."
					choices = {}
				}
			}
		}
		func_platrot = 
		{
			description = "func_platrot is a  brush entity available in all Source games."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Toggle"
					notes = ""
				}
				"64":
				{
					category = ""
					description = "X Axis"
					notes = ""
				}
				"128":
				{
					category = ""
					description = "Y Axis"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "sound"
					shortinfo = "Movement Sound"
					extra = ""
					notes = ""
					description = "The sound to play when the brush moves."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "sound"
					shortinfo = "Stop Sound"
					extra = ""
					notes = ""
					description = "The sound to play when the brush stops moving."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "integer"
					shortinfo = "Speed of Rotation"
					extra = ""
					notes = ""
					description = "Speed at which the brush rotates, in degrees per second."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "integer"
					shortinfo = "Travel Altitude"
					extra = ""
					notes = ""
					description = "The vertical distance from the starting position that this platform moves. If negative, the platform will lower."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_5":
				{
					typename = "integer"
					shortinfo = "Spin amount"
					extra = ""
					notes = ""
					description = "The amount this platform should rotate as it moves, in degrees."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_6":
				{
					typename = "string"
					shortinfo = "Minimum Light Level"
					extra = ""
					notes = ""
					description = "The minimum level of ambient light that hits this brush."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
				"origin":
				{
					typename = "origin"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
				"rendermode":
				{
					typename = "choices"
					shortinfo = "Render Mode"
					extra = ""
					notes = ""
					description = "Set a non-standard rendering mode on this entity."
					choices = 
					{
						"0" : "Normal"
						"1" : "Color"
						"2" : "Texture"
						"3" : "Glow"
						"4" : "Solid/Alphatest"
						"5" : "Additive"
						"6" : "Removed, does nothing"
						"7" : "Additive Fractional Frame"
						"8" : "Alpha Add"
						"9" : "World Space Glow"
						"10" : "Don't Render"

					}
				}
				"renderamt":
				{
					typename = "integer"
					shortinfo = "Render FX / Transparency (0 - 255)"
					extra = ""
					notes = ""
					description = "Transparency amount, requires a Render Mode other than Normal. 0 is invisible, 255 is fully visible."
					choices = {}
				}
				"rendercolor":
				{
					typename = "color255"
					shortinfo = "Render Color (R G B)"
					extra = ""
					notes = ""
					description = "Color tint."
					choices = {}
				}
				"disablereceiveshadows":
				{
					typename = "boolean"
					shortinfo = "Disable Receiving Shadows"
					extra = ""
					notes = ""
					description = "Prevent the entity from receiving shadows on itself."
					choices = {}
				}
				"renderfx":
				{
					typename = "choices"
					shortinfo = "Render FX"
					extra = ""
					notes = ""
					description = "Preset pattern of appearance effects."
					choices = 
					{
						"0" : "None"
						"1" : "Slow Pulse"
						"2" : "Fast Pulse"
						"3" : "Slow Wide Pulse"
						"4" : "Fast Wide Pulse"
						"5" : "Slow Fade Away"
						"6" : "Fast Fade Away"
						"7" : "Slow Become Solid"
						"8" : "Fast Become Solid"
						"9" : "Slow Strobe"
						"10" : "Fast Strobe"
						"11" : "Faster Strobe"
						"12" : "Slow Flicker"
						"13" : "Fast Flicker"
						"14" : "Constant Glow"
						"15" : "Distort"
						"16" : "Hologram (Distort + fade)"
						"17" : "Scale Up"
						"18" : "Glowing Shell (OBSOLETE)"
						"19" : "Clamp Minimum Scale (OBSOLETE)"
						"20" : "Environmental Rain (OBSOLETE)"
						"21" : "Environmental Snow (OBSOLETE)"
						"22" : "Spotlight FX"
						"23" : "Ragdoll"
						"24" : "Fade Wider Pulse"

					}
				}
			}
		}
		func_precipitation = 
		{
			description = "func_precipitation is a  brush entity available in all Source games. It creates rain, snow, or ash inside its volume.\nThere are a number of console commands that control precipitation rendering. See the Precipitation issues page for details on various issues and workarounds involving this entity."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"0-100%":
				{
					typename = "integer"
					shortinfo = "Density"
					extra = ""
					notes = ""
					description = "This is the amount of particles that fall down from top side of brush. However distance from first particle to second depends on a brush volume size!"
					choices = {}
				}
				"R_G_B":
				{
					typename = "color255"
					shortinfo = "Color"
					extra = ""
					notes = ""
					description = "Color added to sprites which are rendered transparently (probably rain and snow particles)"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "choices"
					shortinfo = "Precipitation Type"
					extra = ""
					notes = ""
					description = "Value\nName\nDescription/Notes\nExample Level(s)\n\n\n0\nRain\nRain falling.\nCS:S map 'de_aztec'.\n\n\n1\nSnow\nIdentical to Rain, use 'Snowfall' instead.\n\n\n2\nAsh\nAsh falling. Appears with missing textures in most games other than EP1. A fix can be applied by extracting all 3 materials/effects/fleck_ash* textures and materials/effects/ember_swirling001 from ep1_pak_dir.vpk.\nUsed throughout EP1.\n\n\n3\nSnowfall\nSnow falling.\nDoD:S map 'dod_colmar'.\n\n\n4\nParticle Rain\n(in all games since [Left 4 Dead]) Particle rain with slight mist and refraction.\nLeft 4 Dead's 'No Mercy' campaign, CS:GO map 'de_aztec'.\n\n\n5\nParticle Ash\n(in all games since [Left 4 Dead]) Particle ash.\nLeft 4 Dead's 'Dead Air' campaign.\n\n\n6\nParticle Rain Storm\n(in all games since [Left 4 Dead 2]) Particle rain with no mist/refraction and more angled particles. Alpha values over 100 enable an additional flying leaves effect seen during the storm event.\nLeft 4 Dead 2's 'Hard Rain' and 'The Passing' campaigns.\n\n\n7\nParticle Snow\n(in all games since [Alien Swarm]) Particle snowfall.\nCS:GO map 'ar_monastery'.\n\n\n7\nParticle Bugs\n(only in [Left 4 Dead 2]) Particle flying bugs. In later games, this value is used by Particle Snow instead.\nLeft 4 Dead 2's 'Swamp Fever' campaign.\n\n\n8\nParticle Smoke\n(only in [Left 4 Dead 2]) Particle smoke with variable density.\nLeft 4 Dead 2's 'Dead Center' campaign."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
			}
		}
		func_precipitation_blocker = 
		{
			description = "func_precipitation_blocker is a  point entity available in all Source games since [Left 4 Dead] Left 4 Dead."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
			}
		}
		func_reflective_glass = 
		{
			description = "func_reflective_glass is a  brush entity available in all Source games."
			flagnotes = ""
			flags = 
			{
				"2":
				{
					category = ""
					description = "Ignore player +USE - Entity will ignore all Use inputs, including ones from the player."
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"Solidity":
				{
					typename = "choices"
					shortinfo = "Solidity"
					extra = ""
					notes = ""
					description = "Used to control the solidity/collision of these brushes. �Bug:� physics objects can behave oddly when placed directly on top of this brush, to prevent this make this brush never solid and add invisible or clip_brush floor on top.\n0: Toggle - The solidity can be toggled together with its visibility.\n1: Never Solid\n2: Always Solid"
					choices = {}
				}
				"solidbsp":
				{
					typename = "boolean"
					shortinfo = "Solid BSP"
					extra = ""
					notes = ""
					description = "Set this to BSP if the player seems to rotate oddly relative to the surface.\n0: VPhysics\n1: BSP (QPhysics)"
					choices = {}
				}
				"excludednpc":
				{
					typename = "classname"
					shortinfo = "NPC class excluded from collisions"
					extra = ""
					notes = ""
					description = "If an NPC classname (i.e. npc_zombie) is specified here, NPCs of that type won't collide with these brushes."
					choices = {}
				}
				"invert_exclusion":
				{
					typename = "boolean"
					shortinfo = "Invert NPC class exclusion"
					extra = ""
					notes = ""
					description = "If set, then the excluded NPC class will consider this brush solid, and all other NPC classes will consider it non-solid."
					choices = {}
				}
				"StartDisabled":
				{
					typename = "boolean"
					shortinfo = "Start Disabled"
					extra = ""
					notes = ""
					description = "Stay dormant until activated (probably with the Enable input).\n�Tip:�If Solidity is Toggle, disabling will also make the entity non-solid."
					choices = {}
				}
				"_minlight":
				{
					typename = "float"
					shortinfo = "Minimum Light"
					extra = ""
					notes = ""
					description = "Minimum amount of light to hit this brush. 0 is none, 1 is normal, and 2 is doubled."
					choices = {}
				}
				"damagefilter":
				{
					typename = "targetname"
					shortinfo = "Damage Filter Name"
					extra = ""
					notes = ""
					description = "When this entity receives damage, it will filter by this entity."
					choices = {}
				}
				"rendermode":
				{
					typename = "choices"
					shortinfo = "Render Mode"
					extra = ""
					notes = ""
					description = "Set a non-standard rendering mode on this entity."
					choices = 
					{
						"0" : "Normal"
						"1" : "Color"
						"2" : "Texture"
						"3" : "Glow"
						"4" : "Solid/Alphatest"
						"5" : "Additive"
						"6" : "Removed, does nothing"
						"7" : "Additive Fractional Frame"
						"8" : "Alpha Add"
						"9" : "World Space Glow"
						"10" : "Don't Render"

					}
				}
				"renderfx":
				{
					typename = "choices"
					shortinfo = "Render FX"
					extra = ""
					notes = ""
					description = "Preset pattern of appearance effects."
					choices = 
					{
						"0" : "None"
						"1" : "Slow Pulse"
						"2" : "Fast Pulse"
						"3" : "Slow Wide Pulse"
						"4" : "Fast Wide Pulse"
						"5" : "Slow Fade Away"
						"6" : "Fast Fade Away"
						"7" : "Slow Become Solid"
						"8" : "Fast Become Solid"
						"9" : "Slow Strobe"
						"10" : "Fast Strobe"
						"11" : "Faster Strobe"
						"12" : "Slow Flicker"
						"13" : "Fast Flicker"
						"14" : "Constant Glow"
						"15" : "Distort"
						"16" : "Hologram (Distort + fade)"
						"17" : "Scale Up"
						"22" : "Spotlight FX"
						"23" : "Cull By Distance"
						"24" : "Fade Wider Pulse"
						"26" : "Fade Near"

					}
				}
			}
		}
		func_rot_button = 
		{
			description = "func_rot_button is a  brush entity available in all Source games. It is a rotating version of func_button. When used, it rotates to a pressed position instead of sliding to one. \nIn code it is represented by class CRotButton, defined in buttons.cpp."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Not solid"
					notes = ""
				}
				"2":
				{
					category = ""
					description = "Reverse Dir"
					notes = ""
				}
				"32":
				{
					category = ""
					description = "Toggle"
					notes = ""
				}
				"64":
				{
					category = ""
					description = "X Axis"
					notes = ""
				}
				"128":
				{
					category = ""
					description = "Y Axis"
					notes = ""
				}
				"256":
				{
					category = ""
					description = "Touch Activates"
					notes = ""
				}
				"512":
				{
					category = ""
					description = "Damage Activates"
					notes = ""
				}
				"1024":
				{
					category = ""
					description = "Use Activates"
					notes = ""
				}
				"2048":
				{
					category = ""
					description = "Starts locked"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"Obsolete":
				{
					typename = "string"
					shortinfo = "Master"
					extra = "[Obsolete]"
					notes = ""
					description = "Deprecated.�Legacy support: The name of a master entity. If the master hasn't been activated, this button cannot be used."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "integer"
					shortinfo = "Speed"
					extra = ""
					notes = ""
					description = "The speed that the button rotates, in degrees per second."
					choices = {}
				}
				"Obsolete":
				{
					typename = "integer"
					shortinfo = "Health"
					extra = "[Obsolete]"
					notes = ""
					description = "Deprecated.�Legacy method of specifying whether or not the button can be shot to activate it. Use the 'Damage Activates' spawnflag instead."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "choices"
					shortinfo = "Sounds"
					extra = ""
					notes = ""
					description = "Value\nDescription\n\n\n0\nNone (Silent)\n\n\n21\nSqueaky\n\n\n22\nSqueaky Pneumatic\n\n\n23\nRatchet Groan\n\n\n24\nClean Ratchet\n\n\n25\nGas Clunk"
					choices = {}
				}
				"-1_stay":
				{
					typename = "integer"
					shortinfo = "Delay Before Reset"
					extra = ""
					notes = ""
					description = "Amount of time, in seconds, after the button has been pressed before it returns to the starting position. Once it has returned, it can be used again. If the value is set to -1, the button never returns."
					choices = {}
				}
				"deg":
				{
					typename = "integer"
					shortinfo = "Distance"
					extra = ""
					notes = ""
					description = "The amount, in degrees, that the button should rotate when it's pressed."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "string"
					shortinfo = "Minimum Light Level"
					extra = ""
					notes = ""
					description = "The minimum level of ambient light that hits this brush."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
				"origin":
				{
					typename = "origin"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"StartDisabled":
				{
					typename = "boolean"
					shortinfo = "Start Disabled"
					extra = ""
					notes = ""
					description = "Stay dormant until activated (probably with the Enable input)."
					choices = {}
				}
			}
		}
		func_rotating = 
		{
			description = "func_rotating is a  brush entity available in all Source games."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Start ON"
					notes = ""
				}
				"2":
				{
					category = ""
					description = "Reverse Direction"
					notes = ""
				}
				"4":
				{
					category = ""
					description = "X Axis - If enabled, the entity will spin at the X Axis."
					notes = ""
				}
				"8":
				{
					category = ""
					description = "Y Axis - If enabled, the entity spin at the Y Axis."
					notes = ""
				}
				"16":
				{
					category = ""
					description = "Acc/Dcc - If enabled, the entity will accelerate and decelerate from maximum speed based on the Friction property.. () [Team Fortress 2] Client-side Rotation - Intended to simulate the entity entirely on the client."
					notes = ""
				}
				"32":
				{
					category = ""
					description = "Fan Pain - With this enabled, the player will be hurt when coming into contact with the brush."
					notes = ""
				}
				"64":
				{
					category = ""
					description = "Not Solid"
					notes = ""
				}
				"128":
				{
					category = ""
					description = "Small Sound Radius - Use ATTN_IDLE (60dB)."
					notes = ""
				}
				"256":
				{
					category = ""
					description = "Medium Sound Radius - Use ATTN_STATIC (~67dB)."
					notes = ""
				}
				"512":
				{
					category = ""
					description = "Large Sound Radius - Use ATTN_NORM (~75dB). If the other two options are unset, this is also used."
					notes = ""
				}
				"1024":
				{
					category = ""
					description = "Client-side Animation (in all games since [Left 4 Dead])"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "integer"
					shortinfo = "Max Rotation Speed"
					extra = ""
					notes = ""
					description = "The maximum rotation speed of the brushes, in degrees per second. Seems to be limited to a number around 2000, after which the rotational speed ignores the last remaining digits (eg: 2500=250)."
					choices = {}
				}
				"0_-_100%":
				{
					typename = "integer"
					shortinfo = "Friction"
					extra = ""
					notes = ""
					description = "The amount of rotational friction. Value must be between 0 and 100�%. The lower the friction is, the slower it spins up and spins down. This is the opposite of how it would work in real life."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "sound"
					shortinfo = "Rotating sound WAV"
					extra = ""
					notes = ""
					description = "Sound to play while rotating."
					choices = {}
				}
				"10_=_loudest":
				{
					typename = "integer"
					shortinfo = "Volume"
					extra = ""
					notes = ""
					description = "The volume of the rotation sound."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "string"
					shortinfo = "Minimum Light Level"
					extra = ""
					notes = ""
					description = "The minimum level of ambient light that hits this brush."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "integer"
					shortinfo = "Blocking Damage"
					extra = ""
					notes = ""
					description = "Damage done to any entity that blocks the rotation, per frame."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_5":
				{
					typename = "choices"
					shortinfo = "Solid Type"
					extra = ""
					notes = ""
					description = "Brush solidity type\n0�: VPhysics\n1�: BSP"
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
				"origin":
				{
					typename = "origin"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
				"rendermode":
				{
					typename = "choices"
					shortinfo = "Render Mode"
					extra = ""
					notes = ""
					description = "Set a non-standard rendering mode on this entity."
					choices = 
					{
						"0" : "Normal"
						"1" : "Color"
						"2" : "Texture"
						"3" : "Glow"
						"4" : "Solid/Alphatest"
						"5" : "Additive"
						"6" : "Removed, does nothing"
						"7" : "Additive Fractional Frame"
						"8" : "Alpha Add"
						"9" : "World Space Glow"
						"10" : "Don't Render"

					}
				}
				"renderamt":
				{
					typename = "integer"
					shortinfo = "Render FX / Transparency (0 - 255)"
					extra = ""
					notes = ""
					description = "Transparency amount, requires a Render Mode other than Normal. 0 is invisible, 255 is fully visible."
					choices = {}
				}
				"rendercolor":
				{
					typename = "color255"
					shortinfo = "Render Color (R G B)"
					extra = ""
					notes = ""
					description = "Color tint."
					choices = {}
				}
				"disablereceiveshadows":
				{
					typename = "boolean"
					shortinfo = "Disable Receiving Shadows"
					extra = ""
					notes = ""
					description = "Prevent the entity from receiving shadows on itself."
					choices = {}
				}
				"renderfx":
				{
					typename = "choices"
					shortinfo = "Render FX"
					extra = ""
					notes = ""
					description = "Preset pattern of appearance effects."
					choices = 
					{
						"0" : "None"
						"1" : "Slow Pulse"
						"2" : "Fast Pulse"
						"3" : "Slow Wide Pulse"
						"4" : "Fast Wide Pulse"
						"5" : "Slow Fade Away"
						"6" : "Fast Fade Away"
						"7" : "Slow Become Solid"
						"8" : "Fast Become Solid"
						"9" : "Slow Strobe"
						"10" : "Fast Strobe"
						"11" : "Faster Strobe"
						"12" : "Slow Flicker"
						"13" : "Fast Flicker"
						"14" : "Constant Glow"
						"15" : "Distort"
						"16" : "Hologram (Distort + fade)"
						"17" : "Scale Up"
						"18" : "Glowing Shell (OBSOLETE)"
						"19" : "Clamp Minimum Scale (OBSOLETE)"
						"20" : "Environmental Rain (OBSOLETE)"
						"21" : "Environmental Snow (OBSOLETE)"
						"22" : "Spotlight FX"
						"23" : "Ragdoll"
						"24" : "Fade Wider Pulse"

					}
				}
			}
		}
		func_smokevolume = 
		{
			description = "func_smokevolume is a  brush entity available in all Source games."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Emissive"
					notes = "Details: Makes sprites render fullbright. Normally the brightness is affected by light nearby."
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"R_G_B":
				{
					typename = "color255"
					shortinfo = "Particle Color1"
					extra = ""
					notes = ""
					description = "How dim particles can be."
					choices = {}
				}
				"R_G_B":
				{
					typename = "color255"
					shortinfo = "Particle Color2"
					extra = ""
					notes = "Note: Darker particle colors will appear nearly invisible without being close to a bright light source."
					description = "How bright particles can be."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "material"
					shortinfo = "Material"
					extra = ""
					notes = ""
					description = "The material to use for the particles"
					choices = {}
				}
				"units":
				{
					typename = "float"
					shortinfo = "Particle Draw Width"
					extra = ""
					notes = ""
					description = "The size of the particles, in units/inches. (Typical Values: 128,175,200,500,512)"
					choices = {}
				}
				"units":
				{
					typename = "float"
					shortinfo = "Particle Spacing Distance"
					extra = ""
					notes = ""
					description = "The distance between the particles inside the volume. The lower the number, the denser the particles, and the more overdraw there will be. It is best to keep it as high as you can without it looking bad. (Typical Values: 125,150,200 and sometimes 80 or 480)"
					choices = {}
				}
				"seconds":
				{
					typename = "float"
					shortinfo = "Density Ramp Speed"
					extra = ""
					notes = ""
					description = "Time to go from density 0 to density 1, in seconds."
					choices = {}
				}
				"degrees/sec":
				{
					typename = "float"
					shortinfo = "Rotation Speed"
					extra = ""
					notes = ""
					description = "The speed that the particles should rotate, in degrees per second. (Typical Values: 3,10)"
					choices = {}
				}
				"units/sec":
				{
					typename = "float"
					shortinfo = "Movement Speed"
					extra = ""
					notes = ""
					description = "The speed that the particles should move around, in units/inches per second."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "float"
					shortinfo = "Density [0..1]"
					extra = ""
					notes = ""
					description = "Particle density, from 0 to 1. (Typical Values: .1-.5)"
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		func_tanktrain = 
		{
			description = "func_tanktrain is a  brush entity available in all Source games. It was meant to be a train that follows a target entity (such as the player). It was never finished and doesn't work correctly.\nIt was meant to be used in combination with a tanktrain_ai entity. \nIn code it is represented by class CFuncTankTrain, defined in hl2_dll/tanktrain.cpp."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "No Pitch (X-rot)"
					notes = ""
				}
				"2":
				{
					category = ""
					description = "No User Control"
					notes = ""
				}
				"8":
				{
					category = ""
					description = "Passable - It disables the collision from the object"
					notes = ""
				}
				"16":
				{
					category = ""
					description = "Always Fixed Orientation"
					notes = ""
				}
				"128":
				{
					category = ""
					description = "Rideable Train* - Does not knock entities off or cause damage."
					notes = ""
				}
				"256":
				{
					category = ""
					description = "Use max speed for pitch shifting move sound"
					notes = ""
				}
				"512":
				{
					category = ""
					description = "Not blockable by players"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "integer"
					shortinfo = "Health"
					extra = ""
					notes = ""
					description = "Health of the tank."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "targetname"
					shortinfo = "First Stop Target"
					extra = ""
					notes = ""
					description = "The name of the first path_track in the train's path. The train will spawn at this path_track. It will also turn to face direction indicated by the 'Orientation Type' setting."
					choices = {}
				}
				"units_/_second":
				{
					typename = "integer"
					shortinfo = "Max Speed"
					extra = ""
					notes = ""
					description = "The maximum speed that this train can move. Any speeds applied to this train, such as by path_tracks or SetSpeed inputs, will be clipped to this maximum value."
					choices = {}
				}
				"units_/_second":
				{
					typename = "integer"
					shortinfo = "Initial Speed"
					extra = ""
					notes = ""
					description = "The speed that the train will move at after it spawns, 0 = stopped."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "choices"
					shortinfo = "Change Velocity"
					extra = ""
					notes = ""
					description = "The method through which this train changes its velocity as it moves along the path.\n0�: Instantaneously\n1�: Linear blend\n2�: Ease in/ease out"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "choices"
					shortinfo = "Change angles"
					extra = ""
					notes = ""
					description = "The method through which this train changes its orientation as it moves along the path.\n0�: Never (always fixed orientation)\n1�: Near paths\n2�: Linear blend\n3�: Ease in/ease out"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_5":
				{
					typename = "integer"
					shortinfo = "Distance Between the Wheels"
					extra = ""
					notes = ""
					description = "Used for turning and stopping.\n�Tip:�Increase the value for smoother turns."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_6":
				{
					typename = "integer"
					shortinfo = "Height above track"
					extra = ""
					notes = ""
					description = "The height above the track that this train moves."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_7":
				{
					typename = "string"
					shortinfo = "Bank Angle on Turns"
					extra = ""
					notes = ""
					description = "The angle at which the train will 'bank' or tilt when approaching a turn. Use positive or negative angle numbers close to 0 (ie. between -5 and +5, depending on left or right) to achieve realistic tilt angles."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_8":
				{
					typename = "integer"
					shortinfo = "Damage on Crush"
					extra = ""
					notes = ""
					description = "The amount of damage this train does to entities that block it."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_9":
				{
					typename = "string"
					shortinfo = "Minimum Light Level"
					extra = ""
					notes = ""
					description = "The minimum level of ambient light that hits this brush."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_10":
				{
					typename = "sound"
					shortinfo = "Move Sound"
					extra = ""
					notes = ""
					description = "A sound that is played (and looped) while the train is moving."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_11":
				{
					typename = "sound"
					shortinfo = "Move Ping Sound"
					extra = ""
					notes = ""
					description = "A sound that is played more frequently as the train speeds up."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_12":
				{
					typename = "sound"
					shortinfo = "Start Sound"
					extra = ""
					notes = ""
					description = "A sound played when the train starts moving."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_13":
				{
					typename = "sound"
					shortinfo = "Stop Sound"
					extra = ""
					notes = ""
					description = "A sound played when the train stops moving."
					choices = {}
				}
				"10_=_loudest":
				{
					typename = "integer"
					shortinfo = "Volume"
					extra = ""
					notes = ""
					description = "Volume of the sound when the train is moving."
					choices = {}
				}
				"1-255,_>_100_=_higher":
				{
					typename = "integer"
					shortinfo = "Min pitch"
					extra = ""
					notes = ""
					description = "The sound pitch value that the train will approach as it comes to a stop."
					choices = {}
				}
				"1-255,_>_100_=_higher":
				{
					typename = "integer"
					shortinfo = "Max pitch"
					extra = ""
					notes = ""
					description = "The sound pitch value that the train will approach as it approaches its max speed (or 1000 inches/second if the 'Use max speed for pitch shifting move sound' flag is not set)."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_14":
				{
					typename = "float"
					shortinfo = "Min move sound interval"
					extra = ""
					notes = ""
					description = "Minimum interval at which to play the move ping sound."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_15":
				{
					typename = "float"
					shortinfo = "Max move sound interval"
					extra = ""
					notes = ""
					description = "Maximum interval at which to play the move ping sound."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
				"origin":
				{
					typename = "origin"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"rendermode":
				{
					typename = "choices"
					shortinfo = "Render Mode"
					extra = ""
					notes = ""
					description = "Set a non-standard rendering mode on this entity."
					choices = 
					{
						"0" : "Normal"
						"1" : "Color"
						"2" : "Texture"
						"3" : "Glow"
						"4" : "Solid/Alphatest"
						"5" : "Additive"
						"6" : "Removed, does nothing"
						"7" : "Additive Fractional Frame"
						"8" : "Alpha Add"
						"9" : "World Space Glow"
						"10" : "Don't Render"

					}
				}
			}
		}
		func_timescale = 
		{
			description = "[Left 4 Dead 2]�func_timescale is a  point entity available in Left 4 Dead 2."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "float"
					shortinfo = "Desired timescale."
					extra = ""
					notes = ""
					description = "Time scale to blend towards, this is a multiplicative value where 1.0 is normal time, 0.5 is half speed, 2.0 is double speed."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "float"
					shortinfo = "Acceleration per second"
					extra = ""
					notes = ""
					description = "How quickly the change per second goes up to the max."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "float"
					shortinfo = "Minimum blend per second"
					extra = ""
					notes = ""
					description = "Minimum change per second when blending from the current timescale to the desired."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "float"
					shortinfo = "Perframe delta multiplier"
					extra = ""
					notes = ""
					description = "The per frame delta between desired and current is multiplied by this to get the maximum change per second."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
			}
		}
		func_trackautochange = 
		{
			description = "func_trackautochange is a  brush entity available in all Source games. It works as a rotating/moving platform that will carry a train to a new track. It must be larger in X-Y planar area than the train, since it must contain the train within these dimensions in order to operate when the train is near it. \nIn code it is represented by class CFuncTrackAuto, defined in trains.cpp."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Auto Activate train"
					notes = ""
				}
				"2":
				{
					category = ""
					description = "Relink track"
					notes = ""
				}
				"8":
				{
					category = ""
					description = "Start at Bottom"
					notes = ""
				}
				"16":
				{
					category = ""
					description = "Rotate Only"
					notes = ""
				}
				"64":
				{
					category = ""
					description = "X Axis"
					notes = ""
				}
				"128":
				{
					category = ""
					description = "Y Axis"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "string"
					shortinfo = "Minimum Light Level"
					extra = ""
					notes = ""
					description = "The minimum level of ambient light that hits this brush."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "integer"
					shortinfo = "Travel Altitude"
					extra = ""
					notes = ""
					description = "The vertical height above the track that the train moves. Negative values moves the train below."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "integer"
					shortinfo = "Spin amount"
					extra = ""
					notes = ""
					description = "The amount this platform should rotate as it moves, in degrees."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "targetname"
					shortinfo = "Train to Switch"
					extra = ""
					notes = ""
					description = ""
					choices = {}
				}
				"UNKNOWN_KEY_NAME_5":
				{
					typename = "targetname"
					shortinfo = "Top Track"
					extra = ""
					notes = ""
					description = ""
					choices = {}
				}
				"UNKNOWN_KEY_NAME_6":
				{
					typename = "targetname"
					shortinfo = "Bottom Track"
					extra = ""
					notes = ""
					description = ""
					choices = {}
				}
				"UNKNOWN_KEY_NAME_7":
				{
					typename = "integer"
					shortinfo = "Move/Rotate Speed"
					extra = ""
					notes = ""
					description = ""
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
				"rendermode":
				{
					typename = "choices"
					shortinfo = "Render Mode"
					extra = ""
					notes = ""
					description = "Set a non-standard rendering mode on this entity."
					choices = 
					{
						"0" : "Normal"
						"1" : "Color"
						"2" : "Texture"
						"3" : "Glow"
						"4" : "Solid/Alphatest"
						"5" : "Additive"
						"6" : "Removed, does nothing"
						"7" : "Additive Fractional Frame"
						"8" : "Alpha Add"
						"9" : "World Space Glow"
						"10" : "Don't Render"

					}
				}
			}
		}
		func_trackchange = 
		{
			description = "func_trackchange is a  brush entity available in all Source games."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Auto Activate train"
					notes = ""
				}
				"2":
				{
					category = ""
					description = "Relink track"
					notes = ""
				}
				"8":
				{
					category = ""
					description = "Start at Bottom"
					notes = ""
				}
				"16":
				{
					category = ""
					description = "Rotate Only"
					notes = ""
				}
				"64":
				{
					category = ""
					description = "X Axis"
					notes = ""
				}
				"128":
				{
					category = ""
					description = "Y Axis"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "string"
					shortinfo = "Minimum Light Level"
					extra = ""
					notes = ""
					description = "The minimum level of ambient light that hits this brush."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "integer"
					shortinfo = "Travel Altitude"
					extra = ""
					notes = ""
					description = "The vertical height above the track that the train moves. Negative values moves the train below."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "integer"
					shortinfo = "Spin amount"
					extra = ""
					notes = ""
					description = "The amount this platform should rotate as it moves, in degrees."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "targetname"
					shortinfo = "Train to Switch"
					extra = ""
					notes = ""
					description = ""
					choices = {}
				}
				"UNKNOWN_KEY_NAME_5":
				{
					typename = "targetname"
					shortinfo = "Top Track"
					extra = ""
					notes = ""
					description = ""
					choices = {}
				}
				"UNKNOWN_KEY_NAME_6":
				{
					typename = "targetname"
					shortinfo = "Bottom Track"
					extra = ""
					notes = ""
					description = ""
					choices = {}
				}
				"UNKNOWN_KEY_NAME_7":
				{
					typename = "integer"
					shortinfo = "Move/Rotate Speed"
					extra = ""
					notes = ""
					description = ""
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
				"rendermode":
				{
					typename = "choices"
					shortinfo = "Render Mode"
					extra = ""
					notes = ""
					description = "Set a non-standard rendering mode on this entity."
					choices = 
					{
						"0" : "Normal"
						"1" : "Color"
						"2" : "Texture"
						"3" : "Glow"
						"4" : "Solid/Alphatest"
						"5" : "Additive"
						"6" : "Removed, does nothing"
						"7" : "Additive Fractional Frame"
						"8" : "Alpha Add"
						"9" : "World Space Glow"
						"10" : "Don't Render"

					}
				}
			}
		}
		func_tracktrain = 
		{
			description = "func_tracktrain is a  brush entity available in all Source games. It functions as a moving platform that the player can ride. It follows a path of path_track entities.\n In code, it is represented by class CFuncTrackTrain, defined in trains.cpp."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "No Pitch (X-rot)"
					notes = ""
				}
				"2":
				{
					category = ""
					description = "No User Control"
					notes = ""
				}
				"8":
				{
					category = ""
					description = "Passable - It disables the collision from the object"
					notes = ""
				}
				"16":
				{
					category = ""
					description = "Always Fixed Orientation"
					notes = ""
				}
				"128":
				{
					category = ""
					description = "Rideable Train* - Does not knock entities off or cause damage."
					notes = ""
				}
				"256":
				{
					category = ""
					description = "Use max speed for pitch shifting move sound"
					notes = ""
				}
				"512":
				{
					category = ""
					description = "Not blockable by players"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "targetname"
					shortinfo = "First Stop Target"
					extra = ""
					notes = ""
					description = "The name of the first path_track in the train's path. The train will spawn at this path_track. It will also turn to face direction indicated by the 'Orientation Type' setting."
					choices = {}
				}
				"units_/_second":
				{
					typename = "integer"
					shortinfo = "Max Speed"
					extra = ""
					notes = ""
					description = "The maximum speed that this train can move. Any speeds applied to this train, such as by path_tracks or SetSpeed inputs, will be clipped to this maximum value."
					choices = {}
				}
				"units_/_second":
				{
					typename = "integer"
					shortinfo = "Initial Speed"
					extra = ""
					notes = ""
					description = "The speed that the train will move at after it spawns, 0 = stopped."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "choices"
					shortinfo = "Change Velocity"
					extra = ""
					notes = ""
					description = "The method through which this train changes its velocity as it moves along the path.\n0�: Instantaneously\n1�: Linear blend\n2�: Ease in/ease out"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "choices"
					shortinfo = "Change angles"
					extra = ""
					notes = ""
					description = "The method through which this train changes its orientation as it moves along the path.\n0�: Never (always fixed orientation)\n1�: Near paths\n2�: Linear blend\n3�: Ease in/ease out"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "integer"
					shortinfo = "Distance Between the Wheels"
					extra = ""
					notes = ""
					description = "Used for turning and stopping.\n�Tip:�Increase the value for smoother turns."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_5":
				{
					typename = "integer"
					shortinfo = "Height above track"
					extra = ""
					notes = ""
					description = "The height above the track that this train moves."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_6":
				{
					typename = "string"
					shortinfo = "Bank Angle on Turns"
					extra = ""
					notes = ""
					description = "The angle at which the train will 'bank' or tilt when approaching a turn. Use positive or negative angle numbers close to 0 (ie. between -5 and +5, depending on left or right) to achieve realistic tilt angles."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_7":
				{
					typename = "integer"
					shortinfo = "Damage on Crush"
					extra = ""
					notes = ""
					description = "The amount of damage this train does to entities that block it."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_8":
				{
					typename = "string"
					shortinfo = "Minimum Light Level"
					extra = ""
					notes = ""
					description = "The minimum level of ambient light that hits this brush."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_9":
				{
					typename = "sound"
					shortinfo = "Move Sound"
					extra = ""
					notes = ""
					description = "A sound that is played (and looped) while the train is moving."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_10":
				{
					typename = "sound"
					shortinfo = "Move Ping Sound"
					extra = ""
					notes = ""
					description = "A sound that is played more frequently as the train speeds up."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_11":
				{
					typename = "sound"
					shortinfo = "Start Sound"
					extra = ""
					notes = ""
					description = "A sound played when the train starts moving."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_12":
				{
					typename = "sound"
					shortinfo = "Stop Sound"
					extra = ""
					notes = ""
					description = "A sound played when the train stops moving."
					choices = {}
				}
				"10_=_loudest":
				{
					typename = "integer"
					shortinfo = "Volume"
					extra = ""
					notes = ""
					description = "Volume of the sound when the train is moving."
					choices = {}
				}
				"1-255,_>_100_=_higher":
				{
					typename = "integer"
					shortinfo = "Min pitch"
					extra = ""
					notes = ""
					description = "The sound pitch value that the train will approach as it comes to a stop."
					choices = {}
				}
				"1-255,_>_100_=_higher":
				{
					typename = "integer"
					shortinfo = "Max pitch"
					extra = ""
					notes = ""
					description = "The sound pitch value that the train will approach as it approaches its max speed (or 1000 inches/second if the 'Use max speed for pitch shifting move sound' flag is not set)."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_13":
				{
					typename = "float"
					shortinfo = "Min move sound interval"
					extra = ""
					notes = ""
					description = "Minimum interval at which to play the move ping sound."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_14":
				{
					typename = "float"
					shortinfo = "Max move sound interval"
					extra = ""
					notes = ""
					description = "Maximum interval at which to play the move ping sound."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
				"origin":
				{
					typename = "origin"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"rendermode":
				{
					typename = "choices"
					shortinfo = "Render Mode"
					extra = ""
					notes = ""
					description = "Set a non-standard rendering mode on this entity."
					choices = 
					{
						"0" : "Normal"
						"1" : "Color"
						"2" : "Texture"
						"3" : "Glow"
						"4" : "Solid/Alphatest"
						"5" : "Additive"
						"6" : "Removed, does nothing"
						"7" : "Additive Fractional Frame"
						"8" : "Alpha Add"
						"9" : "World Space Glow"
						"10" : "Don't Render"

					}
				}
			}
		}
		func_traincontrols = 
		{
			description = "func_traincontrols is a  brush entity available in all Source games."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		func_useableladder = 
		{
			description = "func_useableladder is a  point entity available in all Source games."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Fake Ladder"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "UNKNOWN_VAL_TYPE"
					shortinfo = "Start (point0)<vector>"
					extra = "No extra short-information given"
					notes = ""
					description = ""
					choices = {}
				}
				"point1":
				{
					typename = "vector"
					shortinfo = "End"
					extra = ""
					notes = ""
					description = "Ladder start/end points."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "UNKNOWN_VAL_TYPE"
					shortinfo = "Start Disabled (StartDisabled)<bool>"
					extra = "No extra short-information given"
					notes = ""
					description = "Should the ladder spawn disabled?"
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		func_viscluster = 
		{
			description = "func_viscluster is a internal brush entity available in all Source games since [Half-Life 2: Episode Two][Half-Life 2: Episode Two] Half-Life 2: Episode Two. It allows you to manually tell VVIS that the visleafs inside its volume can all see each other and should be treated as one. This is useful in large open areas where visibility calculations would otherwise take a very, very long time to complete. Poor use may be expensive for in-game performance. It should be textured with tools/toolstrigger."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		func_wall = 
		{
			description = "func_wall is a  brush entity available in all Source games. Legacy support only. Use func_brush instead."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "string"
					shortinfo = "Minimum Light Level"
					extra = ""
					notes = ""
					description = "The minimum level of ambient light that hits this brush."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"rendermode":
				{
					typename = "choices"
					shortinfo = "Render Mode"
					extra = ""
					notes = ""
					description = "Set a non-standard rendering mode on this entity."
					choices = 
					{
						"0" : "Normal"
						"1" : "Color"
						"2" : "Texture"
						"3" : "Glow"
						"4" : "Solid/Alphatest"
						"5" : "Additive"
						"6" : "Removed, does nothing"
						"7" : "Additive Fractional Frame"
						"8" : "Alpha Add"
						"9" : "World Space Glow"
						"10" : "Don't Render"

					}
				}
				"renderamt":
				{
					typename = "integer"
					shortinfo = "Render FX / Transparency (0 - 255)"
					extra = ""
					notes = ""
					description = "Transparency amount, requires a Render Mode other than Normal. 0 is invisible, 255 is fully visible."
					choices = {}
				}
				"rendercolor":
				{
					typename = "color255"
					shortinfo = "Render Color (R G B)"
					extra = ""
					notes = ""
					description = "Color tint."
					choices = {}
				}
				"disablereceiveshadows":
				{
					typename = "boolean"
					shortinfo = "Disable Receiving Shadows"
					extra = ""
					notes = ""
					description = "Prevent the entity from receiving shadows on itself."
					choices = {}
				}
				"renderfx":
				{
					typename = "choices"
					shortinfo = "Render FX"
					extra = ""
					notes = ""
					description = "Preset pattern of appearance effects."
					choices = 
					{
						"0" : "None"
						"1" : "Slow Pulse"
						"2" : "Fast Pulse"
						"3" : "Slow Wide Pulse"
						"4" : "Fast Wide Pulse"
						"5" : "Slow Fade Away"
						"6" : "Fast Fade Away"
						"7" : "Slow Become Solid"
						"8" : "Fast Become Solid"
						"9" : "Slow Strobe"
						"10" : "Fast Strobe"
						"11" : "Faster Strobe"
						"12" : "Slow Flicker"
						"13" : "Fast Flicker"
						"14" : "Constant Glow"
						"15" : "Distort"
						"16" : "Hologram (Distort + fade)"
						"17" : "Scale Up"
						"18" : "Glowing Shell (OBSOLETE)"
						"19" : "Clamp Minimum Scale (OBSOLETE)"
						"20" : "Environmental Rain (OBSOLETE)"
						"21" : "Environmental Snow (OBSOLETE)"
						"22" : "Spotlight FX"
						"23" : "Ragdoll"
						"24" : "Fade Wider Pulse"

					}
				}
			}
		}
		func_wall_toggle = 
		{
			description = "func_wall_toggle is a  brush entity available in all Source games. Legacy support only. Use func_brush instead."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Starts Invisible"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "string"
					shortinfo = "Minimum Light Level"
					extra = ""
					notes = ""
					description = "The minimum level of ambient light that hits this brush."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"rendermode":
				{
					typename = "choices"
					shortinfo = "Render Mode"
					extra = ""
					notes = ""
					description = "Set a non-standard rendering mode on this entity."
					choices = 
					{
						"0" : "Normal"
						"1" : "Color"
						"2" : "Texture"
						"3" : "Glow"
						"4" : "Solid/Alphatest"
						"5" : "Additive"
						"6" : "Removed, does nothing"
						"7" : "Additive Fractional Frame"
						"8" : "Alpha Add"
						"9" : "World Space Glow"
						"10" : "Don't Render"

					}
				}
				"renderamt":
				{
					typename = "integer"
					shortinfo = "Render FX / Transparency (0 - 255)"
					extra = ""
					notes = ""
					description = "Transparency amount, requires a Render Mode other than Normal. 0 is invisible, 255 is fully visible."
					choices = {}
				}
				"rendercolor":
				{
					typename = "color255"
					shortinfo = "Render Color (R G B)"
					extra = ""
					notes = ""
					description = "Color tint."
					choices = {}
				}
				"disablereceiveshadows":
				{
					typename = "boolean"
					shortinfo = "Disable Receiving Shadows"
					extra = ""
					notes = ""
					description = "Prevent the entity from receiving shadows on itself."
					choices = {}
				}
				"renderfx":
				{
					typename = "choices"
					shortinfo = "Render FX"
					extra = ""
					notes = ""
					description = "Preset pattern of appearance effects."
					choices = 
					{
						"0" : "None"
						"1" : "Slow Pulse"
						"2" : "Fast Pulse"
						"3" : "Slow Wide Pulse"
						"4" : "Fast Wide Pulse"
						"5" : "Slow Fade Away"
						"6" : "Fast Fade Away"
						"7" : "Slow Become Solid"
						"8" : "Fast Become Solid"
						"9" : "Slow Strobe"
						"10" : "Fast Strobe"
						"11" : "Faster Strobe"
						"12" : "Slow Flicker"
						"13" : "Fast Flicker"
						"14" : "Constant Glow"
						"15" : "Distort"
						"16" : "Hologram (Distort + fade)"
						"17" : "Scale Up"
						"18" : "Glowing Shell (OBSOLETE)"
						"19" : "Clamp Minimum Scale (OBSOLETE)"
						"20" : "Environmental Rain (OBSOLETE)"
						"21" : "Environmental Snow (OBSOLETE)"
						"22" : "Spotlight FX"
						"23" : "Ragdoll"
						"24" : "Fade Wider Pulse"

					}
				}
			}
		}
		func_water_analog = 
		{
			description = "func_water_analog is a  brush entity available in all Source games. It's a version of func_movelinear slightly specialized for use as water.\nOnly two materials are known to render correctly across all systems, these are nature/water_movingplane and nature/water_dx70. Expensive water shaders are required to be unmoving, because they have to always be certain of what can/should be drawn in surface reflections. Cheap water does not reflect the world, therefore it will never encounter the visibility problem.\n In code, it is represented by class CFuncMoveLinear, defined in func_movelinear.cpp."
			flagnotes = ""
			flags = 
			{
				"8":
				{
					category = ""
					description = "Not Solid"
					notes = "Bug: Physics objects cannot be constrained to this entity when this flag is enabled."
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"movedir":
				{
					typename = "angle"
					shortinfo = "Move Direction (Pitch Yaw Roll)"
					extra = ""
					notes = ""
					description = "The direction the entity will move in."
					choices = {}
				}
				"startposition":
				{
					typename = "float"
					shortinfo = "Start Position"
					extra = ""
					notes = ""
					description = "Position of brush when spawned, where 0 is the starting position and 1 is starting position + (move direction * move distance)."
					choices = {}
				}
				"speed":
				{
					typename = "integer"
					shortinfo = "Speed"
					extra = ""
					notes = ""
					description = "The speed that the brush moves, in inches per second."
					choices = {}
				}
				"movedistance":
				{
					typename = "float"
					shortinfo = "Move Distance"
					extra = ""
					notes = ""
					description = "The distance from the starting point that the brush should move, in inches."
					choices = {}
				}
				"blockdamage":
				{
					typename = "float"
					shortinfo = "Block Damage"
					extra = ""
					notes = "Bug: Block damage doesn't function on players who passed through a trigger_teleport using noclip, though it will have effect again if the the player goes through a trigger_teleport without noclip."
					description = "The amount of damage to do to any entity that blocks the brushes, per frame."
					choices = {}
				}
				"startsound":
				{
					typename = "sound"
					shortinfo = "Sound played when the brush starts moving."
					extra = ""
					notes = ""
					description = "The sound to play when the brush starts moving."
					choices = {}
				}
				"stopsound":
				{
					typename = "sound"
					shortinfo = "Sound played when the brush stops moving."
					extra = ""
					notes = ""
					description = "The sound to play when the brush stops moving."
					choices = {}
				}
				"_minlight":
				{
					typename = "float"
					shortinfo = "Minimum Light"
					extra = ""
					notes = ""
					description = "Minimum amount of light to hit this brush. 0 is none, 1 is normal, and 2 is doubled."
					choices = {}
				}
				"damagefilter":
				{
					typename = "targetname"
					shortinfo = "Damage Filter Name"
					extra = ""
					notes = ""
					description = "When this entity receives damage, it will filter by this entity."
					choices = {}
				}
				"rendermode":
				{
					typename = "choices"
					shortinfo = "Render Mode"
					extra = ""
					notes = ""
					description = "Set a non-standard rendering mode on this entity."
					choices = 
					{
						"0" : "Normal"
						"1" : "Color"
						"2" : "Texture"
						"3" : "Glow"
						"4" : "Solid/Alphatest"
						"5" : "Additive"
						"6" : "Removed, does nothing"
						"7" : "Additive Fractional Frame"
						"8" : "Alpha Add"
						"9" : "World Space Glow"
						"10" : "Don't Render"

					}
				}
				"renderfx":
				{
					typename = "choices"
					shortinfo = "Render FX"
					extra = ""
					notes = ""
					description = "Preset pattern of appearance effects."
					choices = 
					{
						"0" : "None"
						"1" : "Slow Pulse"
						"2" : "Fast Pulse"
						"3" : "Slow Wide Pulse"
						"4" : "Fast Wide Pulse"
						"5" : "Slow Fade Away"
						"6" : "Fast Fade Away"
						"7" : "Slow Become Solid"
						"8" : "Fast Become Solid"
						"9" : "Slow Strobe"
						"10" : "Fast Strobe"
						"11" : "Faster Strobe"
						"12" : "Slow Flicker"
						"13" : "Fast Flicker"
						"14" : "Constant Glow"
						"15" : "Distort"
						"16" : "Hologram (Distort + fade)"
						"17" : "Scale Up"
						"22" : "Spotlight FX"
						"23" : "Cull By Distance"
						"24" : "Fade Wider Pulse"
						"26" : "Fade Near"

					}
				}
			}
		}
		
	}
	game = 
	{
		game_scavenge_progress_display = 
		{
			description = "[Left 4 Dead 2]�game_scavenge_progress_display is a  point entity available in Left 4 Dead 2. It displays the number of scavenge items successfully filled by survivors."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "float"
					shortinfo = "Max"
					extra = ""
					notes = ""
					description = "Number of items to collect."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		game_end = 
		{
			description = "game_end is a  point entity available in all Source games."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"Obsolete":
				{
					typename = "string"
					shortinfo = "Master"
					extra = ""
					notes = ""
					description = "Legacy support: The name of a master entity. If the master hasn't been activated, this entity will not activate."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		game_gib_manager = 
		{
			description = "game_gib_manager is a  point entity available in all Episode One games. It manages gibs on server and client. The properties of this entity apply to the whole map. Multiple instances of this entity within a map may cause errors."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "integer"
					shortinfo = "Max Gib Count"
					extra = ""
					notes = ""
					description = "Sets the max number of gib that can be spawned at a time. (-1=no limit)"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "integer"
					shortinfo = "Max Gib Count On DX8"
					extra = ""
					notes = ""
					description = "Sets the max number of gib that can be spawned at a time under DX8. (-1=use Max Gib Count setting)"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "boolean"
					shortinfo = "Allow New Gibs To Spawn"
					extra = ""
					notes = ""
					description = "If true, when the max gib count is reached, oldest gibs are removed as new gibs spawn. If false, new gibs will not be spawned once the gib limit is reached."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		game_player_equip = 
		{
			description = "game_player_equip is a  point entity available in all Source games."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Use Only"
					notes = ""
				}
				"2":
				{
					category = ""
					description = "Strip All Weapons First�(in all games since [Counter-Strike\t Global Offensive])"
					notes = ""
				}
				"4":
				{
					category = ""
					description = "Only Strip Same Weapon Type�(in all games since [Counter-Strike\t Global Offensive])"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"Obsolete":
				{
					typename = "string"
					shortinfo = "Team Master"
					extra = ""
					notes = ""
					description = "Legacy support: The name of a master entity. If the master hasn't been activated, this entity will not activate."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		game_player_team = 
		{
			description = "game_player_team is a  point entity available in all Source games. It changes the team of the player who activates it. \nIn code it is represented by class CGamePlayerTeam, defined in maprules.cpp."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Remove On fire"
					notes = ""
				}
				"2":
				{
					category = ""
					description = "Kill Player"
					notes = ""
				}
				"4":
				{
					category = ""
					description = "Gib Player"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "string"
					shortinfo = "game_team_master to use"
					extra = ""
					notes = ""
					description = ""
					choices = {}
				}
				"Obsolete":
				{
					typename = "string"
					shortinfo = "Master"
					extra = ""
					notes = ""
					description = "Legacy support: The name of a master entity. If the master hasn't been activated, this entity will not activate."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		game_ragdoll_manager = 
		{
			description = "game_ragdoll_manager is a  point entity available in all Source games."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "integer"
					shortinfo = "Max Ragdoll Count"
					extra = ""
					notes = "Warning: Accepted values range from -32 to 31. Anything over 31 resets back to -32."
					description = "Sets the max number of ragdolls that can be in the world at a time (if they are flagged to fade). Set to -1 if you want to use the default value (g_ragdoll_maxcount)."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "integer"
					shortinfo = "Max Ragdoll Count DX8"
					extra = ""
					notes = ""
					description = "Sets the max number of ragdolls that can be in the world at a time on DX8 hardware (if they are flagged to fade). Set to -1 if you want to use the 'Max Ragdoll Count' value."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "boolean"
					shortinfo = "Save Important Ragdolls"
					extra = ""
					notes = ""
					description = "Should the ragdoll manager make sure ally ragdolls aren't deleted?"
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		game_score = 
		{
			description = "game_score is a  point entity available in all Source games."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Allow Negative"
					notes = ""
				}
				"2":
				{
					category = ""
					description = "Team Points"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"points":
				{
					typename = "integer"
					shortinfo = "Points to add (+/-)"
					extra = ""
					notes = ""
					description = "Number of points to add or substract."
					choices = {}
				}
				"Obsolete":
				{
					typename = "string"
					shortinfo = "Master"
					extra = ""
					notes = ""
					description = "Legacy support: The name of a master entity. If the master hasn't been activated, this entity will not activate."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		game_text = 
		{
			description = "game_text is a  point entity available in all Source games. It displays text on players' screens. This text can be defined directly in the Hammer editor (unlike the similar env_message entity which uses the titles.txt file).\nIn multiplayer games, the text will normally only display for the activator of the 'Display' input. The 'All Players' flag can be ticked in order to display on the screens of all players.\n\n In code, it is represented by class CGameText, defined in maprules.cpp."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "All Players"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "string"
					shortinfo = "Message Text"
					extra = ""
					notes = ""
					description = "Message to display onscreen. /n signifies a new line in the text. �Tip:�AddOutput message can be used to change text at runtime in older games which do not support SetText. �Bug:�Hammer will automatically change /n to /n. This can be worked around by editing the VMF with a text editor, although it will need to be changed every time after each save."
					choices = {}
				}
				"-1_centers":
				{
					typename = "string"
					shortinfo = "X (0 - 1.0 = left to right)"
					extra = ""
					notes = ""
					description = "Horizontal position on the player's screens to draw the text. The value should be between 0 and 1, where 0 is the far left of the screen and 1 is the far right. -1 centers the text."
					choices = {}
				}
				"-1_centers":
				{
					typename = "string"
					shortinfo = "Y (0 - 1.0 = top to bottom)"
					extra = ""
					notes = ""
					description = "Vertical position on the player's screens to draw the text. The value should be between 0 and 1, where 0 is the top of the screen and 1 is the bottom. -1 centers the text."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "choices"
					shortinfo = "Text Effect"
					extra = ""
					notes = ""
					description = "Literal value\nEffect\nDescription\n\n\n0\nFade In/Out\nThe whole text is faded in, and then faded out.\n\n\n1\nCredits\nTo do:�Unknown - seems to act like Fade In/Out. Provide description.\n\n\n2\nScan Out\nThe text is scanned in letter by letter, and the whole text is then faded out."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "color255"
					shortinfo = "Color1"
					extra = ""
					notes = ""
					description = "The primary color used by all the text effects. �Note:�The color values seem to be added to the background, so either a bright white background or black text will cause the message to be invisible. �Note:�This keyvalue will default to black for entities not created in Hammer."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "color255"
					shortinfo = "Color2"
					extra = ""
					notes = ""
					description = "The scanning color for the letter being scanned if the Text Effect keyvalue is set to Scan Out - usually a different shade of Color1."
					choices = {}
				}
				"or_character_scan_time":
				{
					typename = "string"
					shortinfo = "Fade in Time"
					extra = ""
					notes = ""
					description = "The time it should take for the text to fully fade in."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_5":
				{
					typename = "string"
					shortinfo = "Fade Out Time"
					extra = ""
					notes = ""
					description = "The time it should take for the text to fade out, after the hold time has expired."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_6":
				{
					typename = "string"
					shortinfo = "Hold Time"
					extra = ""
					notes = ""
					description = "The time the text should stay onscreen, after fading in, before it begins to fade out.�Note:�This value defaults to zero for entities not created in Hammer."
					choices = {}
				}
				"scan_effect_only":
				{
					typename = "string"
					shortinfo = "Scan time"
					extra = ""
					notes = ""
					description = "If the 'Text Effect' is set to Scan Out, this is the time it should take to scan out all the letters in the text."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_7":
				{
					typename = "choices"
					shortinfo = "Text Channel"
					extra = ""
					notes = ""
					description = "You can have up to six individual game_text messages onscreen at once, stored in channels. Select which channel this text should be placed in, which will overwrite any active message already in that channel.\n0�: Channel 0 (unused) !FGD\n1�: Channel 1 (medium text size)\n2�: Channel 2 (small text size)\n3�: Channel 3 (large text size)\n4�: Channel 4 (medium text size)\n5�: Channel 5 (unused) !FGD"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_8":
				{
					typename = "string"
					shortinfo = "Master"
					extra = ""
					notes = ""
					description = "Legacy support: The name of a master entity. If the master hasn't been activated, this entity will not activate."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		game_ui = 
		{
			description = "game_ui is a  point entity available in all Source games. It redirects important player key presses to a series of outputs, and can be used to make the player control vehicles built in a map. It can be activated with I/O, or by the player looking at it."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Freeze Player - The player cannot move (they can still crouch though)(FLAG VALUE MAY BE INCORRECT)"
					notes = ""
				}
				"2":
				{
					category = ""
					description = "Hide Weapon - Disables all the player's weapons(FLAG VALUE MAY BE INCORRECT)"
					notes = "Note: This will cause the player to go into their reference (T) pose."
				}
				"4":
				{
					category = ""
					description = "+Use Deactivates(FLAG VALUE MAY BE INCORRECT)"
					notes = ""
				}
				"8":
				{
					category = ""
					description = "Jump Deactivates(FLAG VALUE MAY BE INCORRECT)"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "float"
					shortinfo = "FieldOfView"
					extra = ""
					notes = ""
					description = "How close to the entity the player's crosshair must be for it to take control. When the player leaves the active zone, they regain control.\n1.0 = straight ahead\n0.0 = +/- 90 degrees\n-1.0 = all directions"
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		game_weapon_manager = 
		{
			description = "game_weapon_manager is a  point entity available in all Source games."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "string"
					shortinfo = "Weapon Classname"
					extra = ""
					notes = ""
					description = "Classname of the weapon type to limit."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "integer"
					shortinfo = "Max Allowed in Level"
					extra = ""
					notes = ""
					description = "The maximum amount of the specified weapon type allowed in the world."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "float"
					shortinfo = "Ammo modifier"
					extra = ""
					notes = ""
					description = "Modifier for amount of ammo dropped by a weapon."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		game_zone_player = 
		{
			description = "game_zone_player is a  brush entity available in all Source games."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
			}
		}
		
	}
	generic = 
	{
		generic_actor = 
		{
			description = "generic_actor is a  point entity available in all Source games. It is a generic NPC purely made for scripted sequence work.\n In code, it is represented by class CGenericActor, defined in genericactor.cpp."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Wait Till Seen"
					notes = "Details: Prevents this NPC from seeing (or being seen) until it enters a player's viewcone."
				}
				"2":
				{
					category = ""
					description = "Gag (No IDLE sounds until angry)"
					notes = ""
				}
				"4":
				{
					category = ""
					description = "Fall to ground (unchecked means *teleport* to ground)"
					notes = ""
				}
				"8":
				{
					category = ""
					description = "Drop Healthkit"
					notes = "Details: Causes this NPC to drop an item_healthvial upon dying."
				}
				"16":
				{
					category = ""
					description = "Efficient - Don't acquire enemies or avoid obstacles"
					notes = ""
				}
				"128":
				{
					category = ""
					description = "Wait For Script"
					notes = "Details: Forces this NPC to 'wait' in an idle state until it finishes playing a scripted_sequence."
				}
				"256":
				{
					category = ""
					description = "Long Visibility/Shoot"
					notes = "Details: By default, increases a NPC's sight range to 6,000 units and allows it to attack from anywhere within that distance."
				}
				"512":
				{
					category = ""
					description = "Fade Corpse"
					notes = ""
				}
				"1024":
				{
					category = ""
					description = "Think outside PVS"
					notes = "Details: Allows this NPC to run its regular AI outside of any player's PVS."
				}
				"2048":
				{
					category = ""
					description = "Template NPC"
					notes = "Details: Marks this NPC as a template for entities like npc_template_maker. The NPC will not spawn on its own. This is not needed for point_template."
				}
				"4096":
				{
					category = ""
					description = "Do Alternate collision for this NPC (player avoidance)"
					notes = "Details: Note:�This flag is disabled in episodic for player companions because the StartScripting input does this."
				}
				"8192":
				{
					category = ""
					description = "Don't drop weapons"
					notes = ""
				}
				"16384":
				{
					category = ""
					description = "Ignore player push�(in all games since [Source][Source])"
					notes = "Details: Don't give way to player"
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "model_path"
					shortinfo = "Model"
					extra = ""
					notes = ""
					description = "Model of the generic_actor"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "choices"
					shortinfo = "Hull type"
					extra = ""
					notes = ""
					description = "Value\nDescription\n\n\nHUMAN_HULL\nHuman\n\n\nWIDE_HUMAN_HULL\nWide\n\n\nTINY_HULL\nTiny\n\n\nMEDIUM_HULL\nMedium\n\n\nLARGE_HULL\nLarge"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "string"
					shortinfo = "Relationship"
					extra = "!FGD"
					notes = ""
					description = "Values for disposition are:\nD_HT: Hate\nD_FR: Fear\nD_LI: Like\nD_NU: Neutral"
					choices = {}
				}
				"target":
				{
					typename = "targetname"
					shortinfo = "Target Path Corner"
					extra = ""
					notes = ""
					description = "The path_corner that this NPC will move to after spawning."
					choices = {}
				}
				"squadname":
				{
					typename = "string"
					shortinfo = "Squad Name"
					extra = ""
					notes = ""
					description = "NPCs that are in the same squad (i.e. have matching squad names) will share information about enemies, and will take turns attacking and covering each other."
					choices = {}
				}
				"hintgroup":
				{
					typename = "string"
					shortinfo = "Hint Group"
					extra = ""
					notes = ""
					description = "Hint groups are used by NPCs to restrict their hint-node searching to a subset of the map's hint nodes. Only hint nodes with matching hint group names will be considered by this NPC."
					choices = {}
				}
				"hintlimiting":
				{
					typename = "boolean"
					shortinfo = "Hint Limit Nav"
					extra = ""
					notes = ""
					description = "Limits NPC to using specified hint group for navigation requests, but does not limit local navigation."
					choices = {}
				}
				"sleepstate":
				{
					typename = "choices"
					shortinfo = "Sleep State"
					extra = ""
					notes = ""
					description = "Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'.\n0: None\n1: Waiting for threat\n2: Waiting for PVS\n3: Waiting for input, ignore PVS\n4: Auto PVS\n5: Auto PVS after PVS"
					choices = {}
				}
				"wakeradius":
				{
					typename = "float"
					shortinfo = "Wake Radius"
					extra = ""
					notes = ""
					description = "Auto-wake if player within this distance"
					choices = {}
				}
				"wakesquad":
				{
					typename = "boolean"
					shortinfo = "Wake Squad"
					extra = ""
					notes = ""
					description = "Wake all of the NPCs squadmates if the NPC is woken"
					choices = {}
				}
				"enemyfilter":
				{
					typename = "targetname"
					shortinfo = "Enemy Filter"
					extra = ""
					notes = ""
					description = "Filter entity to test targets against"
					choices = {}
				}
				"ignoreunseenenemies":
				{
					typename = "boolean"
					shortinfo = "Ignore unseen enemies"
					extra = ""
					notes = ""
					description = "Prefer visible enemies, regardless of distance or relationship priority"
					choices = {}
				}
				"physdamagescale":
				{
					typename = "float"
					shortinfo = "Physics Impact Damage Scale"
					extra = ""
					notes = ""
					description = "Scales damage energy when this character is hit by a physics object. With a value of 0 the NPC will take no damage from physics."
					choices = {}
				}
				"damagefilter":
				{
					typename = "targetname"
					shortinfo = "Damage Filter"
					extra = ""
					notes = ""
					description = "Name of the filter_damage_type entity that controls which entities can damage us."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system context{s} for this entity. Format is key:value,key:value,... When this entity speaks, the list of keys & values will be passed to the response rules system."
					choices = {}
				}
				"disableshadows":
				{
					typename = "boolean"
					shortinfo = "Disable Shadows"
					extra = ""
					notes = ""
					description = "Prevents the entity from creating cheap render-to-texture shadows, or lightmap shadows if the entity is a prop_static. Does not affect shadow mapping."
					choices = {}
				}
				"disableshadowdepth":
				{
					typename = "boolean"
					shortinfo = "Disable ShadowDepth"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable rendering into shadow depth (for projected textures) for this entity."
					choices = {}
				}
				"shadowdepthnocache":
				{
					typename = "choices"
					shortinfo = "Projected Texture Cache"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to hint projected texture system whether it is sufficient to cache shadow volume of this entity or to force render it every frame instead.\n0�: Default\n1�: No cache - render every frame\n2�: Cache it - render only once"
					choices = {}
				}
				"disableflashlight":
				{
					typename = "boolean"
					shortinfo = "Disable flashlight"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable projected texture lighting and shadows on this entity."
					choices = {}
				}
				"rendermode":
				{
					typename = "choices"
					shortinfo = "Render Mode"
					extra = ""
					notes = ""
					description = "Set a non-standard rendering mode on this entity."
					choices = 
					{
						"0" : "Normal"
						"1" : "Color"
						"2" : "Texture"
						"3" : "Glow"
						"4" : "Solid/Alphatest"
						"5" : "Additive"
						"6" : "Removed, does nothing"
						"7" : "Additive Fractional Frame"
						"8" : "Alpha Add"
						"9" : "World Space Glow"
						"10" : "Don't Render"

					}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
				"rendermode":
				{
					typename = "choices"
					shortinfo = "Render Mode"
					extra = ""
					notes = ""
					description = "Set a non-standard rendering mode on this entity."
					choices = 
					{
						"0" : "Normal"
						"1" : "Color"
						"2" : "Texture"
						"3" : "Glow"
						"4" : "Solid/Alphatest"
						"5" : "Additive"
						"6" : "Removed, does nothing"
						"7" : "Additive Fractional Frame"
						"8" : "Alpha Add"
						"9" : "World Space Glow"
						"10" : "Don't Render"

					}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
				"rendermode":
				{
					typename = "choices"
					shortinfo = "Render Mode"
					extra = ""
					notes = ""
					description = "Set a non-standard rendering mode on this entity."
					choices = 
					{
						"0" : "Normal"
						"1" : "Color"
						"2" : "Texture"
						"3" : "Glow"
						"4" : "Solid/Alphatest"
						"5" : "Additive"
						"6" : "Removed, does nothing"
						"7" : "Additive Fractional Frame"
						"8" : "Alpha Add"
						"9" : "World Space Glow"
						"10" : "Don't Render"

					}
				}
				"renderamt":
				{
					typename = "integer"
					shortinfo = "Render FX / Transparency (0 - 255)"
					extra = ""
					notes = ""
					description = "Transparency amount, requires a Render Mode other than Normal. 0 is invisible, 255 is fully visible."
					choices = {}
				}
				"rendercolor":
				{
					typename = "color255"
					shortinfo = "Render Color (R G B)"
					extra = ""
					notes = ""
					description = "Color tint."
					choices = {}
				}
				"disablereceiveshadows":
				{
					typename = "boolean"
					shortinfo = "Disable Receiving Shadows"
					extra = ""
					notes = ""
					description = "Prevent the entity from receiving shadows on itself."
					choices = {}
				}
				"renderfx":
				{
					typename = "choices"
					shortinfo = "Render FX"
					extra = ""
					notes = ""
					description = "Preset pattern of appearance effects."
					choices = 
					{
						"0" : "None"
						"1" : "Slow Pulse"
						"2" : "Fast Pulse"
						"3" : "Slow Wide Pulse"
						"4" : "Fast Wide Pulse"
						"5" : "Slow Fade Away"
						"6" : "Fast Fade Away"
						"7" : "Slow Become Solid"
						"8" : "Fast Become Solid"
						"9" : "Slow Strobe"
						"10" : "Fast Strobe"
						"11" : "Faster Strobe"
						"12" : "Slow Flicker"
						"13" : "Fast Flicker"
						"14" : "Constant Glow"
						"15" : "Distort"
						"16" : "Hologram (Distort + fade)"
						"17" : "Scale Up"
						"18" : "Glowing Shell (OBSOLETE)"
						"19" : "Clamp Minimum Scale (OBSOLETE)"
						"20" : "Environmental Rain (OBSOLETE)"
						"21" : "Environmental Snow (OBSOLETE)"
						"22" : "Spotlight FX"
						"23" : "Ragdoll"
						"24" : "Fade Wider Pulse"

					}
				}
			}
		}
		
	}
	info = 
	{
		info_ambient_mob = 
		{
			description = "[Left 4 Dead 2]�Warning: Display title 'info_ambient_mob' overrides earlier display title 'Info ambient mob'.info_ambient_mob is a  point entity available in Left 4 Dead 2. It is an universal ambient mob start/end (use with care!).\nTo do:�Figure out how the entity works in-game."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		info_ambient_mob_end = 
		{
			description = "This entity sets the end point for a bounding box where mobs should spawn by the director's command if the player does not advance for some time throughout the level. It cannot be manipulated directly and only works once an entire area has been cleared of infected near this bounding box.\nIn official maps, info_ambient_mob_end appears with info_ambient_mob_start. The entity sets have the same targetname. The sets appear to not be sensitive to the direction of flow and whether it is touching the ground or not."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		info_ambient_mob_start = 
		{
			description = "This entity sets the starting point for a bounding box where mobs should spawn by the director's command if the player does not advance for some time throughout the level. It cannot be manipulated directly and only works once an entire area has been cleared of infected near this bounding box.\nIn official maps, info_ambient_mob_start appears with info_ambient_mob_end. The entity sets have the same targetname. The sets appear to not be sensitive to the direction of flow and whether it is touching the ground or not."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		info_changelevel = 
		{
			description = "[Left 4 Dead][Left 4 Dead 2]�info_changelevel is a  brush entity available in the Left 4 Dead series. It is the entity that marks a level change.\nIt safely changes the level in Left 4 Dead series, and defines the end-of-level safe room. It is unusual as it is a brush entity, where info_* entities are typically point entities. Place an info_landmark in both maps that marks the 'same' location in each map. In Hammer, info_changelevel will be listed in entity class selection menu when tied to a brush as an entity."
			flagnotes = ""
			flags = 
			{
				"2":
				{
					category = ""
					description = "Disable Touch"
					notes = ""
				}
				"4":
				{
					category = ""
					description = "To Previous Chapter"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "targetname"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "Name of this landmark."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "string"
					shortinfo = "New Map Name"
					extra = ""
					notes = ""
					description = "The filename of the next map (without '.bsp')."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "targetname"
					shortinfo = "Landmark Name"
					extra = ""
					notes = ""
					description = "Changes of positions will take place on transition relative to this landmark."
					choices = {}
				}
			}
		}
		info_director = 
		{
			description = "[Left 4 Dead][Left 4 Dead 2]�info_director is a  point entity available in the Left 4 Dead series.\nIt is the notorious AI Director, and must exist in every L4D and L4D2 map for normal gameplay.\nThe director is almost entirely automated and only exists at design-time for the few situations in which other designer-placed entities need to communicate with it, such as for forcing survivors to their respective info_survivor_position at the start of a campaign for camera intro sequences.\nlogic_director_query�(in all games since [Left 4 Dead 2]) can output the director's anger level, allowing level designers to adjust conditions according to how well the players are doing."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"origin":
				{
					typename = "origin"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
			}
		}
		info_elevator_floor = 
		{
			description = "[Left 4 Dead][Left 4 Dead 2]�info_elevator_floor is a  point entity available in the Left 4 Dead series. It marks an elevator floor. It is only compatible with a func_elevator."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
			}
		}
		info_game_event_proxy = 
		{
			description = "info_game_event_proxy is a  point entity available in all Source games since [Left 4 Dead] Left 4 Dead."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Automatically detect visibility"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "string"
					shortinfo = "Event Name"
					extra = ""
					notes = ""
					description = "The event to trigger by name from modevents.res"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "float"
					shortinfo = "Range"
					extra = ""
					notes = ""
					description = "Distance that the player must be before the event is generated."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"StartDisabled":
				{
					typename = "boolean"
					shortinfo = "Start Disabled"
					extra = ""
					notes = ""
					description = "Stay dormant until activated (probably with the Enable input)."
					choices = {}
				}
			}
		}
		info_gamemode = 
		{
			description = "[Left 4 Dead][Left 4 Dead 2]�info_gamemode is a  point entity available in the Left 4 Dead series. When a map is loaded, this entity can fire outputs depending on the current game mode. This allows the all game modes to be available in a single map instead of having separate maps for each game mode."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
			}
		}
		info_goal_infected_chase = 
		{
			description = "[Left 4 Dead][Left 4 Dead 2]�info_goal_infected_chase is a  point entity available in the Left 4 Dead series. It attracts infected like the pipe bomb to give them something to do during outros. Put this in hierarchy with the escape vehicle or with a func_tracktrain to make all the infected in the map chase it!"
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
			}
		}
		info_l4d1_survivor_spawn = 
		{
			description = "[Left 4 Dead 2]�info_l4d1_survivor_spawn is a  point entity available in Left 4 Dead 2. It is used to spawn one of the original survivors from L4D1 as seen in The Passing campaign.\n\nYou can use this entity in your maps to create the feeling of a bigger world, like in The Passing. They're able to use weapons and target infected, much like the Survivor bots on your team. However, they're more limited to the bots on your team in that they can't move around the map independently. \nLouis is the only survivor bot capable of using the mounted machine gun and will walk towards it himself, if the navmesh allows it."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "choices"
					shortinfo = "Character"
					extra = ""
					notes = ""
					description = "Which survivor to spawn here. Bill was included in The Sacrifice update and was not available in the previous DLC, The Passing, due to a significant plot advancement within the series.\n4�: Bill\n5�: Zoey\n6�: Francis\n7�: Louis"
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		info_map_parameters = 
		{
			description = "info_map_parameters is a point entity available in the following Source engine games:\n[Left 4 Dead] Left 4 Dead, [Left 4 Dead 2] Left 4 Dead 2, [Counter-Strike: Source] Counter-Strike: Source, [Counter-Strike: Global Offensive] Counter-Strike: Global Offensive."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
			}
		}
		info_map_parameters_versus = 
		{
			description = "[Left 4 Dead][Left 4 Dead 2]�info_map_parameters_versus is a  point entity available in the Left 4 Dead series. It defines L4D-specific map parameters for versus games."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "float"
					shortinfo = "Pain Pill density"
					extra = ""
					notes = ""
					description = "Pain Pill density per sq 100 yards"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "float"
					shortinfo = "Molotov density"
					extra = ""
					notes = ""
					description = "Molotov density per sq 100 yards"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "float"
					shortinfo = "Pipe Bomb density"
					extra = ""
					notes = ""
					description = "Pipe Bomb density per sq 100 yards"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "float"
					shortinfo = "Pistol density"
					extra = ""
					notes = ""
					description = "Pistol density per sq 100 yards"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_5":
				{
					typename = "float"
					shortinfo = "Weapon density"
					extra = ""
					notes = ""
					description = "Weapon (non-pistol) density per sq 100 yards ([Left 4 Dead] only)"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_6":
				{
					typename = "float"
					shortinfo = "Gas Can density"
					extra = ""
					notes = ""
					description = "Gas Can density per sq 100 yards"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_7":
				{
					typename = "float"
					shortinfo = "Oxygen Tank density"
					extra = ""
					notes = ""
					description = "Oxygen Tank density per sq 100 yards"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_8":
				{
					typename = "float"
					shortinfo = "Propane Tank density"
					extra = ""
					notes = ""
					description = "Propane Tank density per sq 100 yards"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_9":
				{
					typename = "float"
					shortinfo = "Item Cluster Range"
					extra = ""
					notes = ""
					description = "Scavenge items of the same kind that are this close to each other are considered a single 'cluster' for population purposes"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_10":
				{
					typename = "integer"
					shortinfo = "Finale Item Cluster Count"
					extra = ""
					notes = ""
					description = "How many clusters of items will be populated in the finale"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_11":
				{
					typename = "float"
					shortinfo = "Ammo pile density"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Ammo pile density per sq 100 yards"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_12":
				{
					typename = "float"
					shortinfo = "Melee Weapon density"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Melee Weapon density per sq 100 yards"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_13":
				{
					typename = "float"
					shortinfo = "Adrenaline density"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Adrenaline density per sq 100 yards"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_14":
				{
					typename = "float"
					shortinfo = "Defibrillator density"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Defibrillator density per sq 100 yards"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_15":
				{
					typename = "float"
					shortinfo = "Boomer Bile density"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Boomer Bile density per sq 100 yards"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_16":
				{
					typename = "float"
					shortinfo = "Ammo upgrade density"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Ammo upgrade pack density per sq 100 yards"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_17":
				{
					typename = "float"
					shortinfo = "Super Weapon density"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Chainsaw and Grenade Launcher density per sq 100 yards"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_18":
				{
					typename = "float"
					shortinfo = "Configurable Weapon Spawn density"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Density for weapon_spawn entities, -1 to spawn all"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_19":
				{
					typename = "float"
					shortinfo = "Configurable Weapon Cluster Range"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "weapon_spawn entities that are this close to each other are considered a single 'cluster' for population purposes"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_20":
				{
					typename = "float"
					shortinfo = "Magnum Pistol Spawn density"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Density for weapon_magnum_spawn entities, -1 to spawn all"
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
			}
		}
		info_remarkable = 
		{
			description = "[Left 4 Dead][Left 4 Dead 2]�info_remarkable is a  point entity available in the Left 4 Dead series. An object in the world such that characters seeing it will speak a TLK_REMARK concept. Info_remarkable in L4D2 official maps can be found in the commentary text file located in the maps directory within pak01_dir.vpk. Left 4 Dead commentary files can be found in the maps folder of the Left 4 Dead installation for Left 4 Dead (No VPK extraction necessary). This entity can be placed with the Commentary Editor"
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "string"
					shortinfo = "Subject context"
					extra = ""
					notes = ""
					description = "Text to put in the SUBJECT context of the TLK_REMARK fired upon sighting this object."
					choices = {}
				}
				"origin":
				{
					typename = "origin"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		info_survivor_position = 
		{
			description = "[Left 4 Dead][Left 4 Dead 2]�info_survivor_position is a  point entity available in the Left 4 Dead series. It defines a point where specific survivors can be moved to and locked/unlocked in place by the info_director through the info_directors input/outputs. It is useful for creating introduction sequences that make use of cameras, as it allows you to guarantee where a survivor will not only be standing, but also allows you to use point_viewcontrol_survivor so that it can zoom in on a particular suvivors head, regardless of the difference in height for each survivor. This is important for creating professional looking introduction sequences for the first map of your campaign."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "integer"
					shortinfo = "Order"
					extra = ""
					notes = ""
					description = "Index of spot based on order people got on board. (1-4)"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "string"
					shortinfo = "Survivor Name"
					extra = ""
					notes = ""
					description = "Force this survivor to use this position (Zoey, Louis, etc.)"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "string"
					shortinfo = "Survivor Intro Sequence"
					extra = ""
					notes = ""
					description = "Sequence to play when the intro starts"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "string"
					shortinfo = "Game Mode"
					extra = ""
					notes = ""
					description = "Use this position for a particular game mode only (coop,versus,survival,scavenge)"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_5":
				{
					typename = "string"
					shortinfo = "Survivor Concept"
					extra = ""
					notes = ""
					description = "Response rule concept to play when survivor is moved here"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_6":
				{
					typename = "boolean"
					shortinfo = "Hide Weapons"
					extra = ""
					notes = ""
					description = "Hide Survivor's weapon while locked to this position."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
			}
		}
		info_survivor_rescue = 
		{
			description = "[Left 4 Dead][Left 4 Dead 2]�info_survivor_rescue is a  point entity available in the Left 4 Dead series. It is the location of a survivor rescue point."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "vector"
					shortinfo = "Eye position of survivors waiting for rescue"
					extra = ""
					notes = ""
					description = ""
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "model_path"
					shortinfo = "World model"
					extra = ""
					notes = ""
					description = "World model, used by Hammer only."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
			}
		}
		info_zombie_border = 
		{
			description = "[Left 4 Dead 2]�info_zombie_border is a  point entity available in Left 4 Dead 2. No zombies will spawn behind this entity.\nTo do:�Figure out how the entity works in-game."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
				"StartDisabled":
				{
					typename = "boolean"
					shortinfo = "Start Disabled"
					extra = ""
					notes = ""
					description = "Stay dormant until activated (probably with the Enable input)."
					choices = {}
				}
			}
		}
		info_zombie_spawn = 
		{
			description = "[Left 4 Dead][Left 4 Dead 2]�info_zombie_spawn is a  point entity available in the Left 4 Dead series. It is used to spawn a zombie manually.\nGenerally, it is recommended to leave zombie spawning to the AI Director, however there may be uses for it, such as spawning a Tank in a train car like in The Sacrifice."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "string"
					shortinfo = "Population"
					extra = ""
					notes = ""
					description = "Zombie population to choose among."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "boolean"
					shortinfo = "Attack On Spawn"
					extra = ""
					notes = ""
					description = "Whether this zombie should always attack on spawn. Note that this only affects Tanks and Witches at this time, all others always attack on spawn."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "boolean"
					shortinfo = "Offer Spawned Tank to PZs"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = ""
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
			}
		}
		info_infected_zoo_maker = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		info_infected_zoo_puppet = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		info_item_position = 
		{
			description = "[Left 4 Dead 2]�info_item_position is a  point entity available in Left 4 Dead 2. An entity that represents a possible item location in a map. Scripts can search for these entities and use them to spawn objects for different game modes"
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "model_path"
					shortinfo = "Helper Model"
					extra = ""
					notes = ""
					description = "A model used to represent this entity."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "integer"
					shortinfo = "Group"
					extra = ""
					notes = ""
					description = "Group Number."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "choices"
					shortinfo = "Rarity"
					extra = ""
					notes = ""
					description = "Item rarity at this location."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "string"
					shortinfo = "Replace"
					extra = ""
					notes = ""
					description = "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of the spawn group that have $variable somewhere will be replaced with the value contents.  Example: $color 255 0 0"
					choices = {}
				}
			}
		}
		info_target_instructor_hint = 
		{
			description = "info_target_instructor_hint is a  point entity available in all Source games since [Left 4 Dead 2] Left 4 Dead 2."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
			}
		}
		info_camera_link = 
		{
			description = "info_camera_link is a  point entity available in all Source games. It can use point_cameras to render images for materials used by entities. To author the material, use the special identifier _rt_Camera for the $baseTexture (which is the only material that it will work with) in the .vmt then connect the 'target' field to the entity which uses that material, and the 'PointCamera' field to the point_camera you want to have appear on that entity's material."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "targetname"
					shortinfo = "Entity Whose Material Uses _rt_camera"
					extra = ""
					notes = ""
					description = "The entity with the screen on it."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "targetname"
					shortinfo = "Camera Name"
					extra = ""
					notes = ""
					description = "The name of a point_camera entity in the map that the material should be rendered from."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		info_constraint_anchor = 
		{
			description = "info_constraint_anchor is a  point entity available in all Source games. It is used to attach constraints to a local position on an entity (usually they attach to the center of mass). Attach the desired constraint to this entity, and then parent this entity to the entity you want the constraint to apply to."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "float"
					shortinfo = "Amount to scale the mass of this body in the constraint solver"
					extra = ""
					notes = ""
					description = "Multiplies the mass of the object when calculating constraints that go through this anchor. 1 means no change."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
			}
		}
		info_hint = 
		{
			description = "info_hint is a  point entity available in all Source games."
			flagnotes = ""
			flags = 
			{
				"65536":
				{
					category = ""
					description = "Allow jump up"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "choices"
					shortinfo = "Hint"
					extra = ""
					notes = ""
					description = "Hint type"
					choices = 
					{
						"0" : "None"
						"2" : "World: Window"
						"12" : "World: Act Busy Hint"
						"13" : "World: Visually Interesting"
						"14" : "World: Visually Interesting (Don't aim at)"
						"15" : "World: Inhibit Combine Mines within 15 feet"
						"16" : "World: Visually Interesting (Stealth mode)"
						"100" : "Crouch Cover Medium"
						"101" : "Crouch Cover Low"
						"102" : "Waste Scanner Spawn"
						"103" : "Entrance / Exit Pinch"
						"105" : "Enemy Disadvantage Point"
						"106" : "Health Kit"
						"400" : "Antlion: Burrow Point"
						"401" : "Antlion: Thumper Flee Point"
						"450" : "Headcrab: Burrow Point"
						"451" : "Headcrab: Exit Pod Point"
						"500" : "Roller: Patrol Point"
						"501" : "Roller: Cleanup Spot"
						"700" : "Crow: Fly to point"
						"701" : "Crow: Perch point"
						"900" : "Follower: Wait point"
						"901" : "Override jump permission"
						"902" : "Player squad transition point"
						"903" : "NPC exit point"
						"904" : "Strider node"
						"950" : "Player Ally: Push away destination"
						"951" : "PLayer Ally: Fear withdrawal destination"
						"1000" : "HL1 World: Machinery"
						"1001" : "HL1 World: Blinking Light"
						"1002" : "HL1 World: Human Blood"
						"1003" : "HL1 World: Alien Blood"

					}
				}
			}
		}
		info_intermission = 
		{
			description = "info_intermission is a  point entity available in all Source games."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "targetname"
					shortinfo = "Entity to look at"
					extra = ""
					notes = ""
					description = "Name of entity that dead players will face while in intermission at this spot."
					choices = {}
				}
			}
		}
		info_ladder_dismount = 
		{
			description = "info_ladder_dismount is a  point entity available in all Source games."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "targetname"
					shortinfo = "LadderName"
					extra = ""
					notes = ""
					description = "If multiple ladders are near multiple endpoints, use this to stop them from interfering with each other."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
			}
		}
		info_landmark = 
		{
			description = "info_landmark is a  point entity available in all Source games. It acts as a landmark for transitions to another level. There should be a corresponding info_landmark entity in the next map. Entities will be transitioned to the next level relative to the info_landmark entities.\nIn code it is represented by class CPointEntity, defined in subs.cpp."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		info_lighting = 
		{
			description = "info_lighting is a internal point entity available in all Source games. It can be used to change the lighting origin of a prop_static or a vehicle prop. Set the prop's lightingorigin keyvalue to point at this entity to make the prop light as if it was at the info_lighting's origin. Good for prop_static entities that are embedded in world geometry (like rocks/windows/etc). It also changes the cubemap origin, meaning the prop will show reflections from the closest cubemap to the info_lighting entity. For a prop_dynamic, use info_target."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
			}
		}
		info_mass_center = 
		{
			description = "info_mass_center is a  point entity available in all Source games."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "targetname"
					shortinfo = "Target object"
					extra = ""
					notes = ""
					description = "The entity whose mass center will be overridden."
					choices = {}
				}
			}
		}
		info_no_dynamic_shadow = 
		{
			description = "info_no_dynamic_shadow is a internal point entity available in all Source games."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "sidelist"
					shortinfo = "Brush faces"
					extra = ""
					notes = ""
					description = "List of brush sides that shouldn't receive dynamic shadows."
					choices = {}
				}
			}
		}
		info_node = 
		{
			description = "info_node is a  point entity available in all Source games."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Force human permission"
					notes = ""
				}
				"2":
				{
					category = ""
					description = "Force small_centered permission"
					notes = ""
				}
				"4":
				{
					category = ""
					description = "Force wide_human permission"
					notes = ""
				}
				"8":
				{
					category = ""
					description = "Force tiny permission"
					notes = ""
				}
				"16":
				{
					category = ""
					description = "Force wide_short permission"
					notes = ""
				}
				"32":
				{
					category = ""
					description = "Force medium permission"
					notes = ""
				}
				"64":
				{
					category = ""
					description = "Force tiny_centered permission"
					notes = ""
				}
				"128":
				{
					category = ""
					description = "Force large permission"
					notes = ""
				}
				"256":
				{
					category = ""
					description = "Force large_centered permission"
					notes = ""
				}
				"512":
				{
					category = ""
					description = "Keep editor position"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "integer"
					shortinfo = "Node ID"
					extra = ""
					notes = ""
					description = "Read-only internal Hammer value."
					choices = {}
				}
			}
		}
		info_node_air = 
		{
			description = "info_node_air is a  point entity available in all Source games."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Force human permission(FLAG VALUE MAY BE INCORRECT)"
					notes = ""
				}
				"2":
				{
					category = ""
					description = "Force small_centered permission(FLAG VALUE MAY BE INCORRECT)"
					notes = ""
				}
				"4":
				{
					category = ""
					description = "Force wide_human permission(FLAG VALUE MAY BE INCORRECT)"
					notes = ""
				}
				"8":
				{
					category = ""
					description = "Force tiny permission(FLAG VALUE MAY BE INCORRECT)"
					notes = ""
				}
				"16":
				{
					category = ""
					description = "Force wide_short permission(FLAG VALUE MAY BE INCORRECT)"
					notes = ""
				}
				"32":
				{
					category = ""
					description = "Force medium permission(FLAG VALUE MAY BE INCORRECT)"
					notes = ""
				}
				"64":
				{
					category = ""
					description = "Force tiny_centered permission(FLAG VALUE MAY BE INCORRECT)"
					notes = ""
				}
				"128":
				{
					category = ""
					description = "Force large permission(FLAG VALUE MAY BE INCORRECT)"
					notes = ""
				}
				"256":
				{
					category = ""
					description = "Force large_centered permission(FLAG VALUE MAY BE INCORRECT)"
					notes = ""
				}
				"512":
				{
					category = ""
					description = "Keep editor position(FLAG VALUE MAY BE INCORRECT)"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "integer"
					shortinfo = "NodeHeight"
					extra = ""
					notes = ""
					description = "Confirm:Ensure this much height from the ground?"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "integer"
					shortinfo = "Node ID"
					extra = ""
					notes = ""
					description = "Read-only internal Hammer value."
					choices = {}
				}
			}
		}
		info_node_air_hint = 
		{
			description = "info_node_air_hint is a  point entity available in all Source games."
			flagnotes = ""
			flags = 
			{
				"65536":
				{
					category = ""
					description = "Allow jump up"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "integer"
					shortinfo = "NodeHeight"
					extra = ""
					notes = ""
					description = "Confirm:Ensure this much height from the ground?"
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "choices"
					shortinfo = "Hint"
					extra = ""
					notes = ""
					description = "Hint type"
					choices = 
					{
						"0" : "None"
						"2" : "World: Window"
						"12" : "World: Act Busy Hint"
						"13" : "World: Visually Interesting"
						"14" : "World: Visually Interesting (Don't aim at)"
						"15" : "World: Inhibit Combine Mines within 15 feet"
						"16" : "World: Visually Interesting (Stealth mode)"
						"100" : "Crouch Cover Medium"
						"101" : "Crouch Cover Low"
						"102" : "Waste Scanner Spawn"
						"103" : "Entrance / Exit Pinch"
						"105" : "Enemy Disadvantage Point"
						"106" : "Health Kit"
						"400" : "Antlion: Burrow Point"
						"401" : "Antlion: Thumper Flee Point"
						"450" : "Headcrab: Burrow Point"
						"451" : "Headcrab: Exit Pod Point"
						"500" : "Roller: Patrol Point"
						"501" : "Roller: Cleanup Spot"
						"700" : "Crow: Fly to point"
						"701" : "Crow: Perch point"
						"900" : "Follower: Wait point"
						"901" : "Override jump permission"
						"902" : "Player squad transition point"
						"903" : "NPC exit point"
						"904" : "Strider node"
						"950" : "Player Ally: Push away destination"
						"951" : "PLayer Ally: Fear withdrawal destination"
						"1000" : "HL1 World: Machinery"
						"1001" : "HL1 World: Blinking Light"
						"1002" : "HL1 World: Human Blood"
						"1003" : "HL1 World: Alien Blood"

					}
				}
			}
		}
		info_node_climb = 
		{
			description = "info_node_climb is a  point entity available in all Source games."
			flagnotes = ""
			flags = 
			{
				"65536":
				{
					category = ""
					description = "Allow jump up"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "choices"
					shortinfo = "Hint"
					extra = ""
					notes = ""
					description = "Hint type"
					choices = 
					{
						"0" : "None"
						"2" : "World: Window"
						"12" : "World: Act Busy Hint"
						"13" : "World: Visually Interesting"
						"14" : "World: Visually Interesting (Don't aim at)"
						"15" : "World: Inhibit Combine Mines within 15 feet"
						"16" : "World: Visually Interesting (Stealth mode)"
						"100" : "Crouch Cover Medium"
						"101" : "Crouch Cover Low"
						"102" : "Waste Scanner Spawn"
						"103" : "Entrance / Exit Pinch"
						"105" : "Enemy Disadvantage Point"
						"106" : "Health Kit"
						"400" : "Antlion: Burrow Point"
						"401" : "Antlion: Thumper Flee Point"
						"450" : "Headcrab: Burrow Point"
						"451" : "Headcrab: Exit Pod Point"
						"500" : "Roller: Patrol Point"
						"501" : "Roller: Cleanup Spot"
						"700" : "Crow: Fly to point"
						"701" : "Crow: Perch point"
						"900" : "Follower: Wait point"
						"901" : "Override jump permission"
						"902" : "Player squad transition point"
						"903" : "NPC exit point"
						"904" : "Strider node"
						"950" : "Player Ally: Push away destination"
						"951" : "PLayer Ally: Fear withdrawal destination"
						"1000" : "HL1 World: Machinery"
						"1001" : "HL1 World: Blinking Light"
						"1002" : "HL1 World: Human Blood"
						"1003" : "HL1 World: Alien Blood"

					}
				}
			}
		}
		info_node_hint = 
		{
			description = "info_node_hint is a  point entity available in all Source games."
			flagnotes = ""
			flags = 
			{
				"65536":
				{
					category = ""
					description = "Allow jump up"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "choices"
					shortinfo = "Hint"
					extra = ""
					notes = ""
					description = "Hint type"
					choices = 
					{
						"0" : "None"
						"2" : "World: Window"
						"12" : "World: Act Busy Hint"
						"13" : "World: Visually Interesting"
						"14" : "World: Visually Interesting (Don't aim at)"
						"15" : "World: Inhibit Combine Mines within 15 feet"
						"16" : "World: Visually Interesting (Stealth mode)"
						"100" : "Crouch Cover Medium"
						"101" : "Crouch Cover Low"
						"102" : "Waste Scanner Spawn"
						"103" : "Entrance / Exit Pinch"
						"105" : "Enemy Disadvantage Point"
						"106" : "Health Kit"
						"400" : "Antlion: Burrow Point"
						"401" : "Antlion: Thumper Flee Point"
						"450" : "Headcrab: Burrow Point"
						"451" : "Headcrab: Exit Pod Point"
						"500" : "Roller: Patrol Point"
						"501" : "Roller: Cleanup Spot"
						"700" : "Crow: Fly to point"
						"701" : "Crow: Perch point"
						"900" : "Follower: Wait point"
						"901" : "Override jump permission"
						"902" : "Player squad transition point"
						"903" : "NPC exit point"
						"904" : "Strider node"
						"950" : "Player Ally: Push away destination"
						"951" : "PLayer Ally: Fear withdrawal destination"
						"1000" : "HL1 World: Machinery"
						"1001" : "HL1 World: Blinking Light"
						"1002" : "HL1 World: Human Blood"
						"1003" : "HL1 World: Alien Blood"

					}
				}
			}
		}
		info_node_link = 
		{
			description = "info_node_link is a  point entity available in all Source games. It is a manually defined, dynamic connection between two navigation nodes. This could be used to create or destroy a connection in the nodegraph because of some event in your map (a bridge being created/destroyed, etc)."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Force human connect"
					notes = ""
				}
				"2":
				{
					category = ""
					description = "Force small_centered connect"
					notes = ""
				}
				"4":
				{
					category = ""
					description = "Force wide_human connect"
					notes = ""
				}
				"8":
				{
					category = ""
					description = "Force tiny connect"
					notes = ""
				}
				"16":
				{
					category = ""
					description = "Force wide_short connect"
					notes = ""
				}
				"32":
				{
					category = ""
					description = "Force medium connect"
					notes = ""
				}
				"64":
				{
					category = ""
					description = "Force tiny_centered connect"
					notes = ""
				}
				"128":
				{
					category = ""
					description = "Force large connect"
					notes = ""
				}
				"256":
				{
					category = ""
					description = "Force large_centered connect"
					notes = ""
				}
				"512":
				{
					category = ""
					description = "Force medium_tall connect"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "node_dest"
					shortinfo = "Start node ID"
					extra = ""
					notes = ""
					description = "The node ID of one end of the node connection."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "node_dest"
					shortinfo = "End node ID"
					extra = ""
					notes = ""
					description = "The node ID of one end of the node connection."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "choices"
					shortinfo = "Initial State"
					extra = ""
					notes = ""
					description = "Makes this connection is available the moment the map loads. If there is something blocking the NPC's path while this is on, the NPC may appear to walk straight into that object/hole.\n0�: Off\n1�: On"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "choices"
					shortinfo = "Type of Connection"
					extra = ""
					notes = ""
					description = "How NPCs can use this node. Not all NPCs can do all types.\n1�: Ground\n2�: Jump\n4�: Fly\n8�: Climb"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_5":
				{
					typename = "string"
					shortinfo = "Allow Pass When Off"
					extra = ""
					notes = ""
					description = "Entity or class to allow passage even when node is off"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_6":
				{
					typename = "boolean"
					shortinfo = "Invert exclusion rules"
					extra = ""
					notes = ""
					description = "Allowed entity is the only entity NOT allowed when this is set to 'yes'"
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		info_node_link_controller = 
		{
			description = "info_node_link_controller is a  point entity available in all Source games. It controls all connections between navigation nodes that intersect a certain volume. This allows for mass enabling/disabling of node connections."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "vector"
					shortinfo = "Mins"
					extra = ""
					notes = ""
					description = "Coordinates relative to the entity defining one point of the volume. A box will appear in hammer to help visualize the dimensions of the volume."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "vector"
					shortinfo = "Maxs"
					extra = ""
					notes = ""
					description = "Coordinates relative to the entity defining the second point of the volume. A box will appear in hammer to help visualize the dimensions of the volume."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "choices"
					shortinfo = "Initial State"
					extra = ""
					notes = ""
					description = "State of the node links the moment the map loads. If there is something blocking the NPC's path while this is on, the NPC may appear to walk straight into that object/hole.\n0�: Off\n1�: On"
					choices = {}
				}
				"for_air_links":
				{
					typename = "boolean"
					shortinfo = "Use Larger Radius"
					extra = ""
					notes = ""
					description = "Set this to 'Yes' if this controller is intended to control air links. Air links connect using a larger search radius so leaving this at 'No' might miss some air links."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "string"
					shortinfo = "Allow Pass When Off"
					extra = ""
					notes = ""
					description = "Entity or class to allow passage even when node is off."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_5":
				{
					typename = "boolean"
					shortinfo = "Invert exclusion rules"
					extra = ""
					notes = ""
					description = "Makes target(s) defined in Allow Pass When Off the only targets NOT allowed to pass when off."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		info_npc_spawn_destination = 
		{
			description = "info_npc_spawn_destination is a  point entity available in all Source games. It is a NPC spawn destination. An npc_template_maker (or another npc_maker which use templates, such as npc_hunter_maker) can optionally have these set as the destination where the NPC will spawn. If multiple info_npc_spawn_destinations exist with the same targetname, one will be selected either at random, or based on the parameters of the npc_template_maker."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "float"
					shortinfo = "Reuse Delay"
					extra = ""
					notes = ""
					description = "After an NPC is spawned at this destination, the delay before this destination is eligible for selection again."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "string"
					shortinfo = "New NPC Name"
					extra = ""
					notes = ""
					description = "If an NPC spawns at this destination, change that NPC's targetname to this."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
			}
		}
		info_null = 
		{
			description = "info_null is a  point entity available in all Source games."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		info_overlay = 
		{
			description = "info_overlay is a internal point entity available in all Source games."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "targetname"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "Name of the overlay. Used to access the overlay with an env_texturetoggle."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "material"
					shortinfo = "Material"
					extra = ""
					notes = ""
					description = "The material to overlay."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "sidelist"
					shortinfo = "Brush faces"
					extra = ""
					notes = ""
					description = "Faces on which the overlay will be applied."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "integer"
					shortinfo = "RenderOrder"
					extra = ""
					notes = ""
					description = "Higher values render after lower values (on top). This value can be 0�3."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_5":
				{
					typename = "float"
					shortinfo = "U Start, U End"
					extra = ""
					notes = ""
					description = "Texture coordinates for the image X-axis. This normally starts at zero (left) and goes to 1 (right). Adjust values to change position and scaling."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_6":
				{
					typename = "float"
					shortinfo = "V Start, V End"
					extra = ""
					notes = ""
					description = "Texture coordinates for the image Y-axis. This normally starts at zero (top) and goes to 1 (bottom). Adjust values to change position and scaling."
					choices = {}
				}
				"Read-Only":
				{
					typename = "Vector"
					shortinfo = "Overlay Basis Origin"
					extra = ""
					notes = ""
					description = "Offset of the surface from the position of the overlay entity."
					choices = {}
				}
				"Read-Only":
				{
					typename = "Vector"
					shortinfo = "Overlay Basis U"
					extra = ""
					notes = ""
					description = "Direction of the material's X-axis."
					choices = {}
				}
				"Read-Only":
				{
					typename = "Vector"
					shortinfo = "Overlay Basis V"
					extra = ""
					notes = ""
					description = "Direction of the material's Y-axis."
					choices = {}
				}
				"Read-Only":
				{
					typename = "Vector"
					shortinfo = "Overlay Basis Normal"
					extra = ""
					notes = ""
					description = "Direction out of the surface."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_7":
				{
					typename = "float"
					shortinfo = "Start Fade Dist"
					extra = ""
					notes = ""
					description = "Distance at which the overlay starts to fade (<0 = use fademaxdist)."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_8":
				{
					typename = "float"
					shortinfo = "End Fade Dist"
					extra = ""
					notes = ""
					description = "Maximum distance at which the overlay is visible (0 = don't fade out)."
					choices = {}
				}
				"mincpulevel":
				{
					typename = "choices"
					shortinfo = "Minimum CPU Level"
					extra = "(in all games since [Left 4 Dead])"
					notes = ""
					description = "A user with a CPU level lower than this will not see this object rendered in-game. CPU levels are determined by the Effect detail setting."
					choices = {}
				}
				"maxcpulevel":
				{
					typename = "choices"
					shortinfo = "Maximum CPU Level"
					extra = "(in all games since [Left 4 Dead])"
					notes = ""
					description = "0: Default\n1: Low\n2: Medium\n3: High"
					choices = {}
				}
				"mingpulevel":
				{
					typename = "choices"
					shortinfo = "Minimum GPU Level"
					extra = "(in all games since [Left 4 Dead])"
					notes = ""
					description = "A user with a GPU level lower than this will not see this object rendered in-game. GPU levels are determined by the Shader detail setting."
					choices = {}
				}
				"maxgpulevel":
				{
					typename = "choices"
					shortinfo = "Maximum GPU Level"
					extra = "(in all games since [Left 4 Dead])"
					notes = ""
					description = "0: Default\n1: Very low\n2: Low\n3: Medium\n4: High"
					choices = {}
				}
			}
		}
		info_overlay_transition = 
		{
			description = "info_overlay_transition is a internal point entity available in all Source games."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "material"
					shortinfo = "Material"
					extra = ""
					notes = ""
					description = "Texture to use with this overlay."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "sidelist"
					shortinfo = "Brush faces"
					extra = ""
					notes = ""
					description = "Brush faces on which the overlay will be applied."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "sidelist"
					shortinfo = "Water faces"
					extra = ""
					notes = ""
					description = "Water brush faces on which the overlay will be applied."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "float"
					shortinfo = "Texcoord Length Start"
					extra = ""
					notes = ""
					description = ""
					choices = {}
				}
				"UNKNOWN_KEY_NAME_5":
				{
					typename = "float"
					shortinfo = "Texcoord Length End"
					extra = ""
					notes = ""
					description = ""
					choices = {}
				}
				"UNKNOWN_KEY_NAME_6":
				{
					typename = "float"
					shortinfo = "Texcoord Width Start"
					extra = ""
					notes = ""
					description = ""
					choices = {}
				}
				"UNKNOWN_KEY_NAME_7":
				{
					typename = "float"
					shortinfo = "Texcoord Width End"
					extra = ""
					notes = ""
					description = ""
					choices = {}
				}
				"UNKNOWN_KEY_NAME_8":
				{
					typename = "float"
					shortinfo = "Width Land"
					extra = ""
					notes = ""
					description = ""
					choices = {}
				}
				"UNKNOWN_KEY_NAME_9":
				{
					typename = "float"
					shortinfo = "Width Water"
					extra = ""
					notes = ""
					description = ""
					choices = {}
				}
				"UNKNOWN_KEY_NAME_10":
				{
					typename = "integer"
					shortinfo = "Show Debug"
					extra = ""
					notes = ""
					description = "Boolean value (0 or 1)."
					choices = {}
				}
			}
		}
		info_particle_system = 
		{
			description = "info_particle_system is a  point entity available in all Source games since [Source][Source] Source 2007. It dispatches and offers some control over a specified particle system."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "string"
					shortinfo = "Particle System Name"
					extra = ""
					notes = ""
					description = "The name of the particle system to spawn. NOT the name of a PCF file!"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "boolean"
					shortinfo = "Start Active?"
					extra = ""
					notes = ""
					description = "Whether the particle system should begin as soon as the entity spawns."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "boolean"
					shortinfo = "Flag as Weather?"
					extra = "(in all games since [Source][Source])"
					notes = ""
					description = "Is this particle system going to be used as a weather effect? If so the particle system will not be rendered if the user has disabled weather effects."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "targetname"
					shortinfo = "Control Point 1  to Control Point 63"
					extra = ""
					notes = ""
					description = "Parents a control point to the given entity's origin. If any value is left blank all those following it will be ignored. �Tip:�Control point 0(1) is the origin of the info_particle_system itself. �Note:�Because the control point is configured on the client, the entity you specify must exist there. This means that most invisible entities (info_target is an exception, as it has the 'Transmit to client' spawnflag) will not work. Your best bet is an info_particle_system, e.g. itself or another one with blank particle name."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_5":
				{
					typename = "integer"
					shortinfo = "Control Point 1's Parent  to Control Point 7's Parent"
					extra = ""
					notes = ""
					description = "The control point to act as a parent to this one."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		info_particle_target = 
		{
			description = "[Left 4 Dead 2]�info_particle_target is a  point entity available in Left 4 Dead 2. It is a target for particle system control points."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
			}
		}
		info_player_start = 
		{
			description = "info_player_start is a  point entity available in all Source games."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Master (Has priority if multiple info_player_start entities exist)(FLAG VALUE MAY BE INCORRECT)"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
			}
		}
		info_projecteddecal = 
		{
			description = "info_projecteddecal is a  point entity available in all Source games."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "decal"
					shortinfo = "texture"
					extra = ""
					notes = ""
					description = "The image to apply as a decal."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "float"
					shortinfo = "Distance"
					extra = ""
					notes = ""
					description = "Maximum distance from the origin to project the decal."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		info_radial_link_controller = 
		{
			description = "info_radial_link_controller is a  point entity available in all Source games."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"Use_Helper!":
				{
					typename = "float"
					shortinfo = "Radius"
					extra = ""
					notes = ""
					description = "Range at which node connections will be affected."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
			}
		}
		info_target = 
		{
			description = "info_target is a  point entity available in all Source games. It can be used by many different entities, and is a great generic target for any entity that needs to point, shoot, look at, or walk to a specific target. \nIt is primarily used for a target for other entities, similar to an info_null. An info_null is preferable to use as a point at target for lights, because an info_null is removed on map spawn, whereas an info_target remains. This entity can be placed with the Commentary Editor for changing the players view angles & position during a commentary."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Transmit to client (respect PVS)"
					notes = ""
				}
				"2":
				{
					category = ""
					description = "Always transmit to client (ignore PVS) (in all games since [Left 4 Dead 2]) (also in [Garry's Mod])"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
			}
		}
		info_teleport_destination = 
		{
			description = "info_teleport_destination is a  point entity available in all Source games. Legacy support only. Use info_target instead."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
			}
		}
		
	}
	logic = 
	{
		logic_choreographed_scene = 
		{
			description = "[Half-Life 2]�logic_choreographed_scene is a  point entity available in the Half-Life 2 series. It manages a choreographed scene of one or more actors.\nFor an example on how this entity can be used, see the npc_gman_overwatch prefab."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "scene"
					shortinfo = "Scene file"
					extra = ""
					notes = ""
					description = "The VCD scene file to use."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "targetname"
					shortinfo = "Target 1  to Target 8"
					extra = ""
					notes = ""
					description = "Use these keyvalues to specify the resolution of Actor or Event Target names that are using a !Target# name in the VCD."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "choices"
					shortinfo = "If an Actor is talking..."
					extra = ""
					notes = ""
					description = "What to do if an actor this scene needs is already talking when this scene is told to start.\n0�: Start immediately\n1�: Wait for actor to finish\n2�: Interrupt at next interrupt event\n3�: Cancel at next interrupt event"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "choices"
					shortinfo = "On player death"
					extra = ""
					notes = ""
					description = "What should this entity do if the player dies\n0�: Do Nothing\n1�: Cancel Script and return to AI"
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		logic_director_query = 
		{
			description = "[Left 4 Dead 2]�logic_director_query is a  point entity available in Left 4 Dead 2. It is used to output the AI Director's 'anger' value, where the director is angered by players that are performing well. This provides an opportunity for map elements to be adjusted in an attempt to appease the AI Director. Some examples include adjusting the goal distance and increasing/decreasing obscuring weather effects.\nAny number of logic_director_query entities can exist in the same map, each with their own value range and noise settings."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "int"
					shortinfo = "Min Anger Range"
					extra = ""
					notes = ""
					description = ""
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "int"
					shortinfo = "Max Anger Range"
					extra = ""
					notes = ""
					description = "The range of integers used to represent the director's anger. The value will be mapped within it. Choosing a wider range of numbers allows finer 'anger management'."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "choices"
					shortinfo = "Noise"
					extra = ""
					notes = ""
					description = "Randomises the entity's output slightly. �No noise� will cause the output being the exact remapped value of the director's anger, while �complete noise� will result in a random number within the anger range. There are various other levels in between."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		logic_game_event = 
		{
			description = "[Left 4 Dead][Left 4 Dead 2]�logic_game_event is a  point entity available in the Left 4 Dead series. This entity allows firing of game events. As of this time, there are no parameters available. See the Entity Report available in Hammer for c6m2_bedlam and c6m3_port (part of The Passing campaign) for examples."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "userid field with activator"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "string"
					shortinfo = "Game Event Name"
					extra = ""
					notes = ""
					description = "Event name (from ModEvents.res) to fire. As of this time, there are no parameters available."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		logic_scene_list_manager = 
		{
			description = "[Half-Life 2]�logic_scene_list_manager is a  point entity available in the Half-Life 2 series. It manages a list of logic_choreographed_scene entities. Store choreo scenes in them in order that they will be played by other inputs. Whenever a scene plays, the manager will remove all scenes before that one in the list. The name of another logic_scene_list_manager can be entered in a slot instead of an individual scene, which will cause all scenes in that manager to be removed when a later scene in this list is played."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "targetname"
					shortinfo = "Scene 1  to Scene16"
					extra = ""
					notes = ""
					description = "The name of a logic_choreographed_scene, or logic_scene_list_manager."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		logic_versus_random = 
		{
			description = "[Left 4 Dead][Left 4 Dead 2]�logic_versus_random is a  point entity available in the Left 4 Dead series. It fires random outputs in the first round of a versus map, and then repeats those outputs in the second round of a versus map. In other words, this entity will pick a random number or a series of random numbers in the first round of a versus game, and then repeat those numbers in the second round. This allows designers to add 'random' changes to a map (like prop_fuel_barrel placement) and repeat those for the second round."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		logic_active_autosave = 
		{
			description = "logic_active_autosave is a  point entity available in all Source games."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "integer"
					shortinfo = "Initiation Hit Points"
					extra = ""
					notes = ""
					description = "Start looking for an opportunity to save if player drops below this hitpoint level."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "integer"
					shortinfo = "Trigger Hit Points"
					extra = ""
					notes = ""
					description = "If started looking for an opportunity, save when hitpoints reach this level."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "float"
					shortinfo = "Time to trigger"
					extra = ""
					notes = ""
					description = "If > 0, how long to try and get a save off before giving up"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "float"
					shortinfo = "Dangerous time"
					extra = ""
					notes = ""
					description = "If 0, just autosave. Otherwise, do an autosavedangerous with this time threshold"
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		logic_auto = 
		{
			description = "logic_auto is a  point entity available in all Source games."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Remove on fire"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "choices"
					shortinfo = "Global State to Read"
					extra = ""
					notes = ""
					description = "If set, this specifies a global state to check before firing. The OnMapSpawn output will only fire if the global state is set. Valve's FGDs always include the HL2 global states here, but any value can be entered. See env_global for a list of default global states in each game."
					choices = {}
				}
			}
		}
		logic_autosave = 
		{
			description = "logic_autosave is a  point entity available in all Source games."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "boolean"
					shortinfo = "Force New Level Unit"
					extra = ""
					notes = ""
					description = "If set, the save will discard any savedata from previous levels, for the purpose of keeping savegame filesizes down. Can only be safely used if there is no way for the player to return to previous levels."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "integer"
					shortinfo = "Minimum Hit Points"
					extra = ""
					notes = ""
					description = "Don't save dangerous when player has less than this many hitpoints."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "integer"
					shortinfo = "Minimum Hit Points to Commit"
					extra = ""
					notes = ""
					description = "Minimum hitpoints required to commit to save. The save will be made if you have at least Minimum Hit Points, but when the autosave timer expires, the autosave is only kept if you have at least Min Hitpoints to Commit."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		logic_branch = 
		{
			description = "logic_branch is a  point entity available in all Source games."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"InitialValue":
				{
					typename = "integer"
					shortinfo = "Initial value"
					extra = ""
					notes = ""
					description = "Initial value for the boolean value (0 or 1)."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		logic_branch_listener = 
		{
			description = "logic_branch_listener is a  point entity available in all Source games."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "targetname"
					shortinfo = "Logic Branch 01  to Logic Branch 16"
					extra = ""
					notes = ""
					description = "The names of the logic_branch entities to which this entity 'listens'.  If there are fewer than sixteen, fill them in starting at the lowest number and working up and leave the unused ones blank.  Wildcards are allowed in the targetnames."
					choices = {}
				}
			}
		}
		logic_case = 
		{
			description = "logic_case is a  point entity available in all Source games."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "string"
					shortinfo = "Case 01  to Case 16"
					extra = ""
					notes = ""
					description = "The values to test against."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		logic_collision_pair = 
		{
			description = "logic_collision_pair is a  point entity available in all Source games."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "targetname"
					shortinfo = "Attachment 1"
					extra = ""
					notes = ""
					description = "The first entity."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "targetname"
					shortinfo = "Attachment 2"
					extra = ""
					notes = "Note: These targetnames are evaluated at enable time.�!activator and�!caller are not accepted."
					description = "The second entity."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "boolean"
					shortinfo = "Start with collisions disabled"
					extra = ""
					notes = ""
					description = "If Yes, starts with collisions between the pair disabled.  If No, starts with collisions between the pair enabled."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		logic_compare = 
		{
			description = "logic_compare is a  point entity available in all Source games."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "integer"
					shortinfo = "Initial value"
					extra = ""
					notes = ""
					description = "Initial value for the input value."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "integer"
					shortinfo = "Compare value"
					extra = ""
					notes = ""
					description = "The value to compare against."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		logic_lineto = 
		{
			description = "logic_lineto is a  point entity available in all Source games."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "targetname"
					shortinfo = "Start entity"
					extra = ""
					notes = ""
					description = "Name of the entity the line should start from."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "targetname"
					shortinfo = "End entity"
					extra = ""
					notes = ""
					description = "Name of the entity that line should end at."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		logic_measure_movement = 
		{
			description = "logic_measure_movement is a  point entity available in all Source games. This entity measures the movement of an entity relative to another entity and then applies that movement to a third entity.\nlogic_measure_movement's process can be described like this:\nlogic_measure_movement is very flexible and can be used to make one entity mimic the movement of another from another room (e.g. a point_camera in a script_intro). It can also be used to serve as an alternative to parenting, especially since it can simulate parenting on physics objects, which don't support parenting and would normally use phys_constraint."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "targetname"
					shortinfo = "Entity to Measure"
					extra = ""
					notes = ""
					description = "Entity whose movement you want to measure."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "targetname"
					shortinfo = "Measure Reference"
					extra = ""
					notes = ""
					description = "The movement of Entity to Measure will be measured relative to this entity."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "targetname"
					shortinfo = "Entity to Move"
					extra = ""
					notes = ""
					description = "This entity will be moved to mimic the motions of Entity to Measure."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "targetname"
					shortinfo = "Movement Reference"
					extra = ""
					notes = ""
					description = "The Entity to Move will move relative to this entity."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_5":
				{
					typename = "float"
					shortinfo = "Movement scale"
					extra = ""
					notes = ""
					description = "A scale to divide the measured movements by, before applying those movements to the Entity to Move.  1 = target entity moves as much as the measured entity,  2 = target entity moves half as far as the measured entity, and  0.5 = target entity moves twice as far as the measured entity."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_6":
				{
					typename = "choices"
					shortinfo = "Measurement Type"
					extra = ""
					notes = ""
					description = "What to measure.\n0�: Position\n1�: Eye position"
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		logic_multicompare = 
		{
			description = "logic_multicompare is a  point entity available in all Source games."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"optional":
				{
					typename = "integer"
					shortinfo = "Integer Value"
					extra = ""
					notes = ""
					description = "Initial integer value."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "boolean"
					shortinfo = "Should use Integer Value"
					extra = ""
					notes = ""
					description = "If set, compare inputs against Integer Value."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		logic_navigation = 
		{
			description = "logic_navigation is a  point entity available in all Source games. It is used to set navigation properties on other entities. Useful to make NPCs ignore physics props in their way that they can easily push."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Start On"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "targetname"
					shortinfo = "Navigation Entity"
					extra = ""
					notes = ""
					description = "Name of the entity to set navigation properties on."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "choices"
					shortinfo = "Nav Property"
					extra = ""
					notes = ""
					description = "Ignore�: NPCs Ignore this when navigating (they'll bump into it)"
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		logic_playerproxy = 
		{
			description = "logic_playerproxy is a point entity available in the following Source engine games:\n[Half-Life 2] Half-Life 2, [Portal] Portal, [Alien Swarm] Alien Swarm, [Portal 2] Portal 2, [Counter-Strike: Global Offensive] Counter-Strike: Global Offensive. It is used to relay inputs/outputs to the player and back to the world."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"damagefilter":
				{
					typename = "targetname"
					shortinfo = "Damage Filter"
					extra = ""
					notes = ""
					description = "Name of the filter_damage_type entity that controls which entities can damage us."
					choices = {}
				}
			}
		}
		logic_relay = 
		{
			description = "logic_relay is a  point entity available in all Source games. It is a message forwarder. It can be used to fire many outputs at once from just one input, or, by being disabled, to break an I/O chain. It can also be very helpful for organization and keeping you from having to edit MANY instances of the same outputs, as opposed to just one.\nAfter a logic_relay is triggered, it cannot be triggered again until all of its outputs are fired. This is useful for when a relay has a sequence of delayed outputs that shouldn't be repeated until the sequence is finished. This behavior can be disabled with the 'Allow fast retrigger' spawnflag."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Only trigger once"
					notes = ""
				}
				"2":
				{
					category = ""
					description = "Allow fast retrigger"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"StartDisabled":
				{
					typename = "boolean"
					shortinfo = "Start Disabled"
					extra = ""
					notes = ""
					description = "Stay dormant until activated (probably with the Enable input)."
					choices = {}
				}
			}
		}
		logic_script = 
		{
			description = "logic_script is a  point entity available in all Source games since [Left 4 Dead 2] Left 4 Dead 2. It is a container for VScripts. In Left 4 Dead 2, for example, this entity is used extensively for the logic in 'carnival games' found in the Dark Carnival campaign, such as Peanut Gallery, Strongman Contest, Whack-a-Stach, etc."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "targetname"
					shortinfo = "EntityGroup[0]  to EntityGroup[15]"
					extra = ""
					notes = ""
					description = "Entities to add in the EntityGroup array for the script."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = "Note: logic_script in L4D2 is missing KeyValues for Entity Scripts and Script think function. These additional keys can to be added to the entity with SmartEdit turned off as vscripts <string> and thinkfunction <string>, respectively."
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		logic_timer = 
		{
			description = "logic_timer is a  point entity available in all Source games. It fires an output at regular or random intervals. It can optionally alternate between a 'high' and a 'low' output."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Oscillator (alternates between OnTimerHigh and OnTimerLow outputs)"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "boolean"
					shortinfo = "Use Random Time"
					extra = ""
					notes = ""
					description = "Makes the entity fire at random intervals. Range of values is restricted by the next two KVs."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "float"
					shortinfo = "Minimum Random Interval"
					extra = ""
					notes = ""
					description = "If 'Use Random Time' is set, this is the minimum time between timer fires. The time will be a random number between this and the 'Maximum Random Interval'."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "float"
					shortinfo = "Maximum Random Interval"
					extra = ""
					notes = ""
					description = "If 'Use Random Time' is set, this is the maximum time between timer fires. The time will be a random number between the 'Minimum Random Interval' and this."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "float"
					shortinfo = "Refire Interval"
					extra = ""
					notes = ""
					description = "If 'Use Random Time' isn't set, this is the time between timer fires, in seconds. Make sure output delay times are less than this value."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"StartDisabled":
				{
					typename = "boolean"
					shortinfo = "Start Disabled"
					extra = ""
					notes = ""
					description = "Stay dormant until activated (probably with the Enable input)."
					choices = {}
				}
			}
		}
		
	}
	player = 
	{
		player_weaponstrip = 
		{
			description = "player_weaponstrip is a  point entity available in all Source games."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		player = 
		{
			description = "player is a  point entity available in all Source games. The player itself. This entity still exists even if the player is dead. A pointer to the player can be acquired by using UTIL_GetLocalPlayer()."
			flagnotes = ""
			flags = {}
			keyvalnotes = "Note:These keyvalues should be changed on a player with AddOutput."
			keyvalues = 
			{
				"health":
				{
					typename = "integer"
					shortinfo = "Health"
					extra = ""
					notes = ""
					description = "The player's health."
					choices = {}
				}
				"max_health":
				{
					typename = "integer"
					shortinfo = "Maximum Health"
					extra = ""
					notes = ""
					description = "The value of 'health' cannot exceed this."
					choices = {}
				}
				"solid":
				{
					typename = "choices"
					shortinfo = "Collisions"
					extra = ""
					notes = ""
					description = "Method of collision for the player.\n0: None\n1: BSP (QPhysics) !FGD\n2: Bounding Box\n3: Oriented Bounding Box !FGD\n4: Oriented Bounding Box, constrained to Yaw only !FGD\n5: Custom/Test !FGD\n6: VPhysics"
					choices = {}
				}
				"modelindex":
				{
					typename = "integer"
					shortinfo = "Model Index"
					extra = ""
					notes = ""
					description = "Changes the player's model to a precached model on the map. Not available in [Team Fortress 2]."
					choices = {}
				}
				"LightingOrigin":
				{
					typename = "targetname"
					shortinfo = "Lighting Origin"
					extra = ""
					notes = ""
					description = "Select an entity (not info_lighting!) from which to sample lighting instead of the entity's origin."
					choices = {}
				}
				"LightingOriginHack":
				{
					typename = "targetname"
					shortinfo = "Lighting Origin Offset"
					extra = ""
					notes = ""
					description = "The info_lighting_relative from which to sample lighting instead of the entity's origin. Not in [Left 4 Dead][Left 4 Dead 2]."
					choices = {}
				}
				"damagefilter":
				{
					typename = "targetname"
					shortinfo = "Damage Filter Name"
					extra = ""
					notes = ""
					description = "When this entity receives damage, it will filter by this entity."
					choices = {}
				}
				"fademindist":
				{
					typename = "float"
					shortinfo = "Start Fade Distance"
					extra = ""
					notes = ""
					description = "Distance at which the entity starts fading. If <0, the entity will disappear instantly when end fade is hit. The value will scale appropriately if the entity is in a 3D Skybox."
					choices = {}
				}
				"fademaxdist":
				{
					typename = "float"
					shortinfo = "End Fade Distance"
					extra = ""
					notes = ""
					description = "Distance at which the entity ends fading. If <0, the entity won't disappear at all. The value will scale appropriately if the entity is in a 3D Skybox."
					choices = {}
				}
				"fadescale":
				{
					typename = "float"
					shortinfo = "Fade Scale"
					extra = ""
					notes = ""
					description = "If specified in the worldspawn, or if the engine is running below DirectX 8, entities will fade out even if the fade distances above aren't specified. This value gives more control over when this happens: numbers smaller than 1 cause the entity to fade out at further distances, and greater than 1 cause it to fade out at closer distances. Using 0 turns off the forced fade altogether. See also $noforcedfade."
					choices = {}
				}
				"rendermode":
				{
					typename = "choices"
					shortinfo = "Render Mode"
					extra = ""
					notes = ""
					description = "Set a non-standard rendering mode on this entity."
					choices = 
					{
						"0" : "Normal"
						"1" : "Color"
						"2" : "Texture"
						"3" : "Glow"
						"4" : "Solid/Alphatest"
						"5" : "Additive"
						"6" : "Removed, does nothing"
						"7" : "Additive Fractional Frame"
						"8" : "Alpha Add"
						"9" : "World Space Glow"
						"10" : "Don't Render"

					}
				}
				"renderamt":
				{
					typename = "integer"
					shortinfo = "Render FX / Transparency (0 - 255)"
					extra = ""
					notes = ""
					description = "Transparency amount, requires a Render Mode other than Normal. 0 is invisible, 255 is fully visible."
					choices = {}
				}
				"rendercolor":
				{
					typename = "color255"
					shortinfo = "Render Color (R G B)"
					extra = ""
					notes = ""
					description = "Color tint."
					choices = {}
				}
				"renderfx":
				{
					typename = "choices"
					shortinfo = "Render FX"
					extra = ""
					notes = ""
					description = "Preset pattern of appearance effects."
					choices = 
					{
						"0" : "None"
						"1" : "Slow Pulse"
						"2" : "Fast Pulse"
						"3" : "Slow Wide Pulse"
						"4" : "Fast Wide Pulse"
						"5" : "Slow Fade Away"
						"6" : "Fast Fade Away"
						"7" : "Slow Become Solid"
						"8" : "Fast Become Solid"
						"9" : "Slow Strobe"
						"10" : "Fast Strobe"
						"11" : "Faster Strobe"
						"12" : "Slow Flicker"
						"13" : "Fast Flicker"
						"14" : "Constant Glow"
						"15" : "Distort"
						"16" : "Hologram (Distort + fade)"
						"17" : "Scale Up"
						"22" : "Spotlight FX"
						"23" : "Cull By Distance"
						"24" : "Fade Wider Pulse"
						"26" : "Fade Near"

					}
				}
			}
		}
		
	}
	point = 
	{
		point_deathfall_camera = 
		{
			description = "[Left 4 Dead][Left 4 Dead 2]�point_deathfall_camera is a  point entity available in the Left 4 Dead series.. It is a camera entity that players falling to their deaths look through."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "float"
					shortinfo = "Field of view"
					extra = ""
					notes = ""
					description = "Player FOV"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "float"
					shortinfo = "Seconds to reach FOV target"
					extra = ""
					notes = ""
					description = "Amount of time it should take to reach the specified FOV"
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
			}
		}
		point_nav_attribute_region = 
		{
			description = "[Left 4 Dead 2]�point_nav_attribute_region is a  point entity available in Left 4 Dead 2. It is a point entity that holds attributes to be applied to regions of nav areas during generation."
			flagnotes = ""
			flags = 
			{
				"2":
				{
					category = ""
					description = "Empty (no wanderers)"
					notes = ""
				}
				"32":
				{
					category = ""
					description = "Battlestation"
					notes = ""
				}
				"64":
				{
					category = ""
					description = "Finale"
					notes = ""
				}
				"128":
				{
					category = ""
					description = "Mission Start"
					notes = ""
				}
				"256":
				{
					category = ""
					description = "Battlefield"
					notes = ""
				}
				"1024":
				{
					category = ""
					description = "Not Clearable"
					notes = ""
				}
				"2048":
				{
					category = ""
					description = "Checkpoint"
					notes = ""
				}
				"4096":
				{
					category = ""
					description = "Obscured"
					notes = ""
				}
				"8192":
				{
					category = ""
					description = "No mobs"
					notes = ""
				}
				"32768":
				{
					category = ""
					description = "Rescue Vehicle"
					notes = ""
				}
				"65536":
				{
					category = ""
					description = "Rescue Closet"
					notes = ""
				}
				"524288":
				{
					category = ""
					description = "No Threat (L4D2 Attribute)"
					notes = ""
				}
				"1048576":
				{
					category = ""
					description = "Lying down (L4D2 Attribute)"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "vector"
					shortinfo = "Mins"
					extra = ""
					notes = ""
					description = "x y z values of the 'starting' bounding box around entity center"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "vector"
					shortinfo = "Maxs"
					extra = ""
					notes = ""
					description = "x y z values for the 'far end' bounding box"
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "choices"
					shortinfo = "Precise"
					extra = ""
					notes = ""
					description = "0�: Off\n1�: On"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "choices"
					shortinfo = "Crouch"
					extra = ""
					notes = ""
					description = "0�: Off\n1�: On"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_5":
				{
					typename = "choices"
					shortinfo = "Stairs"
					extra = ""
					notes = ""
					description = "0�: Off\n1�: On"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_6":
				{
					typename = "choices"
					shortinfo = "Tank Only"
					extra = ""
					notes = ""
					description = "0�: Off\n1�: On"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_7":
				{
					typename = "choices"
					shortinfo = "Mob Only"
					extra = ""
					notes = ""
					description = "0�: Off\n1�: On"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_8":
				{
					typename = "boolean"
					shortinfo = "Remove Attributes"
					extra = ""
					notes = ""
					description = "Should remove attributes from nav areas instead of applying them?"
					choices = {}
				}
			}
		}
		point_prop_use_target = 
		{
			description = "[Left 4 Dead 2]�point_prop_use_target is a  point entity available in Left 4 Dead 2. It is an use target for carried props. Triggers the prop's use behavior. This is the point entity that players approach and 'fills the gas' or 'drops off the cola' with. Currently only available for gas can and cola props."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Useable by Gas Can"
					notes = ""
				}
				"2":
				{
					category = ""
					description = "Useable by Cola Bottles"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "targetname"
					shortinfo = "Gas nozzle"
					extra = ""
					notes = ""
					description = "The name of the prop_dynamic gas nozzle for this use_target (scavenge mode)."
					choices = {}
				}
				"origin":
				{
					typename = "origin"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		point_script_use_target = 
		{
			description = "[Left 4 Dead 2]�point_script_use_target is a  point entity available in Left 4 Dead 2. It makes an other entity behave like a button similar to func_button_timed. The entity is intended to be programmed from an attached VScript instead of using Hammer, and calls hook functions in its own scripting scope as well as normal entity outputs. It is mainly used for run-time created entity groups together with a use target script based on usetargets/base_buildable_target.nut. \nSee the scripts in left 4 dead 2/sdk_content/scripting/scripts/vscripts/ for more examples of use."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "targetname"
					shortinfo = "Use Model"
					extra = ""
					notes = ""
					description = "The name of the entity the player will be using."
					choices = {}
				}
			}
		}
		point_viewcontrol_multiplayer = 
		{
			description = "point_viewcontrol_multiplayer is a point entity available since [Left 4 Dead] Left 4 Dead. It is a camera that controls all players' views. While it's active, the players will see out of the camera."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Disable when move finished"
					notes = ""
				}
				"2":
				{
					category = ""
					description = "Set FOV"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "float"
					shortinfo = "Field of view"
					extra = ""
					notes = ""
					description = "Player FOV"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "float"
					shortinfo = "Seconds to reach FOV target"
					extra = ""
					notes = ""
					description = "Amount of time it should take to reach the specified FOV"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "targetname"
					shortinfo = "Target Entity"
					extra = ""
					notes = ""
					description = "Entity to move to. (End of move will match origin and angles)."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "float"
					shortinfo = "Seconds to reach target entity"
					extra = ""
					notes = ""
					description = "Amount of time it should take to reach the target entity's origin and angles."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
			}
		}
		point_viewcontrol_survivor = 
		{
			description = "[Left 4 Dead][Left 4 Dead 2]�point_viewcontrol_survivor is a  point entity available in the Left 4 Dead series. It is a survivor specific camera, that can be used to zoom the camera in from a 3rd person view begining at the cameras location, automatically towards the survivors head ending with a 1st person view. Useful when used in conjuction with a point_viewcontrol_multiplayer for professional looking campaign intro scenes."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Disable when move finished"
					notes = ""
				}
				"2":
				{
					category = ""
					description = "Set FOV"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "float"
					shortinfo = "Field of view"
					extra = ""
					notes = ""
					description = "Player FOV (if Set FOV spawnflag is set)"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "float"
					shortinfo = "Seconds to reach FOV target"
					extra = ""
					notes = ""
					description = "Amount of time it should take to reach the specified FOV"
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
			}
		}
		point_script_template = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		point_anglesensor = 
		{
			description = "point_anglesensor is a  point entity available in all Source games. It detects whether another entity points in a given direction for a period of time. \nIn code it is represented by class CPointAngleSensor, defined in pointanglesensor.cpp."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Use target entity's angles (NOT position)"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "targetname"
					shortinfo = "Target Entity Name"
					extra = ""
					notes = ""
					description = "Name of the entity whose angles will be sensed."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "targetname"
					shortinfo = "Look At Entity"
					extra = ""
					notes = ""
					description = "The entity we want to check to see if the Target Entity is looking at."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "float"
					shortinfo = "Duration"
					extra = ""
					notes = ""
					description = "The amount of time the Target Entity must look at the 'Look at Entity' to trigger this entity, in seconds."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "integer"
					shortinfo = "Tolerance"
					extra = ""
					notes = ""
					description = "The tolerance, in degrees, in the checking to determine when the Target Entity is looking at the Look At Entity."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
				"StartDisabled":
				{
					typename = "boolean"
					shortinfo = "Start Disabled"
					extra = ""
					notes = ""
					description = "Stay dormant until activated (probably with the Enable input)."
					choices = {}
				}
			}
		}
		point_angularvelocitysensor = 
		{
			description = "point_angularvelocitysensor is a  point entity available in all Source games. It detects whether another entity's angular velocity meets or exceeds a threshold value. \nIn code it is represented by class CPointAngularVelocitySensor, defined in PointAngularVelocitySensor.cpp."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "targetname"
					shortinfo = "Target Entity Name"
					extra = ""
					notes = ""
					description = "Name of the entity whose angular velocity will be sensed."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "float"
					shortinfo = "Threshold Velocity"
					extra = ""
					notes = ""
					description = "The threshold angular velocity to compare against, in degrees per second."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "float"
					shortinfo = "Fire Interval"
					extra = ""
					notes = ""
					description = "Angular velocity must cross the threshold for at least this long to fire."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "vector"
					shortinfo = "Axis"
					extra = ""
					notes = ""
					description = ""
					choices = {}
				}
				"UNKNOWN_KEY_NAME_5":
				{
					typename = "boolean"
					shortinfo = "Use Axis Helper"
					extra = ""
					notes = ""
					description = "Use axis helper to determine rotation values (clockwise/counter-clockwise)."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		point_bonusmaps_accessor = 
		{
			description = "point_bonusmaps_accessor is a  point entity available in all Source games. It relays Bonus Maps changes."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "string"
					shortinfo = "File Name"
					extra = ""
					notes = ""
					description = "Link to a .BNS file with values for this map. Relative to mod's root directory."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "string"
					shortinfo = "Map Name"
					extra = ""
					notes = ""
					description = "Script entry inside above bns file of the map. �Note:�This is NOT .bsp file name."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		point_broadcastclientcommand = 
		{
			description = "point_broadcastclientcommand is a  point entity available in all Source games since [Left 4 Dead] Left 4 Dead."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		point_clientcommand = 
		{
			description = "point_clientcommand is a  point entity available in all Source games. It issues commands to the client console as if they were typed manually by the player. The client commands are sent as parameters of the Command input. One instance of the entity is ever needed in a map.\nIn multiplayer games, the commands are only executed on the Activator's client. If the activator was not a player, then it simply won't do anything (unless it's in commentary mode; then the command will be executed from the first player). If you require all players to execute the command, use the point_broadcastclientcommand entity instead.\nThis command (in conjunction with point_servercommand and the config (cfg) file) used to allow a client to cheat on multiplayer servers through changing player names, execute client commands, and other things. On multiplayer servers, any command that DOES NOT HAVE the FCVAR_SERVER_CAN_EXECUTE flag set cannot be executed by this entity; any attempt will be reported and blocked."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		point_devshot_camera = 
		{
			description = "point_devshot_camera is a  point entity available in all Source games. It is used by the -makedevshots system, which automatically takes screenshots at the position of every devshot camera in the level. \n In code, it is represented by class CPointDevShotCamera, defined in point_devshot_camera.cpp."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "string"
					shortinfo = "Camera Name"
					extra = ""
					notes = "Warning: Failing to set a name will lead to the screenshot process failing at runtime"
					description = "Used as the name of the directory to store screenshots from this camera. Must be unique within the level."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "integer"
					shortinfo = "Camera FOV"
					extra = ""
					notes = ""
					description = "FOV of this camera."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
			}
		}
		point_enable_motion_fixup = 
		{
			description = "point_enable_motion_fixup is a  point entity available in all Source games. It is used to move a motion-disabled prop when it enables motion. Parent this entity to the prop, and when the prop has its motion enabled, it will immediately teleport to the origin of this entity. \nIn code it is represented by class CEnableMotionFixup, defined in props.cpp."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
			}
		}
		point_entity_finder = 
		{
			description = "point_entity_finder is a  point entity available in all Source games since [Left 4 Dead] Left 4 Dead."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "filter"
					shortinfo = "Filter Name"
					extra = ""
					notes = ""
					description = "Filter to use to narrow set of find-able entities. See filter_activator_name for more explanation."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "targetname"
					shortinfo = "Reference Entity"
					extra = ""
					notes = ""
					description = "Name of the entity to use when evaluating criteria.  If left blank, the entity will use itself."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "choices"
					shortinfo = "Search Method"
					extra = ""
					notes = ""
					description = "After filtering down the entities to find, if there are multiple entities that it has found, this determines which entity gets sent as the !caller."
					choices = {}
				}
			}
		}
		point_gamestats_counter = 
		{
			description = "point_gamestats_counter is a  point entity available in all Source games. A generic game statistics counter."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "string"
					shortinfo = "Name of statistic counter"
					extra = ""
					notes = ""
					description = ""
					choices = {}
				}
				"origin":
				{
					typename = "origin"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"StartDisabled":
				{
					typename = "boolean"
					shortinfo = "Start Disabled"
					extra = ""
					notes = ""
					description = "Stay dormant until activated (probably with the Enable input)."
					choices = {}
				}
			}
		}
		point_hurt = 
		{
			description = "point_hurt is a  point entity available in all Source games. It does damage to all entities in a radius around itself, with a specified delay. If 'Target Entity' is specified, the damage is only done to that entity. You will need to create a brush and then move that to an entity.In code it is represented by class CPointHurt, defined in pointhurt.cpp."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"DamageTarget":
				{
					typename = "string"
					shortinfo = "Target Entity"
					extra = ""
					notes = ""
					description = "If specified, only this DamageTarget will take damage. Otherwise, all entities within the Radius will take damage. Evaluated when used. !activator accepted."
					choices = {}
				}
				"DamageRadius":
				{
					typename = "float"
					shortinfo = "Radius"
					extra = ""
					notes = ""
					description = "All entities within this radius of this entity will take damage. If a Target Entity is specified, only that entity will take damage."
					choices = {}
				}
				"Damage":
				{
					typename = "integer"
					shortinfo = "Damage"
					extra = ""
					notes = "Note: The specified amount of damage will be halved. Consider multiplying your amount of damage by 2 and using it as the Value./nNote: [Counter-Strike: Global Offensive] It is possible that unlike trigger_hurt, point_hurt does not halve the damage for the reason of the damage being the damage per second, as you can manually edit the amount of time between triggers. Damage type CRUSH should ignore armor, and generic is known to halve when dealing with armored players./nWarning: Negative values are changed to positive automatically when this entity spawns. A workaround is to change the Damage keyvalue using AddOutput."
					description = "Damage done to all affected entities each time this entity fires."
					choices = {}
				}
				"DamageDelay":
				{
					typename = "float"
					shortinfo = "Delay"
					extra = ""
					notes = ""
					description = "Delay between refires, in seconds."
					choices = {}
				}
				"DamageType":
				{
					typename = "choices"
					shortinfo = "Damage Type"
					extra = ""
					notes = ""
					description = "Type of damage to inflict on entities damaged."
					choices = {}
				}
			}
		}
		point_message = 
		{
			description = "point_message is a  point entity available in all Source games. It displays a text message in the world, at its origin.\nIn code it is represented by class CMessageEntity, defined in message_entity.cpp."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Start Disabled"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"message":
				{
					typename = "string"
					shortinfo = "Entity Message"
					extra = ""
					notes = "Warning: Never use quotation marks in the message. It will corrupt the VMF structure because of the nested quotation marks, which then must be removed manually with a text editor."
					description = "Message to show at this point."
					choices = {}
				}
				"radius":
				{
					typename = "integer"
					shortinfo = "Show message radius"
					extra = ""
					notes = ""
					description = "Distance the player must be within to see this message."
					choices = {}
				}
				"developeronly":
				{
					typename = "boolean"
					shortinfo = "Developer Only?"
					extra = ""
					notes = ""
					description = "If set, this message will only be visible when developer mode is on."
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"disableX360":
				{
					typename = "boolean"
					shortinfo = "Disable for Xbox 360"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "If Yes, disables this entity on the Xbox 360 version of Source."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"LagCompensate":
				{
					typename = "boolean"
					shortinfo = "Lag Compensation"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "Set to Yes to lag compensate this entity. Should be used very sparingly!"
					choices = {}
				}
				"is_autoaim_target":
				{
					typename = "boolean"
					shortinfo = "Is Automatic-Aim Target"
					extra = "(in all games since [Counter-Strike: Global Offensive])�!FGD"
					notes = ""
					description = "If set to 1, this entity will slow down aiming movement for consoles and joystick controllers when the entity is under the crosshairs."
					choices = {}
				}
			}
		}
		point_playermoveconstraint = 
		{
			description = "point_playermoveconstraint is a  point entity available in all Source games. It constrains players to a radius around itself, slowing them down the closer they get to the edge of the radius."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "float"
					shortinfo = "Radius"
					extra = ""
					notes = ""
					description = "Radius to constrain players to."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "float"
					shortinfo = "Constraint Width"
					extra = ""
					notes = ""
					description = "Width of the constraint edge. This is the distance in which to start slowing players down as they approach the edge of the radius."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "float"
					shortinfo = "Speed Factor"
					extra = ""
					notes = ""
					description = "Factor applied to the player's max speed as they approach the radius edge."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		point_posecontroller = 
		{
			description = "point_posecontroller is a  point entity available in all Source games since [Half-Life 2: Episode Two][Half-Life 2: Episode Two] Half-Life 2: Episode Two. It controls a pose parameter of a prop and cycles the pose clientside.\n In code, it is represented by class CPoseController, defined in point_posecontroller.cpp."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "string"
					shortinfo = "Prop Name"
					extra = ""
					notes = "Bug: This keyvalue does not receive instance fixups, making the entity mostly unusable inside instances. This can be fixed by changing the type from string to target_destination in the FGD."
					description = "Name of the prop to control."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "string"
					shortinfo = "Pose Parameter Name"
					extra = ""
					notes = ""
					description = "Name of the pose parameter to control."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "float"
					shortinfo = "Pose Parameter Value"
					extra = ""
					notes = "Bug: Pose Paramater Value suffers from rounding or overflow errors, the only fix is to constantly set a new value using SetPoseValue."
					description = "Normalized value for the pose parameter from 0.0 and 1.0 (maps to min and max range)."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "float"
					shortinfo = "Interpolation Time"
					extra = ""
					notes = "Bug: The value must have a trailing decimal (such as .0), or it will completely break the pose controller."
					description = "Number of seconds (0.0 to 10.0) for client to match absolute pose values."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_5":
				{
					typename = "boolean"
					shortinfo = "Should wrap from 0.0 to 1.0 when interpolating."
					extra = ""
					notes = ""
					description = "If set, wrap from 0.0 to 1.0 when interpolating."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_6":
				{
					typename = "float"
					shortinfo = "Cycle Frequency"
					extra = ""
					notes = ""
					description = "Base cycles per second from -10.0 to 10.0."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_7":
				{
					typename = "choices"
					shortinfo = "Frequency Modulation Type"
					extra = ""
					notes = ""
					description = "Value\nDescription\n\n\n0\nNone\n\n\n1\nSine\n\n\n2\nSquare\n\n\n3\nTriangle\n\n\n4\nSawtooth\n\n\n5\nNoise"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_8":
				{
					typename = "float"
					shortinfo = "Frequency Modulation Time Offset"
					extra = ""
					notes = ""
					description = "Modulation time offset from -1.0f to 1.0."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_9":
				{
					typename = "float"
					shortinfo = "Frequency Modulation Rate"
					extra = ""
					notes = ""
					description = "Modulation cycles per second from -10.0f to 10.0."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_10":
				{
					typename = "float"
					shortinfo = "Frequency Modulation Amplitude"
					extra = ""
					notes = ""
					description = "Modulation extents from 0.0f to 10.0."
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"disableX360":
				{
					typename = "boolean"
					shortinfo = "Disable for Xbox 360"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "If Yes, disables this entity on the Xbox 360 version of Source."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"LagCompensate":
				{
					typename = "boolean"
					shortinfo = "Lag Compensation"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "Set to Yes to lag compensate this entity. Should be used very sparingly!"
					choices = {}
				}
				"is_autoaim_target":
				{
					typename = "boolean"
					shortinfo = "Is Automatic-Aim Target"
					extra = "(in all games since [Counter-Strike: Global Offensive])�!FGD"
					notes = ""
					description = "If set to 1, this entity will slow down aiming movement for consoles and joystick controllers when the entity is under the crosshairs."
					choices = {}
				}
			}
		}
		point_proximity_sensor = 
		{
			description = "point_proximity_sensor is a  point entity available in all Source games. It continuously outputs the distance from itself to a target entity."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Test the distance as measured along the axis specified by our direction."
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "targetname"
					shortinfo = "Target Entity Name"
					extra = ""
					notes = ""
					description = "Name of the entity whose distance will be sensed."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
				"StartDisabled":
				{
					typename = "boolean"
					shortinfo = "Start Disabled"
					extra = ""
					notes = ""
					description = "Stay dormant until activated (probably with the Enable input)."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
			}
		}
		point_servercommand = 
		{
			description = "point_servercommand is a  point entity available in all Source games. It issues commands to the server console. It's used by simply placing it in a map and triggering the Command input, the parameter override should be the exact console command to run.\nIn code it is represented by class CPointServerCommand, defined in client.cpp\n ('always' = On 'disallow' = Off)"
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		point_spotlight = 
		{
			description = "point_spotlight is a  point entity available in all Source games. It is a light_dynamic with two glow sprite effects: a beam effect for viewers outside the light cone and a halo effect for viewers inside the cone. \nBy default point_spotlight is told to use the material sprites/glow_test02.vmt. You can change this if you are shipping your own binaries by going into point_spotlight.cpp in the server project, navigating to line 351 and replacing:\nThere you can define your own material.\nTo do:�Define a way to set a custom materials through this ents keyvalues"
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Start On"
					notes = ""
				}
				"2":
				{
					category = ""
					description = "No Dynamic Light"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"spotlight_length":
				{
					typename = "integer"
					shortinfo = "Spotlight Length"
					extra = ""
					notes = ""
					description = "Length of the spotlight beam."
					choices = {}
				}
				"spotlight_width":
				{
					typename = "integer"
					shortinfo = "Spotlight Width"
					extra = ""
					notes = ""
					description = "Width of the spotlight beam."
					choices = {}
				}
				"rendercolor":
				{
					typename = "color255"
					shortinfo = "Color (R G B)"
					extra = ""
					notes = ""
					description = "Spotlight color."
					choices = {}
				}
				"HDRColorScale":
				{
					typename = "float"
					shortinfo = "HDR color scale."
					extra = ""
					notes = ""
					description = "Float value to multiply sprite color by when running in HDR mode."
					choices = {}
				}
				"HaloScale":
				{
					typename = "float"
					shortinfo = "Halo size scale."
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Float value to determine the size of the halo."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
				"rendermode":
				{
					typename = "choices"
					shortinfo = "Render Mode"
					extra = ""
					notes = ""
					description = "Set a non-standard rendering mode on this entity."
					choices = 
					{
						"0" : "Normal"
						"1" : "Color"
						"2" : "Texture"
						"3" : "Glow"
						"4" : "Solid/Alphatest"
						"5" : "Additive"
						"6" : "Removed, does nothing"
						"7" : "Additive Fractional Frame"
						"8" : "Alpha Add"
						"9" : "World Space Glow"
						"10" : "Don't Render"

					}
				}
				"renderamt":
				{
					typename = "integer"
					shortinfo = "Render FX / Transparency (0 - 255)"
					extra = ""
					notes = ""
					description = "Transparency amount, requires a Render Mode other than Normal. 0 is invisible, 255 is fully visible."
					choices = {}
				}
				"rendercolor":
				{
					typename = "color255"
					shortinfo = "Render Color (R G B)"
					extra = ""
					notes = ""
					description = "Color tint."
					choices = {}
				}
				"disablereceiveshadows":
				{
					typename = "boolean"
					shortinfo = "Disable Receiving Shadows"
					extra = ""
					notes = ""
					description = "Prevent the entity from receiving shadows on itself."
					choices = {}
				}
				"renderfx":
				{
					typename = "choices"
					shortinfo = "Render FX"
					extra = ""
					notes = ""
					description = "Preset pattern of appearance effects."
					choices = 
					{
						"0" : "None"
						"1" : "Slow Pulse"
						"2" : "Fast Pulse"
						"3" : "Slow Wide Pulse"
						"4" : "Fast Wide Pulse"
						"5" : "Slow Fade Away"
						"6" : "Fast Fade Away"
						"7" : "Slow Become Solid"
						"8" : "Fast Become Solid"
						"9" : "Slow Strobe"
						"10" : "Fast Strobe"
						"11" : "Faster Strobe"
						"12" : "Slow Flicker"
						"13" : "Fast Flicker"
						"14" : "Constant Glow"
						"15" : "Distort"
						"16" : "Hologram (Distort + fade)"
						"17" : "Scale Up"
						"18" : "Glowing Shell (OBSOLETE)"
						"19" : "Clamp Minimum Scale (OBSOLETE)"
						"20" : "Environmental Rain (OBSOLETE)"
						"21" : "Environmental Snow (OBSOLETE)"
						"22" : "Spotlight FX"
						"23" : "Ragdoll"
						"24" : "Fade Wider Pulse"

					}
				}
			}
		}
		point_teleport = 
		{
			description = "point_teleport is a  point entity available in all Source games. It teleports a target entity to this position and angles. \nIf 'Teleport Home' spawn flag is set, teleports the target entity to its spawn position instead. If object is physically simulated, simulation is turned off when teleported. To teleport the player, use a target keyvalue of !player. To teleport an entity (including a player) that begins an I/O sequence, use a target keyvalue of !activator.\nIf 'Into Duck' is selected when the player appears they will be in the crouched position.\nIn code it is represented by class CPointTeleport, defined in pointteleport.cpp."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Teleport Home"
					notes = ""
				}
				"2":
				{
					category = ""
					description = "Into Duck (episodic)"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"target":
				{
					typename = "targetname"
					shortinfo = "Entity To Teleport"
					extra = ""
					notes = ""
					description = "Name of the entity that will be teleported.\n�Tip:�This can be changed if necessary by using AddOutput."
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"disableX360":
				{
					typename = "boolean"
					shortinfo = "Disable for Xbox 360"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "If Yes, disables this entity on the Xbox 360 version of Source."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"LagCompensate":
				{
					typename = "boolean"
					shortinfo = "Lag Compensation"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "Set to Yes to lag compensate this entity. Should be used very sparingly!"
					choices = {}
				}
				"is_autoaim_target":
				{
					typename = "boolean"
					shortinfo = "Is Automatic-Aim Target"
					extra = "(in all games since [Counter-Strike: Global Offensive])�!FGD"
					notes = ""
					description = "If set to 1, this entity will slow down aiming movement for consoles and joystick controllers when the entity is under the crosshairs."
					choices = {}
				}
			}
		}
		point_template = 
		{
			description = "point_template is a  point entity available in all Source games. It turns an entity, or set of entities, into a single template that can be instanced anywhere, and multiple times.\nIf there are interdependencies (entity I/O, hierarchy, or other name references) between the entities\nin the template, the entities in the template will have their names changed and the interdependencies will\nbe reconnected to the changed names. The name change format is as follows: '<original name>&0000', where the 0000\nwill be replaced with the current global template instance, so wildcard searches for '<original name>*' will still find them.\nIf you don't want the name fixup to happen, because you're only spawning the template once, or you want inputs to\ntrigger all instances of the template, check the 'Preserve entity names' spawnflag.\nWhen activated, this entity will spawn the entities in the template at the same positions, relative to this entity, that they had when this entity was created. This will be their original positions if the point_template has not been moved.\nTo spawn the template in other places, an env_entity_maker can be used.\nWhen the template is spawned, any logic_relay within the template will fire its OnSpawn output.\nName fixing is only performed on the outputs of template entities (the entities being spawned). The outputs of the point_template are not fixed, and neither are the outputs of other objects referring to template entities.\nThe special targetnames (see the targetname article) work on spawned objects, so a trigger_multiple with an output to !activator can be used to effect individual spawned objects. Wildcards can refer to all entities spawned by a fix-up-enabled point_template.\nWith fixup on, the first entity spawned will be named with &0002. If the Do not remove template spawnflag of the point_template is enabled, the unremoved template entity will have its name fixed with number &0001.\nA tutorial has been created for respawning items using this entity."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Don't remove template entities"
					notes = "Details: By default, a point_template will first remember all of its template entities, then it will kill them (remove them from the map completely). This flag overrides that, leaving the template entities in the map."
				}
				"2":
				{
					category = ""
					description = "Preserve entity names (Don't do name fixup)"
					notes = "Details: Causes the spawned entities to be named exactly as their templates were (as opposed to renamed; see above)."
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "targetname"
					shortinfo = "Template 1  to Template 16"
					extra = ""
					notes = ""
					description = "Targetname(s) to search for entities to template. These can be exact matches, or wildcards (*). If multiple entities are matched, all entities will be included in the template."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		point_tesla = 
		{
			description = "point_tesla is a  point entity available in all Source games. It creates lightning arcs around its origin similar to the ones created by Nikola Tesla's famous Tesla Coil invention.\nIn code it is represented by class CTesla, defined in tesla.cpp."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "string"
					shortinfo = "Source Entity"
					extra = ""
					notes = "Note: Although the Source Entity is evaluated at activation time,�!activator is not supported."
					description = "If specified, tesla lightning will originate from the specified entity. Otherwise, they originate from this entity."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "string"
					shortinfo = "Sound Name"
					extra = ""
					notes = ""
					description = "Sound to be played whenever lightning is created."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "sprite"
					shortinfo = "Sprite Name"
					extra = ""
					notes = ""
					description = "Material to use for the tesla lightning beams."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "color255"
					shortinfo = "Color"
					extra = ""
					notes = ""
					description = "Beam color."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_5":
				{
					typename = "integer"
					shortinfo = "Radius"
					extra = ""
					notes = ""
					description = "Radius around the origin to find a point to strike with a tesla lightning beam."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_6":
				{
					typename = "integer"
					shortinfo = "Min # of Beams"
					extra = ""
					notes = ""
					description = "Minimum number of tesla lightning beams to create when creating an arc."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_7":
				{
					typename = "integer"
					shortinfo = "Max # of Beams"
					extra = ""
					notes = ""
					description = "Maximum number of tesla lightning beams to create when creating an arc."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_8":
				{
					typename = "string"
					shortinfo = "Min Beam Width"
					extra = ""
					notes = ""
					description = "Minimum width of the tesla lightning beams."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_9":
				{
					typename = "string"
					shortinfo = "Max Beam Width"
					extra = ""
					notes = ""
					description = "Maximum width of the tesla lightning beams."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_10":
				{
					typename = "string"
					shortinfo = "Min Time Visible"
					extra = ""
					notes = ""
					description = "Minimum lifetime of the tesla lightning beams."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_11":
				{
					typename = "string"
					shortinfo = "Max Time Visible"
					extra = ""
					notes = ""
					description = "Maximum lifetime of the tesla lightning beams."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_12":
				{
					typename = "string"
					shortinfo = "Min Time Between Arcs"
					extra = ""
					notes = ""
					description = "Minimum time delay between random arcing."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_13":
				{
					typename = "string"
					shortinfo = "Max Time Between Arcs"
					extra = ""
					notes = ""
					description = "Maximum time delay between random arcing."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
			}
		}
		point_velocitysensor = 
		{
			description = "point_velocitysensor is a  point entity available in all Source games. It detects and outputs an entity's velocity."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "targetname"
					shortinfo = "Target Entity Name"
					extra = ""
					notes = ""
					description = "Name of the entity whose velocity will be sensed."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "vector"
					shortinfo = "Measurement Axis"
					extra = ""
					notes = ""
					description = "Defines a vector originating from the entity. If the measured entity moves at speed x in exactly this direction, the point_velocitysensor will output x in it's Velocity output. The magnitude of this vector is irrelevant to the calculation."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "boolean"
					shortinfo = "Start Enabled"
					extra = ""
					notes = ""
					description = "Whether or not to start enabled and active."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		point_viewcontrol = 
		{
			description = "point_viewcontrol is a  point entity available in all Source games. It is a camera entity that controls the player's view. While it's active, the player will see out of the camera.\nIn code it is represented by class CTriggerCamera, defined in triggers.cpp."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Start At Player"
					notes = "Details: Start the camera at the player's position. �Bug:�Breaks the camera movement if the player was still moving when the camera activated."
				}
				"2":
				{
					category = ""
					description = "Follow Player"
					notes = "Details: This is the same as if you set the lookat target to�!player. �Bug:�Causes camera issues in multiplayer."
				}
				"4":
				{
					category = ""
					description = "Freeze Player"
					notes = "Details: Stop recognizing input from the player."
				}
				"8":
				{
					category = ""
					description = "Infinite Hold Time"
					notes = "Details: Ignore the hold time, and stay activated until explicitly disabled."
				}
				"16":
				{
					category = ""
					description = "Snap to goal angles"
					notes = ""
				}
				"32":
				{
					category = ""
					description = "Make Player non-solid"
					notes = ""
				}
				"64":
				{
					category = ""
					description = "Interruptable by Player"
					notes = "Details: If the player presses +Use, disable."
				}
				"128":
				{
					category = ""
					description = "Set FOV�(in all games since [Alien Swarm])�(also in [Garry's Mod])�!FGD. ()�All Players�(only in [Synergy])"
					notes = "Details: Note:�Not present in [Alien Swarm]'s FGD, but present in all FGDs onward./nDetails: Controls the view of all players. �Note:�point_viewcontrol_multiplayer can be used instead in [Left 4 Dead] Left 4 Dead and later."
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"target":
				{
					typename = "targetname"
					shortinfo = "Entity to Look At"
					extra = ""
					notes = ""
					description = "Name of the entity that the camera should point at and track while active."
					choices = {}
				}
				"targetattachment":
				{
					typename = "string"
					shortinfo = "Target Attachment Name"
					extra = ""
					notes = ""
					description = "If set, the camera will focus on the specified attachment on the 'Entity to Look At'."
					choices = {}
				}
				"wait":
				{
					typename = "integer"
					shortinfo = "Hold Time"
					extra = ""
					notes = ""
					description = "The amount of time the camera should control the player's view for, after which it deactivates itself. If the camera should stay active until told to deactive, set the 'Infinite Hold Time' spawnflag."
					choices = {}
				}
				"moveto":
				{
					typename = "targetname"
					shortinfo = "Path Corner"
					extra = ""
					notes = ""
					description = "The first path corner in a track that the camera should move along once it's activated. If not specified, the camera won't move."
					choices = {}
				}
				"interpolatepositiontoplayer":
				{
					typename = "boolean"
					shortinfo = "Interpolate Position To Player"
					extra = "(only in [Half-Life 2: Episode One][Half-Life 2: Episode One][Half-Life 2: Episode Two])"
					notes = ""
					description = "Gradually interpolate player's position to here on start."
					choices = {}
				}
				"speed":
				{
					typename = "string"
					shortinfo = "Initial Speed"
					extra = ""
					notes = ""
					description = "The starting speed that the camera moves at, if it's on a path track."
					choices = {}
				}
				"acceleration":
				{
					typename = "string"
					shortinfo = "Acceleration units/sec^2"
					extra = ""
					notes = ""
					description = "The speed at which the camera accelerates to path corner's desired speeds."
					choices = {}
				}
				"deceleration":
				{
					typename = "string"
					shortinfo = "Stop Deceleration units/sec^2"
					extra = ""
					notes = ""
					description = "The speed at which the camera decelerates to path corner's desired speeds."
					choices = {}
				}
				"fov":
				{
					typename = "float"
					shortinfo = "FOV"
					extra = "(in all games since [Alien Swarm])�(also in [Garry's Mod])�!FGD"
					notes = ""
					description = "The FOV when using this camera.\n�Note:�Not present in [Alien Swarm]'s FGD, but present in all FGDs onward."
					choices = {}
				}
				"fov_rate":
				{
					typename = "float"
					shortinfo = "FOV rate"
					extra = "(in all games since [Alien Swarm])�(also in [Garry's Mod])�!FGD"
					notes = ""
					description = "How fast we change to the new FOV.\n�Note:�Not present in [Alien Swarm]'s FGD, but present in all FGDs onward."
					choices = {}
				}
				"trackspeed":
				{
					typename = "float"
					shortinfo = "Tracking Speed of the camera"
					extra = "(in all games since [Portal 2])�(also in [Garry's Mod])"
					notes = ""
					description = "The speed that the camera tries to follow its look target."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
			}
		}
		
	}
	prop = 
	{
		prop_car_alarm = 
		{
			description = "[Left 4 Dead][Left 4 Dead 2]�prop_car_alarm is a  point entity available in the Left 4 Dead series. This class is the same as prop_physics, but with special outputs used specifically for a car alarm.\nThis entity can sense people firing their weapons next to it and has outputs for that event. It will call a panic event the moment it's assigned model is touched or damaged, but then it will stop functioning like a car alarm and will effectively just be a prop_physics"
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Start Asleep."
					notes = ""
				}
				"2":
				{
					category = ""
					description = "Don't take physics damage."
					notes = ""
				}
				"4":
				{
					category = ""
					description = "Debris - Don't collide with the player or other debris."
					notes = ""
				}
				"8":
				{
					category = ""
					description = "Motion Disabled."
					notes = ""
				}
				"16":
				{
					category = "BreakableProp"
					description = "Break on Touch"
					notes = ""
				}
				"32":
				{
					category = "BreakableProp"
					description = "Break on Pressure"
					notes = ""
				}
				"64":
				{
					category = ""
					description = "Enable motion when grabbed by gravity gun."
					notes = ""
				}
				"128":
				{
					category = ""
					description = "Not affected by rotor wash."
					notes = ""
				}
				"256":
				{
					category = ""
					description = "Generate output on +use."
					notes = ""
				}
				"512":
				{
					category = ""
					description = "Prevent pickup."
					notes = ""
				}
				"1024":
				{
					category = ""
					description = "Prevent motion enable on player bump."
					notes = ""
				}
				"4096":
				{
					category = ""
					description = "Debris with trigger interaction."
					notes = ""
				}
				"8192":
				{
					category = ""
					description = "Force server-side (Multiplayer only; see sv_pushaway_clientside_size)"
					notes = ""
				}
				"1048576":
				{
					category = ""
					description = "Gravity gun can ALWAYS pick up. No matter what."
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"physdamagescale":
				{
					typename = "float"
					shortinfo = "Physics Impact Damage Scale"
					extra = ""
					notes = ""
					description = "Multiplies damage received from physics impacts. 0 means the feature is disabled for backwards compatibility."
					choices = {}
				}
				"Damagetype":
				{
					typename = "boolean"
					shortinfo = "Impact damage type"
					extra = ""
					notes = ""
					description = "If true (1), damage type is sharp and the object can slice others."
					choices = {}
				}
				"nodamageforces":
				{
					typename = "boolean"
					shortinfo = "Damaging it Doesn't Push It"
					extra = ""
					notes = ""
					description = "Whether damaging the entity applies force to it."
					choices = {}
				}
				"inertiascale":
				{
					typename = "float"
					shortinfo = "Scale Factor For Inertia"
					extra = ""
					notes = ""
					description = "Scales the angular mass of an object. Used to hack angular damage and collision response.  Confirm:Doesn't actually affect inertia?"
					choices = {}
				}
				"massscale":
				{
					typename = "float"
					shortinfo = "Mass Scale"
					extra = ""
					notes = ""
					description = "Multiplier for the object's mass."
					choices = {}
				}
				"overridescript":
				{
					typename = "string"
					shortinfo = "Override Parameters"
					extra = ""
					notes = ""
					description = "A list of physics keyvalues that are usually embedded in the model. Format is key,value,key,value,...."
					choices = {}
				}
				"damagetoenablemotion":
				{
					typename = "integer"
					shortinfo = "Health Level to Override Motion"
					extra = ""
					notes = ""
					description = "If specified, this object will start with motion disabled. Once its health has dropped below this specified amount, it will enable motion."
					choices = {}
				}
				"forcetoenablemotion":
				{
					typename = "float"
					shortinfo = "Physics Impact Force to Override Motion"
					extra = ""
					notes = ""
					description = "If specified, this object will start motion disabled. Any impact that imparts a force greater than this value will enable motion."
					choices = {}
				}
				"mindxlevel":
				{
					typename = "choices"
					shortinfo = "Minimum DX Level"
					extra = ""
					notes = ""
					description = "The entity will not exist if the engine is running outside the given range of DirectX Versions. Replaced by SystemLevelChoice from [Left 4 Dead] Left 4 Dead onwards.\n�Warning:�If these are used, the object may break when the user switches their DirectX settings."
					choices = {}
				}
				"maxdxlevel":
				{
					typename = "choices"
					shortinfo = "Maximum DX Level"
					extra = ""
					notes = ""
					description = "Default (no bounding)\nDX7\nDX8\nDX8.1\nDX9 SM2\nDX9 SM3"
					choices = {}
				}
				"mincpulevel":
				{
					typename = "choices"
					shortinfo = "Minimum CPU Level"
					extra = "(in all games since [Left 4 Dead])"
					notes = ""
					description = "A user with a CPU level lower than this will not see this object rendered in-game. CPU levels are determined by the Effect detail setting."
					choices = {}
				}
				"maxcpulevel":
				{
					typename = "choices"
					shortinfo = "Maximum CPU Level"
					extra = "(in all games since [Left 4 Dead])"
					notes = ""
					description = "0: Default\n1: Low\n2: Medium\n3: High"
					choices = {}
				}
				"mingpulevel":
				{
					typename = "choices"
					shortinfo = "Minimum GPU Level"
					extra = "(in all games since [Left 4 Dead])"
					notes = ""
					description = "A user with a GPU level lower than this will not see this object rendered in-game. GPU levels are determined by the Shader detail setting."
					choices = {}
				}
				"maxgpulevel":
				{
					typename = "choices"
					shortinfo = "Maximum GPU Level"
					extra = "(in all games since [Left 4 Dead])"
					notes = ""
					description = "0: Default\n1: Very low\n2: Low\n3: Medium\n4: High"
					choices = {}
				}
				"gmod_allowphysgun":
				{
					typename = "boolean"
					shortinfo = "Allow Physics Gun"
					extra = "(only in [Garry's Mod])"
					notes = ""
					description = "If set, players cannot use Physics Gun on this entity."
					choices = {}
				}
				"gmod_allowtools":
				{
					typename = "string"
					shortinfo = "Sandbox Tool Whitelist"
					extra = "(only in [Garry's Mod])"
					notes = ""
					description = "If set, only given tools can be used on this entity. You need to supply the tool class names, the names of the .lua files of those tools. This also includes the context menu properties!"
					choices = {}
				}
				"rendermode":
				{
					typename = "choices"
					shortinfo = "Render Mode"
					extra = ""
					notes = ""
					description = "Set a non-standard rendering mode on this entity."
					choices = 
					{
						"0" : "Normal"
						"1" : "Color"
						"2" : "Texture"
						"3" : "Glow"
						"4" : "Solid/Alphatest"
						"5" : "Additive"
						"6" : "Removed, does nothing"
						"7" : "Additive Fractional Frame"
						"8" : "Alpha Add"
						"9" : "World Space Glow"
						"10" : "Don't Render"

					}
				}
				"renderamt":
				{
					typename = "integer"
					shortinfo = "Render FX / Transparency (0 - 255)"
					extra = ""
					notes = ""
					description = "Transparency amount, requires a Render Mode other than Normal. 0 is invisible, 255 is fully visible."
					choices = {}
				}
				"rendercolor":
				{
					typename = "color255"
					shortinfo = "Render Color (R G B)"
					extra = ""
					notes = ""
					description = "Color tint."
					choices = {}
				}
				"disablereceiveshadows":
				{
					typename = "boolean"
					shortinfo = "Disable Receiving Shadows"
					extra = ""
					notes = ""
					description = "Prevent the entity from receiving shadows on itself."
					choices = {}
				}
				"renderfx":
				{
					typename = "choices"
					shortinfo = "Render FX"
					extra = ""
					notes = ""
					description = "Preset pattern of appearance effects."
					choices = 
					{
						"0" : "None"
						"1" : "Slow Pulse"
						"2" : "Fast Pulse"
						"3" : "Slow Wide Pulse"
						"4" : "Fast Wide Pulse"
						"5" : "Slow Fade Away"
						"6" : "Fast Fade Away"
						"7" : "Slow Become Solid"
						"8" : "Fast Become Solid"
						"9" : "Slow Strobe"
						"10" : "Fast Strobe"
						"11" : "Faster Strobe"
						"12" : "Slow Flicker"
						"13" : "Fast Flicker"
						"14" : "Constant Glow"
						"15" : "Distort"
						"16" : "Hologram (Distort + fade)"
						"17" : "Scale Up"
						"18" : "Glowing Shell (OBSOLETE)"
						"19" : "Clamp Minimum Scale (OBSOLETE)"
						"20" : "Environmental Rain (OBSOLETE)"
						"21" : "Environmental Snow (OBSOLETE)"
						"22" : "Spotlight FX"
						"23" : "Ragdoll"
						"24" : "Fade Wider Pulse"

					}
				}
			}
		}
		prop_car_glass = 
		{
			description = "[Left 4 Dead][Left 4 Dead 2]�prop_car_glass is a  point entity available in the Left 4 Dead series. This class is the same as prop_dynamic, with a car alarm."
			flagnotes = ""
			flags = 
			{
				"16":
				{
					category = "BreakableProp"
					description = "Break on Touch"
					notes = ""
				}
				"32":
				{
					category = "BreakableProp"
					description = "Break on Pressure"
					notes = ""
				}
				"64":
				{
					category = ""
					description = "Use Hitboxes for Renderbox"
					notes = ""
				}
				"256":
				{
					category = ""
					description = "Start with collision disabled"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"HealthCount":
				{
					typename = "integer"
					shortinfo = "Number of pain pills"
					extra = ""
					notes = ""
					description = "Number of pain pills/first aid kits inside (1-4)"
					choices = {}
				}
				"StartDisabled":
				{
					typename = "boolean"
					shortinfo = "Start Disabled"
					extra = ""
					notes = ""
					description = "Stay dormant until activated (probably with the Enable input)."
					choices = {}
				}
				"DefaultAnim":
				{
					typename = "string"
					shortinfo = "Default Animation"
					extra = ""
					notes = ""
					description = "The animation this prop will play when not doing a random or forced animation."
					choices = {}
				}
				"RandomAnimation":
				{
					typename = "boolean"
					shortinfo = "Randomly Animate"
					extra = ""
					notes = ""
					description = "Makes the prop randomly select and play animations at intervals defined by the Min/Max Random Anim Time KVs. In between the random animations, it will revert to playing Default Animation."
					choices = {}
				}
				"MinAnimTime":
				{
					typename = "float"
					shortinfo = "Min Random Anim Time"
					extra = ""
					notes = ""
					description = "Minimum time between random animations."
					choices = {}
				}
				"MaxAnimTime":
				{
					typename = "float"
					shortinfo = "Max Random Anim Time"
					extra = ""
					notes = ""
					description = "Maximum time between random animations."
					choices = {}
				}
				"updatechildren":
				{
					typename = "boolean"
					shortinfo = "Update children"
					extra = ""
					notes = ""
					description = "Confirm:A boolean set to true by default. When set to 0, any children attached to this entity as an attachment will not update. (seems like it would not have a practical use...)"
					choices = {}
				}
				"DisableBoneFollowers":
				{
					typename = "boolean"
					shortinfo = "Disable Bone Followers"
					extra = "(in all games since [Source][Source])"
					notes = ""
					description = "Disables generation of phys_bone_followers for each convex piece the model has in its collision model. phys_bone_followers can quickly eat up the edict count, so this keyvalue can be very helpful in freeing resources. This will however make the collision model no longer function ([confirm] As in become non-solid?), and the model will not be able to ragdoll anymore."
					choices = {}
				}
				"gmod_allowphysgun":
				{
					typename = "boolean"
					shortinfo = "Allow Physics Gun"
					extra = "(only in [Garry's Mod])"
					notes = ""
					description = "If set, players cannot use Physics Gun on this entity."
					choices = {}
				}
				"gmod_allowtools":
				{
					typename = "string"
					shortinfo = "Sandbox Tool Whitelist"
					extra = "(only in [Garry's Mod])"
					notes = ""
					description = "If set, only given tools can be used on this entity. You need to supply the tool class names, the names of the .lua files of those tools. This also includes the context menu properties!"
					choices = {}
				}
				"ExplodeDamage":
				{
					typename = "float"
					shortinfo = "Explosion Damage"
					extra = ""
					notes = ""
					description = "If non-zero, when this entity breaks it will create an explosion that causes the specified amount of damage. See also Explosion Radius."
					choices = {}
				}
				"ExplodeRadius":
				{
					typename = "float"
					shortinfo = "Explodsion Radius"
					extra = ""
					notes = ""
					description = "If non-zero, when this entity breaks it will create an explosion with a radius of the specified amount. See also Explosion Damage."
					choices = {}
				}
				"BreakModelMessage":
				{
					typename = "string"
					shortinfo = "Break Model Message"
					extra = ""
					notes = ""
					description = "'If set, will use this break model message instead of the normal break behavior.'  Confirm:Is this new with Source SDK 2013...? It isn't in Alien Swarm or 2007 code but is in 2013. New with L4D?"
					choices = {}
				}
				"PerformanceMode":
				{
					typename = "choices"
					shortinfo = "Performance Mode"
					extra = ""
					notes = ""
					description = "Used to limit the amount of gibs produced when this entity breaks, for performance reasons.\n0: Normal\n1: No Gibs\n2: Full Gibs on All Platforms (Xbox 360, PS3, etc)\n3: Reduced gibs"
					choices = {}
				}
				"minhealthdmg":
				{
					typename = "integer"
					shortinfo = "Min Damage to Hurt"
					extra = ""
					notes = ""
					description = "If a single hit to the object doesn't do at least this much damage, the prop won't take any of the damage it attempted to give."
					choices = {}
				}
				"PressureDelay":
				{
					typename = "float"
					shortinfo = "Pressure Delay"
					extra = ""
					notes = ""
					description = "Seconds to delay breaking from pressure. Allows creaking/groaning sounds to play."
					choices = {}
				}
				"health":
				{
					typename = "integer"
					shortinfo = "Health"
					extra = ""
					notes = ""
					description = "How close to breaking the object is."
					choices = {}
				}
				"max_health":
				{
					typename = "integer"
					shortinfo = "Maximum Health"
					extra = ""
					notes = ""
					description = "Health cannot exceed this amount."
					choices = {}
				}
				"physdamagescale":
				{
					typename = "float"
					shortinfo = "Physics Impact Damage Scale"
					extra = ""
					notes = ""
					description = "Multiplier for damage amount when this entity is hit by a physics object. With a value of 0 the entity will take no damage from physics."
					choices = {}
				}
				"BreakableType":
				{
					typename = "choices"
					shortinfo = "Breakable By"
					extra = "(in all games since [Left 4 Dead])"
					notes = ""
					description = "[Left 4 Dead][Left 4 Dead 2] only. Who can break this?\n0: Everyone\n1: All Infected\n2: Only Tanks"
					choices = {}
				}
				"model":
				{
					typename = "string"
					shortinfo = "World Model"
					extra = ""
					notes = ""
					description = "The model this entity should appear as. 128-character limit."
					choices = {}
				}
				"skin_or_ModelSkin_[Alien_Swarm]":
				{
					typename = "integer"
					shortinfo = "Skin"
					extra = ""
					notes = ""
					description = "Some models have multiple skins. This value selects from the index, starting with 0."
					choices = {}
				}
				"solid":
				{
					typename = "choices"
					shortinfo = "Collisions"
					extra = ""
					notes = ""
					description = "Method of collision for this entity.\n0: None\n1: BSP (QPhysics) !FGD �Bug:�In [Portal 2] Portal 2, if an entity using QPhysics collisions is hit by Gel, the game will crash!\n2: Bounding Box\n3: Oriented Bounding Box !FGD\n4: Oriented Bounding Box, constrained to Yaw only !FGD\n5: Custom/Test !FGD\n6: VPhysics"
					choices = {}
				}
				"body_or_SetBodyGroup":
				{
					typename = "integer"
					shortinfo = "Body Group"
					extra = "!FGD"
					notes = ""
					description = "Sets the the active $bodygroup."
					choices = {}
				}
				"hitboxset":
				{
					typename = "string"
					shortinfo = "Hitbox Set"
					extra = "!FGD"
					notes = ""
					description = "Sets the $hboxset to use."
					choices = {}
				}
				"sequence":
				{
					typename = "integer"
					shortinfo = "Sequence"
					extra = "!FGD"
					notes = ""
					description = "Default animation sequence for the model to be playing after spawning."
					choices = {}
				}
				"playbackrate":
				{
					typename = "float"
					shortinfo = "Playback Rate"
					extra = "!FGD"
					notes = ""
					description = "A multiplier of the framerate at which animations are played, negative values are accepted. Default is 1.0"
					choices = {}
				}
				"cycle":
				{
					typename = "float"
					shortinfo = "Cycle"
					extra = "!FGD"
					notes = ""
					description = "The current frame of the currently playing animation, on a range from 0-1."
					choices = {}
				}
				"LightingOrigin":
				{
					typename = "targetname"
					shortinfo = "Lighting Origin"
					extra = ""
					notes = ""
					description = "Select an entity (not info_lighting!) from which to sample lighting instead of the entity's origin."
					choices = {}
				}
				"LightingOriginHack":
				{
					typename = "targetname"
					shortinfo = "Lighting Origin Offset"
					extra = "!FGD"
					notes = ""
					description = "The info_lighting_relative from which to sample lighting instead of the entity's origin. Not in [Left 4 Dead][Left 4 Dead 2]."
					choices = {}
				}
				"damagefilter":
				{
					typename = "targetname"
					shortinfo = "Damage Filter Name"
					extra = ""
					notes = ""
					description = "When this entity receives damage, it will filter by this entity."
					choices = {}
				}
				"fademindist":
				{
					typename = "float"
					shortinfo = "Start Fade Distance"
					extra = ""
					notes = ""
					description = "Distance at which the entity starts fading. If <0, the entity will disappear instantly when end fade is hit. The value will scale appropriately if the entity is in a 3D Skybox."
					choices = {}
				}
				"fademaxdist":
				{
					typename = "float"
					shortinfo = "End Fade Distance"
					extra = ""
					notes = ""
					description = "Distance at which the entity ends fading. If <0, the entity won't disappear at all. The value will scale appropriately if the entity is in a 3D Skybox."
					choices = {}
				}
				"fadescale":
				{
					typename = "float"
					shortinfo = "Fade Scale"
					extra = ""
					notes = ""
					description = "If specified in the worldspawn, or if the engine is running below DirectX 8, entities will fade out even if the fade distances above aren't specified. This value gives more control over when this happens: numbers smaller than 1 cause the entity to fade out at further distances, and greater than 1 cause it to fade out at closer distances. Using 0 turns off the forced fade altogether. See also $noforcedfade."
					choices = {}
				}
				"rendermode":
				{
					typename = "choices"
					shortinfo = "Render Mode"
					extra = ""
					notes = ""
					description = "Set a non-standard rendering mode on this entity."
					choices = 
					{
						"0" : "Normal"
						"1" : "Color"
						"2" : "Texture"
						"3" : "Glow"
						"4" : "Solid/Alphatest"
						"5" : "Additive"
						"6" : "Removed, does nothing"
						"7" : "Additive Fractional Frame"
						"8" : "Alpha Add"
						"9" : "World Space Glow"
						"10" : "Don't Render"

					}
				}
				"renderamt":
				{
					typename = "integer"
					shortinfo = "Render FX / Transparency (0 - 255)"
					extra = ""
					notes = ""
					description = "Transparency amount, requires a Render Mode other than Normal. 0 is invisible, 255 is fully visible."
					choices = {}
				}
				"rendercolor":
				{
					typename = "color255"
					shortinfo = "Render Color (R G B)"
					extra = ""
					notes = ""
					description = "Color tint."
					choices = {}
				}
				"renderfx":
				{
					typename = "choices"
					shortinfo = "Render FX"
					extra = ""
					notes = ""
					description = "Preset pattern of appearance effects."
					choices = 
					{
						"0" : "None"
						"1" : "Slow Pulse"
						"2" : "Fast Pulse"
						"3" : "Slow Wide Pulse"
						"4" : "Fast Wide Pulse"
						"5" : "Slow Fade Away"
						"6" : "Fast Fade Away"
						"7" : "Slow Become Solid"
						"8" : "Fast Become Solid"
						"9" : "Slow Strobe"
						"10" : "Fast Strobe"
						"11" : "Faster Strobe"
						"12" : "Slow Flicker"
						"13" : "Fast Flicker"
						"14" : "Constant Glow"
						"15" : "Distort"
						"16" : "Hologram (Distort + fade)"
						"17" : "Scale Up"
						"22" : "Spotlight FX"
						"23" : "Cull By Distance"
						"24" : "Fade Wider Pulse"
						"26" : "Fade Near"

					}
				}
			}
		}
		prop_door_rotating_checkpoint = 
		{
			description = "[Left 4 Dead][Left 4 Dead 2]�prop_door_rotating_checkpoint is a  point entity available in the Left 4 Dead series. It is a special variant of prop_door_rotating for checkpoint doors in the world."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Starts Open"
					notes = ""
				}
				"2048":
				{
					category = ""
					description = "Starts locked"
					notes = ""
				}
				"4096":
				{
					category = ""
					description = "Door silent (No sound, and does not alert NPCs)"
					notes = ""
				}
				"8192":
				{
					category = ""
					description = "Use closes"
					notes = ""
				}
				"16384":
				{
					category = ""
					description = "Door silent to NPCs (Does not alert NPCs)"
					notes = ""
				}
				"32768":
				{
					category = ""
					description = "Ignore player +USE"
					notes = ""
				}
				"524288":
				{
					category = ""
					description = "Start Unbreakable (in all games since [Left 4 Dead]). () Start Breakable (in all games since [Counter-Strike\t Global Offensive]) (also in [Garry's Mod])"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"slavename":
				{
					typename = "targetname"
					shortinfo = "Slave name"
					extra = ""
					notes = ""
					description = "Name of any door(s) that should open and close at the same time as this one. You could also give them all the same name."
					choices = {}
				}
				"hardware":
				{
					typename = "choices"
					shortinfo = "Hardware Type"
					extra = ""
					notes = ""
					description = "The type of mechanism used to open the door (handle, push bar, keypad). The mechanism only appears in the game, not in Hammer.\nNone\nLever (i.e. door handle)\nPush bar\nKeypad �Note:� Keypad hardware has no model ingame."
					choices = {}
				}
				"spawnpos":
				{
					typename = "choices"
					shortinfo = "Spawn Position"
					extra = ""
					notes = ""
					description = "State the door should begin in. Check the door's angles to see forward/backward orientation.\nClosed\nOpen forward\nOpen back\nAjar"
					choices = {}
				}
				"ajarangles":
				{
					typename = "angle"
					shortinfo = "Ajar Angles"
					extra = ""
					notes = ""
					description = "If 'Spawn Position' is 'ajar', these are the angles to spawn at instead of being open or closed."
					choices = {}
				}
				"axis":
				{
					typename = "axis"
					shortinfo = "Hinge Axis"
					extra = ""
					notes = "Note: Despite Hinge Axis values, the door can only rotate on the Z Axis"
					description = "To do"
					choices = {}
				}
				"distance":
				{
					typename = "float"
					shortinfo = "Rotation Distance"
					extra = ""
					notes = ""
					description = "Number of degrees that the door should open, both forward and backward."
					choices = {}
				}
				"speed":
				{
					typename = "integer"
					shortinfo = "Speed"
					extra = ""
					notes = ""
					description = "In degrees/second."
					choices = {}
				}
				"soundopenoverride":
				{
					typename = "string"
					shortinfo = "Fully Open Sound"
					extra = ""
					notes = ""
					description = "Sound played when the door has finished opening."
					choices = {}
				}
				"soundcloseoverride":
				{
					typename = "string"
					shortinfo = "Fully Closed Sound"
					extra = ""
					notes = ""
					description = "Sound played when the door has finished closing."
					choices = {}
				}
				"soundmoveoverride":
				{
					typename = "string"
					shortinfo = "Moving Sound"
					extra = ""
					notes = ""
					description = "Sound played when the door starts to move."
					choices = {}
				}
				"soundlockedoverride":
				{
					typename = "string"
					shortinfo = "Locked Sound"
					extra = ""
					notes = ""
					description = "Optional overrides to the sounds played by the door. Sound played when the player tries to open the door, and fails because it's locked."
					choices = {}
				}
				"soundunlockedoverride":
				{
					typename = "string"
					shortinfo = "Unlocked Sound"
					extra = ""
					notes = ""
					description = "Optional overrides to the sounds played by the door. Sound played when the door is unlocked."
					choices = {}
				}
				"returndelay":
				{
					typename = "integer"
					shortinfo = "Delay Before close"
					extra = ""
					notes = ""
					description = "Number of seconds the door waits until closing by itself. -1 means never auto-close."
					choices = {}
				}
				"dmg":
				{
					typename = "integer"
					shortinfo = "Damage Inflicted When Blocked"
					extra = ""
					notes = ""
					description = "If an entity is blocking the door from moving, inflict this much damage per frame."
					choices = {}
				}
				"candamageplayer":
				{
					typename = "boolean"
					shortinfo = "Can Damage Player"
					extra = "(only in [INFRA])"
					notes = ""
					description = "If set, this door will kill the player blocking it. Used for the large blast doors in infra_c7_m2_bunker.\n�Note:�This replaces the 'Damage Inflicted When Blocked' keyvalue in [INFRA] INFRA."
					choices = {}
				}
				"forceclosed":
				{
					typename = "boolean"
					shortinfo = "Force Closed"
					extra = ""
					notes = ""
					description = "If set, this door will close no matter what. Useful for doors that have to close even if the player tries to block them with objects."
					choices = {}
				}
				"opendir":
				{
					typename = "choices"
					shortinfo = "Open Direction"
					extra = ""
					notes = ""
					description = "Force the door to open only forwards or only backwards. It will normally try to swing away from the entity that opened it, unless it is being blocked on the other side.\nBoth directions\nForward only\nBackward only"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "integer"
					shortinfo = "Health"
					extra = "[Obsolete]"
					notes = ""
					description = "Deprecated.�Health for the door."
					choices = {}
				}
				"glowdist":
				{
					typename = "integer"
					shortinfo = "Glow Distance"
					extra = "(in all games since [Counter-Strike: Global Offensive])"
					notes = ""
					description = "Default is 1024.\nTo do:�Same as L4D2's Glow Range?"
					choices = {}
				}
				"glowenabled":
				{
					typename = "boolean"
					shortinfo = "Does the prop glow by default?"
					extra = "(in all games since [Counter-Strike: Global Offensive])"
					notes = ""
					description = "Enables the door to glow. Default is set to off."
					choices = {}
				}
				"glowcolor":
				{
					typename = "color255"
					shortinfo = "Glow Color"
					extra = "(in all games since [Counter-Strike: Global Offensive])"
					notes = ""
					description = "The color of the glow (if enabled)."
					choices = {}
				}
				"glowstate":
				{
					typename = "choices"
					shortinfo = "Glow State"
					extra = "(only in [Left 4 Dead 2])"
					notes = ""
					description = "OFF\n+use\nlook-at\nON"
					choices = {}
				}
				"glowrange":
				{
					typename = "integer"
					shortinfo = "Glow Range"
					extra = "(only in [Left 4 Dead 2])"
					notes = ""
					description = "Range at which the glow becomes visible. 0 means always visible."
					choices = {}
				}
				"glowrangemin":
				{
					typename = "integer"
					shortinfo = "Glow Range Min"
					extra = "(only in [Left 4 Dead 2])"
					notes = ""
					description = "Range at which the glow stops being visible. 0 means always visible."
					choices = {}
				}
				"glowcolor":
				{
					typename = "color255"
					shortinfo = "Glow Color Override (R G B)"
					extra = "(only in [Left 4 Dead 2])"
					notes = ""
					description = "Change the render color of the glow."
					choices = {}
				}
				"model":
				{
					typename = "string"
					shortinfo = "World Model"
					extra = ""
					notes = ""
					description = "The model this entity should appear as. 128-character limit."
					choices = {}
				}
				"skin":
				{
					typename = "integer"
					shortinfo = "Skin"
					extra = ""
					notes = ""
					description = "Some models have multiple skins. This value selects from the index, starting with 0. �Tip:�Hammer's model browser automatically updates this value if you use it to view different skins."
					choices = {}
				}
				"modelscale":
				{
					typename = "float"
					shortinfo = "Model Scale"
					extra = "(in all games since [Source][Source])"
					notes = ""
					description = "A multiplier for the size of the model."
					choices = {}
				}
				"disableshadows":
				{
					typename = "boolean"
					shortinfo = "Disable Shadows"
					extra = ""
					notes = ""
					description = "Prevents the entity from creating cheap render-to-texture shadows, or lightmap shadows if the entity is a prop_static. Does not affect shadow mapping."
					choices = {}
				}
				"disableshadowdepth":
				{
					typename = "boolean"
					shortinfo = "Disable ShadowDepth"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable rendering into shadow depth (for projected textures) for this entity."
					choices = {}
				}
				"shadowdepthnocache":
				{
					typename = "choices"
					shortinfo = "Projected Texture Cache"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to hint projected texture system whether it is sufficient to cache shadow volume of this entity or to force render it every frame instead.\n0�: Default\n1�: No cache - render every frame\n2�: Cache it - render only once"
					choices = {}
				}
				"disableflashlight":
				{
					typename = "boolean"
					shortinfo = "Disable flashlight"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable projected texture lighting and shadows on this entity."
					choices = {}
				}
				"drawinfastreflection":
				{
					typename = "boolean"
					shortinfo = "Render in Fast Reflections"
					extra = "(in all games since [Portal 2])"
					notes = "Note: These keyvalues may not be available in some FGDs. When used in a game before L4D, there is an abrupt render cut-off rather than an actual fade."
					description = "If enabled, this entity will render in fast water reflections (i.e. when a water material specifies $reflectonlymarkedentities) and in the world impostor pass."
					choices = {}
				}
				"fademindist":
				{
					typename = "float"
					shortinfo = "Start Fade Dist"
					extra = "(in all games since [Left 4 Dead])"
					notes = ""
					description = "Distance at which the prop starts to fade."
					choices = {}
				}
				"fademaxdist":
				{
					typename = "float"
					shortinfo = "End Fade Dist"
					extra = "(in all games since [Left 4 Dead])"
					notes = ""
					description = "Max fade distance at which the prop is visible.\nIf start fade is <0, the prop will disappear instantly when end fade is hit.\nIf end fade is <0, the prop won't disappear at all. (This is the default behaviour.)\nThe values will scale appropriately if the prop is in a 3D Skybox."
					choices = {}
				}
				"fadescale":
				{
					typename = "float"
					shortinfo = "Fade Scale"
					extra = "(in all games since [Left 4 Dead])"
					notes = ""
					description = "If you specify so in worldspawn, or if the engine is running below DirectX 8 (DX7 in Ep1), props will fade out even if the fade distances above aren't specified. This value gives you some control over when this happens: numbers smaller than 1 cause the prop to fade out at further distances, and greater than 1 cause it to fade out at closer distances. Using 0 turns off the forced fade altogether. See also the QC command $noforcedfade."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"gmod_allowphysgun":
				{
					typename = "boolean"
					shortinfo = "Allow Physics Gun"
					extra = "(only in [Garry's Mod])"
					notes = ""
					description = "If set, players cannot use Physics Gun on this entity."
					choices = {}
				}
				"gmod_allowtools":
				{
					typename = "string"
					shortinfo = "Sandbox Tool Whitelist"
					extra = "(only in [Garry's Mod])"
					notes = ""
					description = "If set, only given tools can be used on this entity. You need to supply the tool class names, the names of the .lua files of those tools. This also includes the context menu properties!"
					choices = {}
				}
			}
		}
		prop_fuel_barrel = 
		{
			description = "[Left 4 Dead][Left 4 Dead 2]�prop_fuel_barrel is a  point entity available in the Left 4 Dead series. This is a special destructible physics prop that blows up in several stages when shot."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Start Asleep"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "float"
					shortinfo = "Start Fade Dist/Pixels"
					extra = ""
					notes = ""
					description = "Distance at which the prop starts to fade (<0 = subtract from fademaxdist)."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "float"
					shortinfo = "End Fade Dist/Pixels"
					extra = ""
					notes = ""
					description = "Maximum distance at which the prop is visible (0 = don't fade out)."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "float"
					shortinfo = "Fade Scale"
					extra = ""
					notes = ""
					description = "If you specify a fade in the worldspawn, or if the engine is running under low end/medium end/XBox360, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified. This scale factor gives you some control over the fade. Using 0 here turns off the forcible fades. Numbers smaller than 1 cause the prop to fade out at further distances, and greater than 1 cause it to fade out at closer distances."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "model_path"
					shortinfo = "Base Piece"
					extra = ""
					notes = ""
					description = ""
					choices = {}
				}
				"UNKNOWN_KEY_NAME_5":
				{
					typename = "model_path"
					shortinfo = "Flying Piece 1"
					extra = ""
					notes = ""
					description = ""
					choices = {}
				}
				"UNKNOWN_KEY_NAME_6":
				{
					typename = "model_path"
					shortinfo = "Flying Piece 2"
					extra = ""
					notes = ""
					description = ""
					choices = {}
				}
				"UNKNOWN_KEY_NAME_7":
				{
					typename = "model_path"
					shortinfo = "Flying Piece 3"
					extra = ""
					notes = ""
					description = ""
					choices = {}
				}
				"UNKNOWN_KEY_NAME_8":
				{
					typename = "model_path"
					shortinfo = "Flying Piece 4"
					extra = ""
					notes = ""
					description = ""
					choices = {}
				}
				"UNKNOWN_KEY_NAME_9":
				{
					typename = "string"
					shortinfo = "Detonation Particles"
					extra = ""
					notes = ""
					description = ""
					choices = {}
				}
				"UNKNOWN_KEY_NAME_10":
				{
					typename = "string"
					shortinfo = "Flying Piece Particles"
					extra = ""
					notes = ""
					description = ""
					choices = {}
				}
				"UNKNOWN_KEY_NAME_11":
				{
					typename = "sound"
					shortinfo = "Sound played when the object explodes."
					extra = ""
					notes = ""
					description = ""
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
				"model":
				{
					typename = "string"
					shortinfo = "World Model"
					extra = ""
					notes = ""
					description = "The model this entity should appear as. 128-character limit."
					choices = {}
				}
				"skin":
				{
					typename = "integer"
					shortinfo = "Skin"
					extra = ""
					notes = ""
					description = "Some models have multiple skins. This value selects from the index, starting with 0. �Tip:�Hammer's model browser automatically updates this value if you use it to view different skins."
					choices = {}
				}
				"modelscale":
				{
					typename = "float"
					shortinfo = "Model Scale"
					extra = "(in all games since [Source][Source])"
					notes = ""
					description = "A multiplier for the size of the model."
					choices = {}
				}
				"disableshadows":
				{
					typename = "boolean"
					shortinfo = "Disable Shadows"
					extra = ""
					notes = ""
					description = "Prevents the entity from creating cheap render-to-texture shadows, or lightmap shadows if the entity is a prop_static. Does not affect shadow mapping."
					choices = {}
				}
				"disableshadowdepth":
				{
					typename = "boolean"
					shortinfo = "Disable ShadowDepth"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable rendering into shadow depth (for projected textures) for this entity."
					choices = {}
				}
				"shadowdepthnocache":
				{
					typename = "choices"
					shortinfo = "Projected Texture Cache"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to hint projected texture system whether it is sufficient to cache shadow volume of this entity or to force render it every frame instead.\n0�: Default\n1�: No cache - render every frame\n2�: Cache it - render only once"
					choices = {}
				}
				"disableflashlight":
				{
					typename = "boolean"
					shortinfo = "Disable flashlight"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable projected texture lighting and shadows on this entity."
					choices = {}
				}
				"drawinfastreflection":
				{
					typename = "boolean"
					shortinfo = "Render in Fast Reflections"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "If enabled, this entity will render in fast water reflections (i.e. when a water material specifies $reflectonlymarkedentities) and in the world impostor pass."
					choices = {}
				}
			}
		}
		prop_health_cabinet = 
		{
			description = "[Left 4 Dead][Left 4 Dead 2]�prop_health_cabinet is a  point entity available in the Left 4 Dead series. It is a cabinet containing first aid kits and pain pills. The decision between first aid kits and pain pills cannot be set via entity properties, the AI Director will change the contents of the cabinet depending on how the players are doing. If the cabinet itself is placed over a navigation mesh marked as CHECKPOINT or FINALE it will spawn first aid kits instead of pills."
			flagnotes = ""
			flags = 
			{
				"16":
				{
					category = "BreakableProp"
					description = "Break on Touch"
					notes = ""
				}
				"32":
				{
					category = "BreakableProp"
					description = "Break on Pressure"
					notes = ""
				}
				"64":
				{
					category = ""
					description = "Use Hitboxes for Renderbox"
					notes = ""
				}
				"256":
				{
					category = ""
					description = "Start with collision disabled"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"HealthCount":
				{
					typename = "integer"
					shortinfo = "Number of pain pills"
					extra = ""
					notes = ""
					description = "Number of pain pills/first aid kits inside (1-4)"
					choices = {}
				}
				"StartDisabled":
				{
					typename = "boolean"
					shortinfo = "Start Disabled"
					extra = ""
					notes = ""
					description = "Stay dormant until activated (probably with the Enable input)."
					choices = {}
				}
				"DefaultAnim":
				{
					typename = "string"
					shortinfo = "Default Animation"
					extra = ""
					notes = ""
					description = "The animation this prop will play when not doing a random or forced animation."
					choices = {}
				}
				"RandomAnimation":
				{
					typename = "boolean"
					shortinfo = "Randomly Animate"
					extra = ""
					notes = ""
					description = "Makes the prop randomly select and play animations at intervals defined by the Min/Max Random Anim Time KVs. In between the random animations, it will revert to playing Default Animation."
					choices = {}
				}
				"MinAnimTime":
				{
					typename = "float"
					shortinfo = "Min Random Anim Time"
					extra = ""
					notes = ""
					description = "Minimum time between random animations."
					choices = {}
				}
				"MaxAnimTime":
				{
					typename = "float"
					shortinfo = "Max Random Anim Time"
					extra = ""
					notes = ""
					description = "Maximum time between random animations."
					choices = {}
				}
				"updatechildren":
				{
					typename = "boolean"
					shortinfo = "Update children"
					extra = ""
					notes = ""
					description = "Confirm:A boolean set to true by default. When set to 0, any children attached to this entity as an attachment will not update. (seems like it would not have a practical use...)"
					choices = {}
				}
				"DisableBoneFollowers":
				{
					typename = "boolean"
					shortinfo = "Disable Bone Followers"
					extra = "(in all games since [Source][Source])"
					notes = ""
					description = "Disables generation of phys_bone_followers for each convex piece the model has in its collision model. phys_bone_followers can quickly eat up the edict count, so this keyvalue can be very helpful in freeing resources. This will however make the collision model no longer function ([confirm] As in become non-solid?), and the model will not be able to ragdoll anymore."
					choices = {}
				}
				"gmod_allowphysgun":
				{
					typename = "boolean"
					shortinfo = "Allow Physics Gun"
					extra = "(only in [Garry's Mod])"
					notes = ""
					description = "If set, players cannot use Physics Gun on this entity."
					choices = {}
				}
				"gmod_allowtools":
				{
					typename = "string"
					shortinfo = "Sandbox Tool Whitelist"
					extra = "(only in [Garry's Mod])"
					notes = ""
					description = "If set, only given tools can be used on this entity. You need to supply the tool class names, the names of the .lua files of those tools. This also includes the context menu properties!"
					choices = {}
				}
				"ExplodeDamage":
				{
					typename = "float"
					shortinfo = "Explosion Damage"
					extra = ""
					notes = ""
					description = "If non-zero, when this entity breaks it will create an explosion that causes the specified amount of damage. See also Explosion Radius."
					choices = {}
				}
				"ExplodeRadius":
				{
					typename = "float"
					shortinfo = "Explodsion Radius"
					extra = ""
					notes = ""
					description = "If non-zero, when this entity breaks it will create an explosion with a radius of the specified amount. See also Explosion Damage."
					choices = {}
				}
				"BreakModelMessage":
				{
					typename = "string"
					shortinfo = "Break Model Message"
					extra = ""
					notes = ""
					description = "'If set, will use this break model message instead of the normal break behavior.'  Confirm:Is this new with Source SDK 2013...? It isn't in Alien Swarm or 2007 code but is in 2013. New with L4D?"
					choices = {}
				}
				"PerformanceMode":
				{
					typename = "choices"
					shortinfo = "Performance Mode"
					extra = ""
					notes = ""
					description = "Used to limit the amount of gibs produced when this entity breaks, for performance reasons.\n0: Normal\n1: No Gibs\n2: Full Gibs on All Platforms (Xbox 360, PS3, etc)\n3: Reduced gibs"
					choices = {}
				}
				"minhealthdmg":
				{
					typename = "integer"
					shortinfo = "Min Damage to Hurt"
					extra = ""
					notes = ""
					description = "If a single hit to the object doesn't do at least this much damage, the prop won't take any of the damage it attempted to give."
					choices = {}
				}
				"PressureDelay":
				{
					typename = "float"
					shortinfo = "Pressure Delay"
					extra = ""
					notes = ""
					description = "Seconds to delay breaking from pressure. Allows creaking/groaning sounds to play."
					choices = {}
				}
				"health":
				{
					typename = "integer"
					shortinfo = "Health"
					extra = ""
					notes = ""
					description = "How close to breaking the object is."
					choices = {}
				}
				"max_health":
				{
					typename = "integer"
					shortinfo = "Maximum Health"
					extra = ""
					notes = ""
					description = "Health cannot exceed this amount."
					choices = {}
				}
				"physdamagescale":
				{
					typename = "float"
					shortinfo = "Physics Impact Damage Scale"
					extra = ""
					notes = ""
					description = "Multiplier for damage amount when this entity is hit by a physics object. With a value of 0 the entity will take no damage from physics."
					choices = {}
				}
				"BreakableType":
				{
					typename = "choices"
					shortinfo = "Breakable By"
					extra = "(in all games since [Left 4 Dead])"
					notes = ""
					description = "[Left 4 Dead][Left 4 Dead 2] only. Who can break this?\n0: Everyone\n1: All Infected\n2: Only Tanks"
					choices = {}
				}
				"model":
				{
					typename = "string"
					shortinfo = "World Model"
					extra = ""
					notes = ""
					description = "The model this entity should appear as. 128-character limit."
					choices = {}
				}
				"skin_or_ModelSkin_[Alien_Swarm]":
				{
					typename = "integer"
					shortinfo = "Skin"
					extra = ""
					notes = ""
					description = "Some models have multiple skins. This value selects from the index, starting with 0."
					choices = {}
				}
				"solid":
				{
					typename = "choices"
					shortinfo = "Collisions"
					extra = ""
					notes = ""
					description = "Method of collision for this entity.\n0: None\n1: BSP (QPhysics) !FGD �Bug:�In [Portal 2] Portal 2, if an entity using QPhysics collisions is hit by Gel, the game will crash!\n2: Bounding Box\n3: Oriented Bounding Box !FGD\n4: Oriented Bounding Box, constrained to Yaw only !FGD\n5: Custom/Test !FGD\n6: VPhysics"
					choices = {}
				}
				"body_or_SetBodyGroup":
				{
					typename = "integer"
					shortinfo = "Body Group"
					extra = "!FGD"
					notes = ""
					description = "Sets the the active $bodygroup."
					choices = {}
				}
				"hitboxset":
				{
					typename = "string"
					shortinfo = "Hitbox Set"
					extra = "!FGD"
					notes = ""
					description = "Sets the $hboxset to use."
					choices = {}
				}
				"sequence":
				{
					typename = "integer"
					shortinfo = "Sequence"
					extra = "!FGD"
					notes = ""
					description = "Default animation sequence for the model to be playing after spawning."
					choices = {}
				}
				"playbackrate":
				{
					typename = "float"
					shortinfo = "Playback Rate"
					extra = "!FGD"
					notes = ""
					description = "A multiplier of the framerate at which animations are played, negative values are accepted. Default is 1.0"
					choices = {}
				}
				"cycle":
				{
					typename = "float"
					shortinfo = "Cycle"
					extra = "!FGD"
					notes = ""
					description = "The current frame of the currently playing animation, on a range from 0-1."
					choices = {}
				}
				"LightingOrigin":
				{
					typename = "targetname"
					shortinfo = "Lighting Origin"
					extra = ""
					notes = ""
					description = "Select an entity (not info_lighting!) from which to sample lighting instead of the entity's origin."
					choices = {}
				}
				"LightingOriginHack":
				{
					typename = "targetname"
					shortinfo = "Lighting Origin Offset"
					extra = "!FGD"
					notes = ""
					description = "The info_lighting_relative from which to sample lighting instead of the entity's origin. Not in [Left 4 Dead][Left 4 Dead 2]."
					choices = {}
				}
				"damagefilter":
				{
					typename = "targetname"
					shortinfo = "Damage Filter Name"
					extra = ""
					notes = ""
					description = "When this entity receives damage, it will filter by this entity."
					choices = {}
				}
				"fademindist":
				{
					typename = "float"
					shortinfo = "Start Fade Distance"
					extra = ""
					notes = ""
					description = "Distance at which the entity starts fading. If <0, the entity will disappear instantly when end fade is hit. The value will scale appropriately if the entity is in a 3D Skybox."
					choices = {}
				}
				"fademaxdist":
				{
					typename = "float"
					shortinfo = "End Fade Distance"
					extra = ""
					notes = ""
					description = "Distance at which the entity ends fading. If <0, the entity won't disappear at all. The value will scale appropriately if the entity is in a 3D Skybox."
					choices = {}
				}
				"fadescale":
				{
					typename = "float"
					shortinfo = "Fade Scale"
					extra = ""
					notes = ""
					description = "If specified in the worldspawn, or if the engine is running below DirectX 8, entities will fade out even if the fade distances above aren't specified. This value gives more control over when this happens: numbers smaller than 1 cause the entity to fade out at further distances, and greater than 1 cause it to fade out at closer distances. Using 0 turns off the forced fade altogether. See also $noforcedfade."
					choices = {}
				}
				"rendermode":
				{
					typename = "choices"
					shortinfo = "Render Mode"
					extra = ""
					notes = ""
					description = "Set a non-standard rendering mode on this entity."
					choices = 
					{
						"0" : "Normal"
						"1" : "Color"
						"2" : "Texture"
						"3" : "Glow"
						"4" : "Solid/Alphatest"
						"5" : "Additive"
						"6" : "Removed, does nothing"
						"7" : "Additive Fractional Frame"
						"8" : "Alpha Add"
						"9" : "World Space Glow"
						"10" : "Don't Render"

					}
				}
				"renderamt":
				{
					typename = "integer"
					shortinfo = "Render FX / Transparency (0 - 255)"
					extra = ""
					notes = ""
					description = "Transparency amount, requires a Render Mode other than Normal. 0 is invisible, 255 is fully visible."
					choices = {}
				}
				"rendercolor":
				{
					typename = "color255"
					shortinfo = "Render Color (R G B)"
					extra = ""
					notes = ""
					description = "Color tint."
					choices = {}
				}
				"renderfx":
				{
					typename = "choices"
					shortinfo = "Render FX"
					extra = ""
					notes = ""
					description = "Preset pattern of appearance effects."
					choices = 
					{
						"0" : "None"
						"1" : "Slow Pulse"
						"2" : "Fast Pulse"
						"3" : "Slow Wide Pulse"
						"4" : "Fast Wide Pulse"
						"5" : "Slow Fade Away"
						"6" : "Fast Fade Away"
						"7" : "Slow Become Solid"
						"8" : "Fast Become Solid"
						"9" : "Slow Strobe"
						"10" : "Fast Strobe"
						"11" : "Faster Strobe"
						"12" : "Slow Flicker"
						"13" : "Fast Flicker"
						"14" : "Constant Glow"
						"15" : "Distort"
						"16" : "Hologram (Distort + fade)"
						"17" : "Scale Up"
						"22" : "Spotlight FX"
						"23" : "Cull By Distance"
						"24" : "Fade Wider Pulse"
						"26" : "Fade Near"

					}
				}
			}
		}
		prop_minigun = 
		{
			description = "[Left 4 Dead][Left 4 Dead 2]�prop_minigun is a  point entity available in the Left 4 Dead series. It is an usable mounted minigun that is normally used in the rescue point finale to support the survivors."
			flagnotes = ""
			flags = 
			{
				"16":
				{
					category = "BreakableProp"
					description = "Break on Touch"
					notes = ""
				}
				"32":
				{
					category = "BreakableProp"
					description = "Break on Pressure"
					notes = ""
				}
				"64":
				{
					category = ""
					description = "Use Hitboxes for Renderbox"
					notes = ""
				}
				"256":
				{
					category = ""
					description = "Start with collision disabled"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "float"
					shortinfo = "Max yaw"
					extra = ""
					notes = ""
					description = "Max yaw the gun can be turned."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "float"
					shortinfo = "Max pitch"
					extra = ""
					notes = ""
					description = "Max pitch the gun can be depressed."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "float"
					shortinfo = "Min pitch"
					extra = ""
					notes = ""
					description = "Min pitch the gun can be raised."
					choices = {}
				}
				"StartDisabled":
				{
					typename = "boolean"
					shortinfo = "Start Disabled"
					extra = ""
					notes = ""
					description = "Stay dormant until activated (probably with the Enable input)."
					choices = {}
				}
				"DefaultAnim":
				{
					typename = "string"
					shortinfo = "Default Animation"
					extra = ""
					notes = ""
					description = "The animation this prop will play when not doing a random or forced animation."
					choices = {}
				}
				"RandomAnimation":
				{
					typename = "boolean"
					shortinfo = "Randomly Animate"
					extra = ""
					notes = ""
					description = "Makes the prop randomly select and play animations at intervals defined by the Min/Max Random Anim Time KVs. In between the random animations, it will revert to playing Default Animation."
					choices = {}
				}
				"MinAnimTime":
				{
					typename = "float"
					shortinfo = "Min Random Anim Time"
					extra = ""
					notes = ""
					description = "Minimum time between random animations."
					choices = {}
				}
				"MaxAnimTime":
				{
					typename = "float"
					shortinfo = "Max Random Anim Time"
					extra = ""
					notes = ""
					description = "Maximum time between random animations."
					choices = {}
				}
				"updatechildren":
				{
					typename = "boolean"
					shortinfo = "Update children"
					extra = ""
					notes = ""
					description = "Confirm:A boolean set to true by default. When set to 0, any children attached to this entity as an attachment will not update. (seems like it would not have a practical use...)"
					choices = {}
				}
				"DisableBoneFollowers":
				{
					typename = "boolean"
					shortinfo = "Disable Bone Followers"
					extra = "(in all games since [Source][Source])"
					notes = ""
					description = "Disables generation of phys_bone_followers for each convex piece the model has in its collision model. phys_bone_followers can quickly eat up the edict count, so this keyvalue can be very helpful in freeing resources. This will however make the collision model no longer function ([confirm] As in become non-solid?), and the model will not be able to ragdoll anymore."
					choices = {}
				}
				"gmod_allowphysgun":
				{
					typename = "boolean"
					shortinfo = "Allow Physics Gun"
					extra = "(only in [Garry's Mod])"
					notes = ""
					description = "If set, players cannot use Physics Gun on this entity."
					choices = {}
				}
				"gmod_allowtools":
				{
					typename = "string"
					shortinfo = "Sandbox Tool Whitelist"
					extra = "(only in [Garry's Mod])"
					notes = ""
					description = "If set, only given tools can be used on this entity. You need to supply the tool class names, the names of the .lua files of those tools. This also includes the context menu properties!"
					choices = {}
				}
				"ExplodeDamage":
				{
					typename = "float"
					shortinfo = "Explosion Damage"
					extra = ""
					notes = ""
					description = "If non-zero, when this entity breaks it will create an explosion that causes the specified amount of damage. See also Explosion Radius."
					choices = {}
				}
				"ExplodeRadius":
				{
					typename = "float"
					shortinfo = "Explodsion Radius"
					extra = ""
					notes = ""
					description = "If non-zero, when this entity breaks it will create an explosion with a radius of the specified amount. See also Explosion Damage."
					choices = {}
				}
				"BreakModelMessage":
				{
					typename = "string"
					shortinfo = "Break Model Message"
					extra = ""
					notes = ""
					description = "'If set, will use this break model message instead of the normal break behavior.'  Confirm:Is this new with Source SDK 2013...? It isn't in Alien Swarm or 2007 code but is in 2013. New with L4D?"
					choices = {}
				}
				"PerformanceMode":
				{
					typename = "choices"
					shortinfo = "Performance Mode"
					extra = ""
					notes = ""
					description = "Used to limit the amount of gibs produced when this entity breaks, for performance reasons.\n0: Normal\n1: No Gibs\n2: Full Gibs on All Platforms (Xbox 360, PS3, etc)\n3: Reduced gibs"
					choices = {}
				}
				"minhealthdmg":
				{
					typename = "integer"
					shortinfo = "Min Damage to Hurt"
					extra = ""
					notes = ""
					description = "If a single hit to the object doesn't do at least this much damage, the prop won't take any of the damage it attempted to give."
					choices = {}
				}
				"PressureDelay":
				{
					typename = "float"
					shortinfo = "Pressure Delay"
					extra = ""
					notes = ""
					description = "Seconds to delay breaking from pressure. Allows creaking/groaning sounds to play."
					choices = {}
				}
				"health":
				{
					typename = "integer"
					shortinfo = "Health"
					extra = ""
					notes = ""
					description = "How close to breaking the object is."
					choices = {}
				}
				"max_health":
				{
					typename = "integer"
					shortinfo = "Maximum Health"
					extra = ""
					notes = ""
					description = "Health cannot exceed this amount."
					choices = {}
				}
				"physdamagescale":
				{
					typename = "float"
					shortinfo = "Physics Impact Damage Scale"
					extra = ""
					notes = ""
					description = "Multiplier for damage amount when this entity is hit by a physics object. With a value of 0 the entity will take no damage from physics."
					choices = {}
				}
				"BreakableType":
				{
					typename = "choices"
					shortinfo = "Breakable By"
					extra = "(in all games since [Left 4 Dead])"
					notes = ""
					description = "[Left 4 Dead][Left 4 Dead 2] only. Who can break this?\n0: Everyone\n1: All Infected\n2: Only Tanks"
					choices = {}
				}
				"model":
				{
					typename = "string"
					shortinfo = "World Model"
					extra = ""
					notes = ""
					description = "The model this entity should appear as. 128-character limit."
					choices = {}
				}
				"skin_or_ModelSkin_[Alien_Swarm]":
				{
					typename = "integer"
					shortinfo = "Skin"
					extra = ""
					notes = ""
					description = "Some models have multiple skins. This value selects from the index, starting with 0."
					choices = {}
				}
				"solid":
				{
					typename = "choices"
					shortinfo = "Collisions"
					extra = ""
					notes = ""
					description = "Method of collision for this entity.\n0: None\n1: BSP (QPhysics) !FGD �Bug:�In [Portal 2] Portal 2, if an entity using QPhysics collisions is hit by Gel, the game will crash!\n2: Bounding Box\n3: Oriented Bounding Box !FGD\n4: Oriented Bounding Box, constrained to Yaw only !FGD\n5: Custom/Test !FGD\n6: VPhysics"
					choices = {}
				}
				"body_or_SetBodyGroup":
				{
					typename = "integer"
					shortinfo = "Body Group"
					extra = "!FGD"
					notes = ""
					description = "Sets the the active $bodygroup."
					choices = {}
				}
				"hitboxset":
				{
					typename = "string"
					shortinfo = "Hitbox Set"
					extra = "!FGD"
					notes = ""
					description = "Sets the $hboxset to use."
					choices = {}
				}
				"sequence":
				{
					typename = "integer"
					shortinfo = "Sequence"
					extra = "!FGD"
					notes = ""
					description = "Default animation sequence for the model to be playing after spawning."
					choices = {}
				}
				"playbackrate":
				{
					typename = "float"
					shortinfo = "Playback Rate"
					extra = "!FGD"
					notes = ""
					description = "A multiplier of the framerate at which animations are played, negative values are accepted. Default is 1.0"
					choices = {}
				}
				"cycle":
				{
					typename = "float"
					shortinfo = "Cycle"
					extra = "!FGD"
					notes = ""
					description = "The current frame of the currently playing animation, on a range from 0-1."
					choices = {}
				}
				"LightingOrigin":
				{
					typename = "targetname"
					shortinfo = "Lighting Origin"
					extra = ""
					notes = ""
					description = "Select an entity (not info_lighting!) from which to sample lighting instead of the entity's origin."
					choices = {}
				}
				"LightingOriginHack":
				{
					typename = "targetname"
					shortinfo = "Lighting Origin Offset"
					extra = "!FGD"
					notes = ""
					description = "The info_lighting_relative from which to sample lighting instead of the entity's origin. Not in [Left 4 Dead][Left 4 Dead 2]."
					choices = {}
				}
				"damagefilter":
				{
					typename = "targetname"
					shortinfo = "Damage Filter Name"
					extra = ""
					notes = ""
					description = "When this entity receives damage, it will filter by this entity."
					choices = {}
				}
				"fademindist":
				{
					typename = "float"
					shortinfo = "Start Fade Distance"
					extra = ""
					notes = ""
					description = "Distance at which the entity starts fading. If <0, the entity will disappear instantly when end fade is hit. The value will scale appropriately if the entity is in a 3D Skybox."
					choices = {}
				}
				"fademaxdist":
				{
					typename = "float"
					shortinfo = "End Fade Distance"
					extra = ""
					notes = ""
					description = "Distance at which the entity ends fading. If <0, the entity won't disappear at all. The value will scale appropriately if the entity is in a 3D Skybox."
					choices = {}
				}
				"fadescale":
				{
					typename = "float"
					shortinfo = "Fade Scale"
					extra = ""
					notes = ""
					description = "If specified in the worldspawn, or if the engine is running below DirectX 8, entities will fade out even if the fade distances above aren't specified. This value gives more control over when this happens: numbers smaller than 1 cause the entity to fade out at further distances, and greater than 1 cause it to fade out at closer distances. Using 0 turns off the forced fade altogether. See also $noforcedfade."
					choices = {}
				}
				"rendermode":
				{
					typename = "choices"
					shortinfo = "Render Mode"
					extra = ""
					notes = ""
					description = "Set a non-standard rendering mode on this entity."
					choices = 
					{
						"0" : "Normal"
						"1" : "Color"
						"2" : "Texture"
						"3" : "Glow"
						"4" : "Solid/Alphatest"
						"5" : "Additive"
						"6" : "Removed, does nothing"
						"7" : "Additive Fractional Frame"
						"8" : "Alpha Add"
						"9" : "World Space Glow"
						"10" : "Don't Render"

					}
				}
				"renderamt":
				{
					typename = "integer"
					shortinfo = "Render FX / Transparency (0 - 255)"
					extra = ""
					notes = ""
					description = "Transparency amount, requires a Render Mode other than Normal. 0 is invisible, 255 is fully visible."
					choices = {}
				}
				"rendercolor":
				{
					typename = "color255"
					shortinfo = "Render Color (R G B)"
					extra = ""
					notes = ""
					description = "Color tint."
					choices = {}
				}
				"renderfx":
				{
					typename = "choices"
					shortinfo = "Render FX"
					extra = ""
					notes = ""
					description = "Preset pattern of appearance effects."
					choices = 
					{
						"0" : "None"
						"1" : "Slow Pulse"
						"2" : "Fast Pulse"
						"3" : "Slow Wide Pulse"
						"4" : "Fast Wide Pulse"
						"5" : "Slow Fade Away"
						"6" : "Fast Fade Away"
						"7" : "Slow Become Solid"
						"8" : "Fast Become Solid"
						"9" : "Slow Strobe"
						"10" : "Fast Strobe"
						"11" : "Faster Strobe"
						"12" : "Slow Flicker"
						"13" : "Fast Flicker"
						"14" : "Constant Glow"
						"15" : "Distort"
						"16" : "Hologram (Distort + fade)"
						"17" : "Scale Up"
						"22" : "Spotlight FX"
						"23" : "Cull By Distance"
						"24" : "Fade Wider Pulse"
						"26" : "Fade Near"

					}
				}
			}
		}
		prop_minigun_l4d1 = 
		{
			description = "[Left 4 Dead 2]�prop_minigun_l4d1 is a  point entity available in Left 4 Dead 2. It is the L4D1 version of a mounted gun (that actually looks like a minigun) players can +USE."
			flagnotes = ""
			flags = 
			{
				"16":
				{
					category = "BreakableProp"
					description = "Break on Touch"
					notes = ""
				}
				"32":
				{
					category = "BreakableProp"
					description = "Break on Pressure"
					notes = ""
				}
				"64":
				{
					category = ""
					description = "Use Hitboxes for Renderbox"
					notes = ""
				}
				"256":
				{
					category = ""
					description = "Start with collision disabled"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "float"
					shortinfo = "Max yaw"
					extra = ""
					notes = ""
					description = "Max yaw the gun can be turned."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "float"
					shortinfo = "Max pitch"
					extra = ""
					notes = ""
					description = "Max pitch the gun can be depressed."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "float"
					shortinfo = "Min pitch"
					extra = ""
					notes = ""
					description = "Min pitch the gun can be raised."
					choices = {}
				}
				"StartDisabled":
				{
					typename = "boolean"
					shortinfo = "Start Disabled"
					extra = ""
					notes = ""
					description = "Stay dormant until activated (probably with the Enable input)."
					choices = {}
				}
				"DefaultAnim":
				{
					typename = "string"
					shortinfo = "Default Animation"
					extra = ""
					notes = ""
					description = "The animation this prop will play when not doing a random or forced animation."
					choices = {}
				}
				"RandomAnimation":
				{
					typename = "boolean"
					shortinfo = "Randomly Animate"
					extra = ""
					notes = ""
					description = "Makes the prop randomly select and play animations at intervals defined by the Min/Max Random Anim Time KVs. In between the random animations, it will revert to playing Default Animation."
					choices = {}
				}
				"MinAnimTime":
				{
					typename = "float"
					shortinfo = "Min Random Anim Time"
					extra = ""
					notes = ""
					description = "Minimum time between random animations."
					choices = {}
				}
				"MaxAnimTime":
				{
					typename = "float"
					shortinfo = "Max Random Anim Time"
					extra = ""
					notes = ""
					description = "Maximum time between random animations."
					choices = {}
				}
				"updatechildren":
				{
					typename = "boolean"
					shortinfo = "Update children"
					extra = ""
					notes = ""
					description = "Confirm:A boolean set to true by default. When set to 0, any children attached to this entity as an attachment will not update. (seems like it would not have a practical use...)"
					choices = {}
				}
				"DisableBoneFollowers":
				{
					typename = "boolean"
					shortinfo = "Disable Bone Followers"
					extra = "(in all games since [Source][Source])"
					notes = ""
					description = "Disables generation of phys_bone_followers for each convex piece the model has in its collision model. phys_bone_followers can quickly eat up the edict count, so this keyvalue can be very helpful in freeing resources. This will however make the collision model no longer function ([confirm] As in become non-solid?), and the model will not be able to ragdoll anymore."
					choices = {}
				}
				"gmod_allowphysgun":
				{
					typename = "boolean"
					shortinfo = "Allow Physics Gun"
					extra = "(only in [Garry's Mod])"
					notes = ""
					description = "If set, players cannot use Physics Gun on this entity."
					choices = {}
				}
				"gmod_allowtools":
				{
					typename = "string"
					shortinfo = "Sandbox Tool Whitelist"
					extra = "(only in [Garry's Mod])"
					notes = ""
					description = "If set, only given tools can be used on this entity. You need to supply the tool class names, the names of the .lua files of those tools. This also includes the context menu properties!"
					choices = {}
				}
				"ExplodeDamage":
				{
					typename = "float"
					shortinfo = "Explosion Damage"
					extra = ""
					notes = ""
					description = "If non-zero, when this entity breaks it will create an explosion that causes the specified amount of damage. See also Explosion Radius."
					choices = {}
				}
				"ExplodeRadius":
				{
					typename = "float"
					shortinfo = "Explodsion Radius"
					extra = ""
					notes = ""
					description = "If non-zero, when this entity breaks it will create an explosion with a radius of the specified amount. See also Explosion Damage."
					choices = {}
				}
				"BreakModelMessage":
				{
					typename = "string"
					shortinfo = "Break Model Message"
					extra = ""
					notes = ""
					description = "'If set, will use this break model message instead of the normal break behavior.'  Confirm:Is this new with Source SDK 2013...? It isn't in Alien Swarm or 2007 code but is in 2013. New with L4D?"
					choices = {}
				}
				"PerformanceMode":
				{
					typename = "choices"
					shortinfo = "Performance Mode"
					extra = ""
					notes = ""
					description = "Used to limit the amount of gibs produced when this entity breaks, for performance reasons.\n0: Normal\n1: No Gibs\n2: Full Gibs on All Platforms (Xbox 360, PS3, etc)\n3: Reduced gibs"
					choices = {}
				}
				"minhealthdmg":
				{
					typename = "integer"
					shortinfo = "Min Damage to Hurt"
					extra = ""
					notes = ""
					description = "If a single hit to the object doesn't do at least this much damage, the prop won't take any of the damage it attempted to give."
					choices = {}
				}
				"PressureDelay":
				{
					typename = "float"
					shortinfo = "Pressure Delay"
					extra = ""
					notes = ""
					description = "Seconds to delay breaking from pressure. Allows creaking/groaning sounds to play."
					choices = {}
				}
				"health":
				{
					typename = "integer"
					shortinfo = "Health"
					extra = ""
					notes = ""
					description = "How close to breaking the object is."
					choices = {}
				}
				"max_health":
				{
					typename = "integer"
					shortinfo = "Maximum Health"
					extra = ""
					notes = ""
					description = "Health cannot exceed this amount."
					choices = {}
				}
				"physdamagescale":
				{
					typename = "float"
					shortinfo = "Physics Impact Damage Scale"
					extra = ""
					notes = ""
					description = "Multiplier for damage amount when this entity is hit by a physics object. With a value of 0 the entity will take no damage from physics."
					choices = {}
				}
				"BreakableType":
				{
					typename = "choices"
					shortinfo = "Breakable By"
					extra = "(in all games since [Left 4 Dead])"
					notes = ""
					description = "[Left 4 Dead][Left 4 Dead 2] only. Who can break this?\n0: Everyone\n1: All Infected\n2: Only Tanks"
					choices = {}
				}
				"model":
				{
					typename = "string"
					shortinfo = "World Model"
					extra = ""
					notes = ""
					description = "The model this entity should appear as. 128-character limit."
					choices = {}
				}
				"skin_or_ModelSkin_[Alien_Swarm]":
				{
					typename = "integer"
					shortinfo = "Skin"
					extra = ""
					notes = ""
					description = "Some models have multiple skins. This value selects from the index, starting with 0."
					choices = {}
				}
				"solid":
				{
					typename = "choices"
					shortinfo = "Collisions"
					extra = ""
					notes = ""
					description = "Method of collision for this entity.\n0: None\n1: BSP (QPhysics) !FGD �Bug:�In [Portal 2] Portal 2, if an entity using QPhysics collisions is hit by Gel, the game will crash!\n2: Bounding Box\n3: Oriented Bounding Box !FGD\n4: Oriented Bounding Box, constrained to Yaw only !FGD\n5: Custom/Test !FGD\n6: VPhysics"
					choices = {}
				}
				"body_or_SetBodyGroup":
				{
					typename = "integer"
					shortinfo = "Body Group"
					extra = "!FGD"
					notes = ""
					description = "Sets the the active $bodygroup."
					choices = {}
				}
				"hitboxset":
				{
					typename = "string"
					shortinfo = "Hitbox Set"
					extra = "!FGD"
					notes = ""
					description = "Sets the $hboxset to use."
					choices = {}
				}
				"sequence":
				{
					typename = "integer"
					shortinfo = "Sequence"
					extra = "!FGD"
					notes = ""
					description = "Default animation sequence for the model to be playing after spawning."
					choices = {}
				}
				"playbackrate":
				{
					typename = "float"
					shortinfo = "Playback Rate"
					extra = "!FGD"
					notes = ""
					description = "A multiplier of the framerate at which animations are played, negative values are accepted. Default is 1.0"
					choices = {}
				}
				"cycle":
				{
					typename = "float"
					shortinfo = "Cycle"
					extra = "!FGD"
					notes = ""
					description = "The current frame of the currently playing animation, on a range from 0-1."
					choices = {}
				}
				"LightingOrigin":
				{
					typename = "targetname"
					shortinfo = "Lighting Origin"
					extra = ""
					notes = ""
					description = "Select an entity (not info_lighting!) from which to sample lighting instead of the entity's origin."
					choices = {}
				}
				"LightingOriginHack":
				{
					typename = "targetname"
					shortinfo = "Lighting Origin Offset"
					extra = "!FGD"
					notes = ""
					description = "The info_lighting_relative from which to sample lighting instead of the entity's origin. Not in [Left 4 Dead][Left 4 Dead 2]."
					choices = {}
				}
				"damagefilter":
				{
					typename = "targetname"
					shortinfo = "Damage Filter Name"
					extra = ""
					notes = ""
					description = "When this entity receives damage, it will filter by this entity."
					choices = {}
				}
				"fademindist":
				{
					typename = "float"
					shortinfo = "Start Fade Distance"
					extra = ""
					notes = ""
					description = "Distance at which the entity starts fading. If <0, the entity will disappear instantly when end fade is hit. The value will scale appropriately if the entity is in a 3D Skybox."
					choices = {}
				}
				"fademaxdist":
				{
					typename = "float"
					shortinfo = "End Fade Distance"
					extra = ""
					notes = ""
					description = "Distance at which the entity ends fading. If <0, the entity won't disappear at all. The value will scale appropriately if the entity is in a 3D Skybox."
					choices = {}
				}
				"fadescale":
				{
					typename = "float"
					shortinfo = "Fade Scale"
					extra = ""
					notes = ""
					description = "If specified in the worldspawn, or if the engine is running below DirectX 8, entities will fade out even if the fade distances above aren't specified. This value gives more control over when this happens: numbers smaller than 1 cause the entity to fade out at further distances, and greater than 1 cause it to fade out at closer distances. Using 0 turns off the forced fade altogether. See also $noforcedfade."
					choices = {}
				}
				"rendermode":
				{
					typename = "choices"
					shortinfo = "Render Mode"
					extra = ""
					notes = ""
					description = "Set a non-standard rendering mode on this entity."
					choices = 
					{
						"0" : "Normal"
						"1" : "Color"
						"2" : "Texture"
						"3" : "Glow"
						"4" : "Solid/Alphatest"
						"5" : "Additive"
						"6" : "Removed, does nothing"
						"7" : "Additive Fractional Frame"
						"8" : "Alpha Add"
						"9" : "World Space Glow"
						"10" : "Don't Render"

					}
				}
				"renderamt":
				{
					typename = "integer"
					shortinfo = "Render FX / Transparency (0 - 255)"
					extra = ""
					notes = ""
					description = "Transparency amount, requires a Render Mode other than Normal. 0 is invisible, 255 is fully visible."
					choices = {}
				}
				"rendercolor":
				{
					typename = "color255"
					shortinfo = "Render Color (R G B)"
					extra = ""
					notes = ""
					description = "Color tint."
					choices = {}
				}
				"renderfx":
				{
					typename = "choices"
					shortinfo = "Render FX"
					extra = ""
					notes = ""
					description = "Preset pattern of appearance effects."
					choices = 
					{
						"0" : "None"
						"1" : "Slow Pulse"
						"2" : "Fast Pulse"
						"3" : "Slow Wide Pulse"
						"4" : "Fast Wide Pulse"
						"5" : "Slow Fade Away"
						"6" : "Fast Fade Away"
						"7" : "Slow Become Solid"
						"8" : "Fast Become Solid"
						"9" : "Slow Strobe"
						"10" : "Fast Strobe"
						"11" : "Faster Strobe"
						"12" : "Slow Flicker"
						"13" : "Fast Flicker"
						"14" : "Constant Glow"
						"15" : "Distort"
						"16" : "Hologram (Distort + fade)"
						"17" : "Scale Up"
						"22" : "Spotlight FX"
						"23" : "Cull By Distance"
						"24" : "Fade Wider Pulse"
						"26" : "Fade Near"

					}
				}
			}
		}
		prop_mounted_machine_gun = 
		{
			description = "[Left 4 Dead][Left 4 Dead 2]�prop_mounted_machine_gun is a  point entity available in the Left 4 Dead series. It is a usable .50 caliber mounted gun."
			flagnotes = ""
			flags = 
			{
				"16":
				{
					category = "BreakableProp"
					description = "Break on Touch"
					notes = ""
				}
				"32":
				{
					category = "BreakableProp"
					description = "Break on Pressure"
					notes = ""
				}
				"64":
				{
					category = ""
					description = "Use Hitboxes for Renderbox"
					notes = ""
				}
				"256":
				{
					category = ""
					description = "Start with collision disabled"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "float"
					shortinfo = "Max yaw"
					extra = ""
					notes = ""
					description = "Max yaw the gun can be turned."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "float"
					shortinfo = "Max pitch"
					extra = ""
					notes = ""
					description = "Max pitch the gun can be depressed."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "float"
					shortinfo = "Min pitch"
					extra = ""
					notes = ""
					description = "Min pitch the gun can be raised."
					choices = {}
				}
				"StartDisabled":
				{
					typename = "boolean"
					shortinfo = "Start Disabled"
					extra = ""
					notes = ""
					description = "Stay dormant until activated (probably with the Enable input)."
					choices = {}
				}
				"DefaultAnim":
				{
					typename = "string"
					shortinfo = "Default Animation"
					extra = ""
					notes = ""
					description = "The animation this prop will play when not doing a random or forced animation."
					choices = {}
				}
				"RandomAnimation":
				{
					typename = "boolean"
					shortinfo = "Randomly Animate"
					extra = ""
					notes = ""
					description = "Makes the prop randomly select and play animations at intervals defined by the Min/Max Random Anim Time KVs. In between the random animations, it will revert to playing Default Animation."
					choices = {}
				}
				"MinAnimTime":
				{
					typename = "float"
					shortinfo = "Min Random Anim Time"
					extra = ""
					notes = ""
					description = "Minimum time between random animations."
					choices = {}
				}
				"MaxAnimTime":
				{
					typename = "float"
					shortinfo = "Max Random Anim Time"
					extra = ""
					notes = ""
					description = "Maximum time between random animations."
					choices = {}
				}
				"updatechildren":
				{
					typename = "boolean"
					shortinfo = "Update children"
					extra = ""
					notes = ""
					description = "Confirm:A boolean set to true by default. When set to 0, any children attached to this entity as an attachment will not update. (seems like it would not have a practical use...)"
					choices = {}
				}
				"DisableBoneFollowers":
				{
					typename = "boolean"
					shortinfo = "Disable Bone Followers"
					extra = "(in all games since [Source][Source])"
					notes = ""
					description = "Disables generation of phys_bone_followers for each convex piece the model has in its collision model. phys_bone_followers can quickly eat up the edict count, so this keyvalue can be very helpful in freeing resources. This will however make the collision model no longer function ([confirm] As in become non-solid?), and the model will not be able to ragdoll anymore."
					choices = {}
				}
				"gmod_allowphysgun":
				{
					typename = "boolean"
					shortinfo = "Allow Physics Gun"
					extra = "(only in [Garry's Mod])"
					notes = ""
					description = "If set, players cannot use Physics Gun on this entity."
					choices = {}
				}
				"gmod_allowtools":
				{
					typename = "string"
					shortinfo = "Sandbox Tool Whitelist"
					extra = "(only in [Garry's Mod])"
					notes = ""
					description = "If set, only given tools can be used on this entity. You need to supply the tool class names, the names of the .lua files of those tools. This also includes the context menu properties!"
					choices = {}
				}
				"ExplodeDamage":
				{
					typename = "float"
					shortinfo = "Explosion Damage"
					extra = ""
					notes = ""
					description = "If non-zero, when this entity breaks it will create an explosion that causes the specified amount of damage. See also Explosion Radius."
					choices = {}
				}
				"ExplodeRadius":
				{
					typename = "float"
					shortinfo = "Explodsion Radius"
					extra = ""
					notes = ""
					description = "If non-zero, when this entity breaks it will create an explosion with a radius of the specified amount. See also Explosion Damage."
					choices = {}
				}
				"BreakModelMessage":
				{
					typename = "string"
					shortinfo = "Break Model Message"
					extra = ""
					notes = ""
					description = "'If set, will use this break model message instead of the normal break behavior.'  Confirm:Is this new with Source SDK 2013...? It isn't in Alien Swarm or 2007 code but is in 2013. New with L4D?"
					choices = {}
				}
				"PerformanceMode":
				{
					typename = "choices"
					shortinfo = "Performance Mode"
					extra = ""
					notes = ""
					description = "Used to limit the amount of gibs produced when this entity breaks, for performance reasons.\n0: Normal\n1: No Gibs\n2: Full Gibs on All Platforms (Xbox 360, PS3, etc)\n3: Reduced gibs"
					choices = {}
				}
				"minhealthdmg":
				{
					typename = "integer"
					shortinfo = "Min Damage to Hurt"
					extra = ""
					notes = ""
					description = "If a single hit to the object doesn't do at least this much damage, the prop won't take any of the damage it attempted to give."
					choices = {}
				}
				"PressureDelay":
				{
					typename = "float"
					shortinfo = "Pressure Delay"
					extra = ""
					notes = ""
					description = "Seconds to delay breaking from pressure. Allows creaking/groaning sounds to play."
					choices = {}
				}
				"health":
				{
					typename = "integer"
					shortinfo = "Health"
					extra = ""
					notes = ""
					description = "How close to breaking the object is."
					choices = {}
				}
				"max_health":
				{
					typename = "integer"
					shortinfo = "Maximum Health"
					extra = ""
					notes = ""
					description = "Health cannot exceed this amount."
					choices = {}
				}
				"physdamagescale":
				{
					typename = "float"
					shortinfo = "Physics Impact Damage Scale"
					extra = ""
					notes = ""
					description = "Multiplier for damage amount when this entity is hit by a physics object. With a value of 0 the entity will take no damage from physics."
					choices = {}
				}
				"BreakableType":
				{
					typename = "choices"
					shortinfo = "Breakable By"
					extra = "(in all games since [Left 4 Dead])"
					notes = ""
					description = "[Left 4 Dead][Left 4 Dead 2] only. Who can break this?\n0: Everyone\n1: All Infected\n2: Only Tanks"
					choices = {}
				}
				"model":
				{
					typename = "string"
					shortinfo = "World Model"
					extra = ""
					notes = ""
					description = "The model this entity should appear as. 128-character limit."
					choices = {}
				}
				"skin_or_ModelSkin_[Alien_Swarm]":
				{
					typename = "integer"
					shortinfo = "Skin"
					extra = ""
					notes = ""
					description = "Some models have multiple skins. This value selects from the index, starting with 0."
					choices = {}
				}
				"solid":
				{
					typename = "choices"
					shortinfo = "Collisions"
					extra = ""
					notes = ""
					description = "Method of collision for this entity.\n0: None\n1: BSP (QPhysics) !FGD �Bug:�In [Portal 2] Portal 2, if an entity using QPhysics collisions is hit by Gel, the game will crash!\n2: Bounding Box\n3: Oriented Bounding Box !FGD\n4: Oriented Bounding Box, constrained to Yaw only !FGD\n5: Custom/Test !FGD\n6: VPhysics"
					choices = {}
				}
				"body_or_SetBodyGroup":
				{
					typename = "integer"
					shortinfo = "Body Group"
					extra = "!FGD"
					notes = ""
					description = "Sets the the active $bodygroup."
					choices = {}
				}
				"hitboxset":
				{
					typename = "string"
					shortinfo = "Hitbox Set"
					extra = "!FGD"
					notes = ""
					description = "Sets the $hboxset to use."
					choices = {}
				}
				"sequence":
				{
					typename = "integer"
					shortinfo = "Sequence"
					extra = "!FGD"
					notes = ""
					description = "Default animation sequence for the model to be playing after spawning."
					choices = {}
				}
				"playbackrate":
				{
					typename = "float"
					shortinfo = "Playback Rate"
					extra = "!FGD"
					notes = ""
					description = "A multiplier of the framerate at which animations are played, negative values are accepted. Default is 1.0"
					choices = {}
				}
				"cycle":
				{
					typename = "float"
					shortinfo = "Cycle"
					extra = "!FGD"
					notes = ""
					description = "The current frame of the currently playing animation, on a range from 0-1."
					choices = {}
				}
				"LightingOrigin":
				{
					typename = "targetname"
					shortinfo = "Lighting Origin"
					extra = ""
					notes = ""
					description = "Select an entity (not info_lighting!) from which to sample lighting instead of the entity's origin."
					choices = {}
				}
				"LightingOriginHack":
				{
					typename = "targetname"
					shortinfo = "Lighting Origin Offset"
					extra = "!FGD"
					notes = ""
					description = "The info_lighting_relative from which to sample lighting instead of the entity's origin. Not in [Left 4 Dead][Left 4 Dead 2]."
					choices = {}
				}
				"damagefilter":
				{
					typename = "targetname"
					shortinfo = "Damage Filter Name"
					extra = ""
					notes = ""
					description = "When this entity receives damage, it will filter by this entity."
					choices = {}
				}
				"fademindist":
				{
					typename = "float"
					shortinfo = "Start Fade Distance"
					extra = ""
					notes = ""
					description = "Distance at which the entity starts fading. If <0, the entity will disappear instantly when end fade is hit. The value will scale appropriately if the entity is in a 3D Skybox."
					choices = {}
				}
				"fademaxdist":
				{
					typename = "float"
					shortinfo = "End Fade Distance"
					extra = ""
					notes = ""
					description = "Distance at which the entity ends fading. If <0, the entity won't disappear at all. The value will scale appropriately if the entity is in a 3D Skybox."
					choices = {}
				}
				"fadescale":
				{
					typename = "float"
					shortinfo = "Fade Scale"
					extra = ""
					notes = ""
					description = "If specified in the worldspawn, or if the engine is running below DirectX 8, entities will fade out even if the fade distances above aren't specified. This value gives more control over when this happens: numbers smaller than 1 cause the entity to fade out at further distances, and greater than 1 cause it to fade out at closer distances. Using 0 turns off the forced fade altogether. See also $noforcedfade."
					choices = {}
				}
				"rendermode":
				{
					typename = "choices"
					shortinfo = "Render Mode"
					extra = ""
					notes = ""
					description = "Set a non-standard rendering mode on this entity."
					choices = 
					{
						"0" : "Normal"
						"1" : "Color"
						"2" : "Texture"
						"3" : "Glow"
						"4" : "Solid/Alphatest"
						"5" : "Additive"
						"6" : "Removed, does nothing"
						"7" : "Additive Fractional Frame"
						"8" : "Alpha Add"
						"9" : "World Space Glow"
						"10" : "Don't Render"

					}
				}
				"renderamt":
				{
					typename = "integer"
					shortinfo = "Render FX / Transparency (0 - 255)"
					extra = ""
					notes = ""
					description = "Transparency amount, requires a Render Mode other than Normal. 0 is invisible, 255 is fully visible."
					choices = {}
				}
				"rendercolor":
				{
					typename = "color255"
					shortinfo = "Render Color (R G B)"
					extra = ""
					notes = ""
					description = "Color tint."
					choices = {}
				}
				"renderfx":
				{
					typename = "choices"
					shortinfo = "Render FX"
					extra = ""
					notes = ""
					description = "Preset pattern of appearance effects."
					choices = 
					{
						"0" : "None"
						"1" : "Slow Pulse"
						"2" : "Fast Pulse"
						"3" : "Slow Wide Pulse"
						"4" : "Fast Wide Pulse"
						"5" : "Slow Fade Away"
						"6" : "Fast Fade Away"
						"7" : "Slow Become Solid"
						"8" : "Fast Become Solid"
						"9" : "Slow Strobe"
						"10" : "Fast Strobe"
						"11" : "Faster Strobe"
						"12" : "Slow Flicker"
						"13" : "Fast Flicker"
						"14" : "Constant Glow"
						"15" : "Distort"
						"16" : "Hologram (Distort + fade)"
						"17" : "Scale Up"
						"22" : "Spotlight FX"
						"23" : "Cull By Distance"
						"24" : "Fade Wider Pulse"
						"26" : "Fade Near"

					}
				}
			}
		}
		prop_detail = 
		{
			description = "prop_detail is a internal point entity available in all Source games. It is used to manually create a detail prop. It only supports model detail props, so is rarely used."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "model_path"
					shortinfo = "World model"
					extra = ""
					notes = ""
					description = "World model to appear as. Must be $staticprop and UnlitGeneric (ALL skins). Maximum string length: 128."
					choices = {}
				}
			}
		}
		prop_door_rotating = 
		{
			description = "prop_door_rotating is a  point entity available in all Source games. It creates an ordinary hinged door that can be opened by players and NPCs."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Starts Open"
					notes = ""
				}
				"2048":
				{
					category = ""
					description = "Starts locked"
					notes = ""
				}
				"4096":
				{
					category = ""
					description = "Door silent (No sound, and does not alert NPCs)"
					notes = ""
				}
				"8192":
				{
					category = ""
					description = "Use closes"
					notes = ""
				}
				"16384":
				{
					category = ""
					description = "Door silent to NPCs (Does not alert NPCs)"
					notes = ""
				}
				"32768":
				{
					category = ""
					description = "Ignore player +USE"
					notes = ""
				}
				"524288":
				{
					category = ""
					description = "Start Unbreakable (in all games since [Left 4 Dead]). () Start Breakable (in all games since [Counter-Strike\t Global Offensive]) (also in [Garry's Mod])"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"slavename":
				{
					typename = "targetname"
					shortinfo = "Slave name"
					extra = ""
					notes = ""
					description = "Name of any door(s) that should open and close at the same time as this one. You could also give them all the same name."
					choices = {}
				}
				"hardware":
				{
					typename = "choices"
					shortinfo = "Hardware Type"
					extra = ""
					notes = ""
					description = "The type of mechanism used to open the door (handle, push bar, keypad). The mechanism only appears in the game, not in Hammer.\nNone\nLever (i.e. door handle)\nPush bar\nKeypad �Note:� Keypad hardware has no model ingame."
					choices = {}
				}
				"spawnpos":
				{
					typename = "choices"
					shortinfo = "Spawn Position"
					extra = ""
					notes = ""
					description = "State the door should begin in. Check the door's angles to see forward/backward orientation.\nClosed\nOpen forward\nOpen back\nAjar"
					choices = {}
				}
				"ajarangles":
				{
					typename = "angle"
					shortinfo = "Ajar Angles"
					extra = ""
					notes = ""
					description = "If 'Spawn Position' is 'ajar', these are the angles to spawn at instead of being open or closed."
					choices = {}
				}
				"axis":
				{
					typename = "axis"
					shortinfo = "Hinge Axis"
					extra = ""
					notes = "Note: Despite Hinge Axis values, the door can only rotate on the Z Axis"
					description = "To do"
					choices = {}
				}
				"distance":
				{
					typename = "float"
					shortinfo = "Rotation Distance"
					extra = ""
					notes = ""
					description = "Number of degrees that the door should open, both forward and backward."
					choices = {}
				}
				"speed":
				{
					typename = "integer"
					shortinfo = "Speed"
					extra = ""
					notes = ""
					description = "In degrees/second."
					choices = {}
				}
				"soundopenoverride":
				{
					typename = "string"
					shortinfo = "Fully Open Sound"
					extra = ""
					notes = ""
					description = "Sound played when the door has finished opening."
					choices = {}
				}
				"soundcloseoverride":
				{
					typename = "string"
					shortinfo = "Fully Closed Sound"
					extra = ""
					notes = ""
					description = "Sound played when the door has finished closing."
					choices = {}
				}
				"soundmoveoverride":
				{
					typename = "string"
					shortinfo = "Moving Sound"
					extra = ""
					notes = ""
					description = "Sound played when the door starts to move."
					choices = {}
				}
				"soundlockedoverride":
				{
					typename = "string"
					shortinfo = "Locked Sound"
					extra = ""
					notes = ""
					description = "Optional overrides to the sounds played by the door. Sound played when the player tries to open the door, and fails because it's locked."
					choices = {}
				}
				"soundunlockedoverride":
				{
					typename = "string"
					shortinfo = "Unlocked Sound"
					extra = ""
					notes = ""
					description = "Optional overrides to the sounds played by the door. Sound played when the door is unlocked."
					choices = {}
				}
				"returndelay":
				{
					typename = "integer"
					shortinfo = "Delay Before close"
					extra = ""
					notes = ""
					description = "Number of seconds the door waits until closing by itself. -1 means never auto-close."
					choices = {}
				}
				"dmg":
				{
					typename = "integer"
					shortinfo = "Damage Inflicted When Blocked"
					extra = ""
					notes = ""
					description = "If an entity is blocking the door from moving, inflict this much damage per frame."
					choices = {}
				}
				"candamageplayer":
				{
					typename = "boolean"
					shortinfo = "Can Damage Player"
					extra = "(only in [INFRA])"
					notes = ""
					description = "If set, this door will kill the player blocking it. Used for the large blast doors in infra_c7_m2_bunker.\n�Note:�This replaces the 'Damage Inflicted When Blocked' keyvalue in [INFRA] INFRA."
					choices = {}
				}
				"forceclosed":
				{
					typename = "boolean"
					shortinfo = "Force Closed"
					extra = ""
					notes = ""
					description = "If set, this door will close no matter what. Useful for doors that have to close even if the player tries to block them with objects."
					choices = {}
				}
				"opendir":
				{
					typename = "choices"
					shortinfo = "Open Direction"
					extra = ""
					notes = ""
					description = "Force the door to open only forwards or only backwards. It will normally try to swing away from the entity that opened it, unless it is being blocked on the other side.\nBoth directions\nForward only\nBackward only"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "integer"
					shortinfo = "Health"
					extra = "[Obsolete]"
					notes = ""
					description = "Deprecated.�Health for the door."
					choices = {}
				}
				"glowdist":
				{
					typename = "integer"
					shortinfo = "Glow Distance"
					extra = "(in all games since [Counter-Strike: Global Offensive])"
					notes = ""
					description = "Default is 1024.\nTo do:�Same as L4D2's Glow Range?"
					choices = {}
				}
				"glowenabled":
				{
					typename = "boolean"
					shortinfo = "Does the prop glow by default?"
					extra = "(in all games since [Counter-Strike: Global Offensive])"
					notes = ""
					description = "Enables the door to glow. Default is set to off."
					choices = {}
				}
				"glowcolor":
				{
					typename = "color255"
					shortinfo = "Glow Color"
					extra = "(in all games since [Counter-Strike: Global Offensive])"
					notes = ""
					description = "The color of the glow (if enabled)."
					choices = {}
				}
				"glowstate":
				{
					typename = "choices"
					shortinfo = "Glow State"
					extra = "(only in [Left 4 Dead 2])"
					notes = ""
					description = "OFF\n+use\nlook-at\nON"
					choices = {}
				}
				"glowrange":
				{
					typename = "integer"
					shortinfo = "Glow Range"
					extra = "(only in [Left 4 Dead 2])"
					notes = ""
					description = "Range at which the glow becomes visible. 0 means always visible."
					choices = {}
				}
				"glowrangemin":
				{
					typename = "integer"
					shortinfo = "Glow Range Min"
					extra = "(only in [Left 4 Dead 2])"
					notes = ""
					description = "Range at which the glow stops being visible. 0 means always visible."
					choices = {}
				}
				"glowcolor":
				{
					typename = "color255"
					shortinfo = "Glow Color Override (R G B)"
					extra = "(only in [Left 4 Dead 2])"
					notes = ""
					description = "Change the render color of the glow."
					choices = {}
				}
				"model":
				{
					typename = "string"
					shortinfo = "World Model"
					extra = ""
					notes = ""
					description = "The model this entity should appear as. 128-character limit."
					choices = {}
				}
				"skin":
				{
					typename = "integer"
					shortinfo = "Skin"
					extra = ""
					notes = ""
					description = "Some models have multiple skins. This value selects from the index, starting with 0. �Tip:�Hammer's model browser automatically updates this value if you use it to view different skins."
					choices = {}
				}
				"modelscale":
				{
					typename = "float"
					shortinfo = "Model Scale"
					extra = "(in all games since [Source][Source])"
					notes = ""
					description = "A multiplier for the size of the model."
					choices = {}
				}
				"disableshadows":
				{
					typename = "boolean"
					shortinfo = "Disable Shadows"
					extra = ""
					notes = ""
					description = "Prevents the entity from creating cheap render-to-texture shadows, or lightmap shadows if the entity is a prop_static. Does not affect shadow mapping."
					choices = {}
				}
				"disableshadowdepth":
				{
					typename = "boolean"
					shortinfo = "Disable ShadowDepth"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable rendering into shadow depth (for projected textures) for this entity."
					choices = {}
				}
				"shadowdepthnocache":
				{
					typename = "choices"
					shortinfo = "Projected Texture Cache"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to hint projected texture system whether it is sufficient to cache shadow volume of this entity or to force render it every frame instead.\n0�: Default\n1�: No cache - render every frame\n2�: Cache it - render only once"
					choices = {}
				}
				"disableflashlight":
				{
					typename = "boolean"
					shortinfo = "Disable flashlight"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable projected texture lighting and shadows on this entity."
					choices = {}
				}
				"drawinfastreflection":
				{
					typename = "boolean"
					shortinfo = "Render in Fast Reflections"
					extra = "(in all games since [Portal 2])"
					notes = "Note: These keyvalues may not be available in some FGDs. When used in a game before L4D, there is an abrupt render cut-off rather than an actual fade."
					description = "If enabled, this entity will render in fast water reflections (i.e. when a water material specifies $reflectonlymarkedentities) and in the world impostor pass."
					choices = {}
				}
				"fademindist":
				{
					typename = "float"
					shortinfo = "Start Fade Dist"
					extra = "(in all games since [Left 4 Dead])"
					notes = ""
					description = "Distance at which the prop starts to fade."
					choices = {}
				}
				"fademaxdist":
				{
					typename = "float"
					shortinfo = "End Fade Dist"
					extra = "(in all games since [Left 4 Dead])"
					notes = ""
					description = "Max fade distance at which the prop is visible.\nIf start fade is <0, the prop will disappear instantly when end fade is hit.\nIf end fade is <0, the prop won't disappear at all. (This is the default behaviour.)\nThe values will scale appropriately if the prop is in a 3D Skybox."
					choices = {}
				}
				"fadescale":
				{
					typename = "float"
					shortinfo = "Fade Scale"
					extra = "(in all games since [Left 4 Dead])"
					notes = ""
					description = "If you specify so in worldspawn, or if the engine is running below DirectX 8 (DX7 in Ep1), props will fade out even if the fade distances above aren't specified. This value gives you some control over when this happens: numbers smaller than 1 cause the prop to fade out at further distances, and greater than 1 cause it to fade out at closer distances. Using 0 turns off the forced fade altogether. See also the QC command $noforcedfade."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"gmod_allowphysgun":
				{
					typename = "boolean"
					shortinfo = "Allow Physics Gun"
					extra = "(only in [Garry's Mod])"
					notes = ""
					description = "If set, players cannot use Physics Gun on this entity."
					choices = {}
				}
				"gmod_allowtools":
				{
					typename = "string"
					shortinfo = "Sandbox Tool Whitelist"
					extra = "(only in [Garry's Mod])"
					notes = ""
					description = "If set, only given tools can be used on this entity. You need to supply the tool class names, the names of the .lua files of those tools. This also includes the context menu properties!"
					choices = {}
				}
			}
		}
		prop_dynamic = 
		{
			description = "prop_dynamic is a  point entity available in all Source games. It is used to add a model to the world that can animate itself.\n In code, it is represented by class CDynamicProp, defined in props.cpp."
			flagnotes = ""
			flags = 
			{
				"16":
				{
					category = "BreakableProp"
					description = "Break on Touch"
					notes = ""
				}
				"32":
				{
					category = "BreakableProp"
					description = "Break on Pressure"
					notes = ""
				}
				"64":
				{
					category = ""
					description = "Use Hitboxes for Renderbox"
					notes = ""
				}
				"256":
				{
					category = ""
					description = "Start with collision disabled"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"DefaultAnim":
				{
					typename = "string"
					shortinfo = "Default Animation"
					extra = ""
					notes = ""
					description = "The animation this prop will play when not doing a random or forced animation."
					choices = {}
				}
				"RandomAnimation":
				{
					typename = "boolean"
					shortinfo = "Randomly Animate"
					extra = ""
					notes = ""
					description = "Makes the prop randomly select and play animations at intervals defined by the Min/Max Random Anim Time KVs. In between the random animations, it will revert to playing Default Animation."
					choices = {}
				}
				"MinAnimTime":
				{
					typename = "float"
					shortinfo = "Min Random Anim Time"
					extra = ""
					notes = ""
					description = "Minimum time between random animations."
					choices = {}
				}
				"MaxAnimTime":
				{
					typename = "float"
					shortinfo = "Max Random Anim Time"
					extra = ""
					notes = ""
					description = "Maximum time between random animations."
					choices = {}
				}
				"updatechildren":
				{
					typename = "boolean"
					shortinfo = "Update children"
					extra = ""
					notes = ""
					description = "Confirm:A boolean set to true by default. When set to 0, any children attached to this entity as an attachment will not update. (seems like it would not have a practical use...)"
					choices = {}
				}
				"DisableBoneFollowers":
				{
					typename = "boolean"
					shortinfo = "Disable Bone Followers"
					extra = "(in all games since [Source][Source])"
					notes = ""
					description = "Disables generation of phys_bone_followers for each convex piece the model has in its collision model. phys_bone_followers can quickly eat up the edict count, so this keyvalue can be very helpful in freeing resources. This will however make the collision model no longer function ([confirm] As in become non-solid?), and the model will not be able to ragdoll anymore."
					choices = {}
				}
				"HoldAnimation":
				{
					typename = "boolean"
					shortinfo = "Hold Animation"
					extra = "(in all games since [Alien Swarm])"
					notes = ""
					description = "If set, the prop will not loop its animation, but hold the last frame."
					choices = {}
				}
				"AnimateEveryFrame":
				{
					typename = "boolean"
					shortinfo = "Animate Every Frame"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Force this prop to animate every frame. Usually this doesn't need to be touched."
					choices = {}
				}
				"gmod_allowphysgun":
				{
					typename = "boolean"
					shortinfo = "Allow Physics Gun"
					extra = "(only in [Garry's Mod])"
					notes = ""
					description = "If set, players cannot use Physics Gun on this entity."
					choices = {}
				}
				"gmod_allowtools":
				{
					typename = "string"
					shortinfo = "Sandbox Tool Whitelist"
					extra = "(only in [Garry's Mod])"
					notes = ""
					description = "If set, only given tools can be used on this entity. You need to supply the tool class names, the names of the .lua files of those tools. This also includes the context menu properties!"
					choices = {}
				}
				"ExplodeDamage":
				{
					typename = "float"
					shortinfo = "Explosion Damage"
					extra = ""
					notes = ""
					description = "If non-zero, when this entity breaks it will create an explosion that causes the specified amount of damage. See also Explosion Radius."
					choices = {}
				}
				"ExplodeRadius":
				{
					typename = "float"
					shortinfo = "Explodsion Radius"
					extra = ""
					notes = ""
					description = "If non-zero, when this entity breaks it will create an explosion with a radius of the specified amount. See also Explosion Damage."
					choices = {}
				}
				"puntsound":
				{
					typename = "sound"
					shortinfo = "Sound to make when punted"
					extra = "(in all games since [Half-Life 2: Episode One][Half-Life 2: Episode One])"
					notes = ""
					description = "Sound to make when punted by gravity gun."
					choices = {}
				}
				"BreakModelMessage":
				{
					typename = "string"
					shortinfo = "Break Model Message"
					extra = ""
					notes = ""
					description = "'If set, will use this break model message instead of the normal break behavior.'  Confirm:Is this new with Source SDK 2013...? It isn't in Alien Swarm or 2007 code but is in 2013. New with L4D?"
					choices = {}
				}
				"PerformanceMode":
				{
					typename = "choices"
					shortinfo = "Performance Mode"
					extra = ""
					notes = ""
					description = "Used to limit the amount of gibs produced when this entity breaks, for performance reasons.\n0: Normal\n1: No Gibs\n2: Full Gibs on All Platforms (Xbox 360, PS3, etc)\n3: Reduced gibs"
					choices = {}
				}
				"minhealthdmg":
				{
					typename = "integer"
					shortinfo = "Min Damage to Hurt"
					extra = ""
					notes = ""
					description = "If a single hit to the object doesn't do at least this much damage, the prop won't take any of the damage it attempted to give."
					choices = {}
				}
				"PressureDelay":
				{
					typename = "float"
					shortinfo = "Pressure Delay"
					extra = ""
					notes = ""
					description = "Seconds to delay breaking from pressure. Allows creaking/groaning sounds to play."
					choices = {}
				}
				"health":
				{
					typename = "integer"
					shortinfo = "Health"
					extra = ""
					notes = ""
					description = "How close to breaking the object is."
					choices = {}
				}
				"max_health":
				{
					typename = "integer"
					shortinfo = "Maximum Health"
					extra = ""
					notes = ""
					description = "Health cannot exceed this amount."
					choices = {}
				}
				"physdamagescale":
				{
					typename = "float"
					shortinfo = "Physics Impact Damage Scale"
					extra = ""
					notes = ""
					description = "Multiplier for damage amount when this entity is hit by a physics object. With a value of 0 the entity will take no damage from physics."
					choices = {}
				}
				"BreakableType":
				{
					typename = "choices"
					shortinfo = "Breakable By"
					extra = "(in all games since [Left 4 Dead])"
					notes = ""
					description = "[Left 4 Dead][Left 4 Dead 2] only. Who can break this?\n0: Everyone\n1: All Infected\n2: Only Tanks"
					choices = {}
				}
				"model":
				{
					typename = "string"
					shortinfo = "World Model"
					extra = ""
					notes = ""
					description = "The model this entity should appear as. 128-character limit."
					choices = {}
				}
				"skin_or_ModelSkin_[Alien_Swarm]":
				{
					typename = "integer"
					shortinfo = "Skin"
					extra = ""
					notes = ""
					description = "Some models have multiple skins. This value selects from the index, starting with 0."
					choices = {}
				}
				"solid":
				{
					typename = "choices"
					shortinfo = "Collisions"
					extra = ""
					notes = ""
					description = "Method of collision for this entity.\n0: None\n1: BSP (QPhysics) !FGD �Bug:�In [Portal 2] Portal 2, if an entity using QPhysics collisions is hit by Gel, the game will crash!\n2: Bounding Box\n3: Oriented Bounding Box !FGD\n4: Oriented Bounding Box, constrained to Yaw only !FGD\n5: Custom/Test !FGD\n6: VPhysics"
					choices = {}
				}
				"body_or_SetBodyGroup":
				{
					typename = "integer"
					shortinfo = "Body Group"
					extra = "!FGD"
					notes = ""
					description = "Sets the the active $bodygroup."
					choices = {}
				}
				"hitboxset":
				{
					typename = "string"
					shortinfo = "Hitbox Set"
					extra = "!FGD"
					notes = ""
					description = "Sets the $hboxset to use."
					choices = {}
				}
				"sequence":
				{
					typename = "integer"
					shortinfo = "Sequence"
					extra = "!FGD"
					notes = ""
					description = "Default animation sequence for the model to be playing after spawning."
					choices = {}
				}
				"playbackrate":
				{
					typename = "float"
					shortinfo = "Playback Rate"
					extra = "!FGD"
					notes = ""
					description = "A multiplier of the framerate at which animations are played, negative values are accepted. Default is 1.0"
					choices = {}
				}
				"cycle":
				{
					typename = "float"
					shortinfo = "Cycle"
					extra = "!FGD"
					notes = ""
					description = "The current frame of the currently playing animation, on a range from 0-1."
					choices = {}
				}
				"LightingOrigin":
				{
					typename = "targetname"
					shortinfo = "Lighting Origin"
					extra = ""
					notes = ""
					description = "Select an entity (not info_lighting!) from which to sample lighting instead of the entity's origin."
					choices = {}
				}
				"LightingOriginHack":
				{
					typename = "targetname"
					shortinfo = "Lighting Origin Offset"
					extra = "!FGD"
					notes = ""
					description = "The info_lighting_relative from which to sample lighting instead of the entity's origin. Not in [Left 4 Dead][Left 4 Dead 2]."
					choices = {}
				}
				"damagefilter":
				{
					typename = "targetname"
					shortinfo = "Damage Filter Name"
					extra = ""
					notes = ""
					description = "When this entity receives damage, it will filter by this entity."
					choices = {}
				}
				"fademindist":
				{
					typename = "float"
					shortinfo = "Start Fade Distance"
					extra = ""
					notes = ""
					description = "Distance at which the entity starts fading. If <0, the entity will disappear instantly when end fade is hit. The value will scale appropriately if the entity is in a 3D Skybox."
					choices = {}
				}
				"fademaxdist":
				{
					typename = "float"
					shortinfo = "End Fade Distance"
					extra = ""
					notes = ""
					description = "Distance at which the entity ends fading. If <0, the entity won't disappear at all. The value will scale appropriately if the entity is in a 3D Skybox."
					choices = {}
				}
				"fadescale":
				{
					typename = "float"
					shortinfo = "Fade Scale"
					extra = ""
					notes = ""
					description = "If specified in the worldspawn, or if the engine is running below DirectX 8, entities will fade out even if the fade distances above aren't specified. This value gives more control over when this happens: numbers smaller than 1 cause the entity to fade out at further distances, and greater than 1 cause it to fade out at closer distances. Using 0 turns off the forced fade altogether. See also $noforcedfade."
					choices = {}
				}
				"rendermode":
				{
					typename = "choices"
					shortinfo = "Render Mode"
					extra = ""
					notes = ""
					description = "Set a non-standard rendering mode on this entity."
					choices = 
					{
						"0" : "Normal"
						"1" : "Color"
						"2" : "Texture"
						"3" : "Glow"
						"4" : "Solid/Alphatest"
						"5" : "Additive"
						"6" : "Removed, does nothing"
						"7" : "Additive Fractional Frame"
						"8" : "Alpha Add"
						"9" : "World Space Glow"
						"10" : "Don't Render"

					}
				}
				"renderamt":
				{
					typename = "integer"
					shortinfo = "Render FX / Transparency (0 - 255)"
					extra = ""
					notes = ""
					description = "Transparency amount, requires a Render Mode other than Normal. 0 is invisible, 255 is fully visible."
					choices = {}
				}
				"rendercolor":
				{
					typename = "color255"
					shortinfo = "Render Color (R G B)"
					extra = ""
					notes = ""
					description = "Color tint."
					choices = {}
				}
				"renderfx":
				{
					typename = "choices"
					shortinfo = "Render FX"
					extra = ""
					notes = ""
					description = "Preset pattern of appearance effects."
					choices = 
					{
						"0" : "None"
						"1" : "Slow Pulse"
						"2" : "Fast Pulse"
						"3" : "Slow Wide Pulse"
						"4" : "Fast Wide Pulse"
						"5" : "Slow Fade Away"
						"6" : "Fast Fade Away"
						"7" : "Slow Become Solid"
						"8" : "Fast Become Solid"
						"9" : "Slow Strobe"
						"10" : "Fast Strobe"
						"11" : "Faster Strobe"
						"12" : "Slow Flicker"
						"13" : "Fast Flicker"
						"14" : "Constant Glow"
						"15" : "Distort"
						"16" : "Hologram (Distort + fade)"
						"17" : "Scale Up"
						"22" : "Spotlight FX"
						"23" : "Cull By Distance"
						"24" : "Fade Wider Pulse"
						"26" : "Fade Near"

					}
				}
			}
		}
		prop_dynamic_ornament = 
		{
			description = "prop_dynamic_ornament is a  point entity available in all Source games. It is a way to attach one studio model to another as an ornament. It will render in the way that player/NPC weapons render. \n In code, it is represented by class COrnamentProp, defined in props.cpp."
			flagnotes = ""
			flags = 
			{
				"16":
				{
					category = "BreakableProp"
					description = "Break on Touch"
					notes = ""
				}
				"32":
				{
					category = "BreakableProp"
					description = "Break on Pressure"
					notes = ""
				}
				"64":
				{
					category = ""
					description = "Use Hitboxes for Renderbox"
					notes = ""
				}
				"256":
				{
					category = ""
					description = "Start with collision disabled"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"InitialOwner":
				{
					typename = "string"
					shortinfo = "Target Entity"
					extra = ""
					notes = ""
					description = "Name of the entity that this ornament should attach to, at startup."
					choices = {}
				}
				"DefaultAnim":
				{
					typename = "string"
					shortinfo = "Default Animation"
					extra = ""
					notes = ""
					description = "The animation this prop will play when not doing a random or forced animation."
					choices = {}
				}
				"RandomAnimation":
				{
					typename = "boolean"
					shortinfo = "Randomly Animate"
					extra = ""
					notes = ""
					description = "Makes the prop randomly select and play animations at intervals defined by the Min/Max Random Anim Time KVs. In between the random animations, it will revert to playing Default Animation."
					choices = {}
				}
				"MinAnimTime":
				{
					typename = "float"
					shortinfo = "Min Random Anim Time"
					extra = ""
					notes = ""
					description = "Minimum time between random animations."
					choices = {}
				}
				"MaxAnimTime":
				{
					typename = "float"
					shortinfo = "Max Random Anim Time"
					extra = ""
					notes = ""
					description = "Maximum time between random animations."
					choices = {}
				}
				"updatechildren":
				{
					typename = "boolean"
					shortinfo = "Update children"
					extra = ""
					notes = ""
					description = "Confirm:A boolean set to true by default. When set to 0, any children attached to this entity as an attachment will not update. (seems like it would not have a practical use...)"
					choices = {}
				}
				"DisableBoneFollowers":
				{
					typename = "boolean"
					shortinfo = "Disable Bone Followers"
					extra = "(in all games since [Source][Source])"
					notes = ""
					description = "Disables generation of phys_bone_followers for each convex piece the model has in its collision model. phys_bone_followers can quickly eat up the edict count, so this keyvalue can be very helpful in freeing resources. This will however make the collision model no longer function ([confirm] As in become non-solid?), and the model will not be able to ragdoll anymore."
					choices = {}
				}
				"HoldAnimation":
				{
					typename = "boolean"
					shortinfo = "Hold Animation"
					extra = "(in all games since [Alien Swarm])"
					notes = ""
					description = "If set, the prop will not loop its animation, but hold the last frame."
					choices = {}
				}
				"AnimateEveryFrame":
				{
					typename = "boolean"
					shortinfo = "Animate Every Frame"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Force this prop to animate every frame. Usually this doesn't need to be touched."
					choices = {}
				}
				"gmod_allowphysgun":
				{
					typename = "boolean"
					shortinfo = "Allow Physics Gun"
					extra = "(only in [Garry's Mod])"
					notes = ""
					description = "If set, players cannot use Physics Gun on this entity."
					choices = {}
				}
				"gmod_allowtools":
				{
					typename = "string"
					shortinfo = "Sandbox Tool Whitelist"
					extra = "(only in [Garry's Mod])"
					notes = ""
					description = "If set, only given tools can be used on this entity. You need to supply the tool class names, the names of the .lua files of those tools. This also includes the context menu properties!"
					choices = {}
				}
				"ExplodeDamage":
				{
					typename = "float"
					shortinfo = "Explosion Damage"
					extra = ""
					notes = ""
					description = "If non-zero, when this entity breaks it will create an explosion that causes the specified amount of damage. See also Explosion Radius."
					choices = {}
				}
				"ExplodeRadius":
				{
					typename = "float"
					shortinfo = "Explodsion Radius"
					extra = ""
					notes = ""
					description = "If non-zero, when this entity breaks it will create an explosion with a radius of the specified amount. See also Explosion Damage."
					choices = {}
				}
				"puntsound":
				{
					typename = "sound"
					shortinfo = "Sound to make when punted"
					extra = "(in all games since [Half-Life 2: Episode One][Half-Life 2: Episode One])"
					notes = ""
					description = "Sound to make when punted by gravity gun."
					choices = {}
				}
				"BreakModelMessage":
				{
					typename = "string"
					shortinfo = "Break Model Message"
					extra = ""
					notes = ""
					description = "'If set, will use this break model message instead of the normal break behavior.'  Confirm:Is this new with Source SDK 2013...? It isn't in Alien Swarm or 2007 code but is in 2013. New with L4D?"
					choices = {}
				}
				"PerformanceMode":
				{
					typename = "choices"
					shortinfo = "Performance Mode"
					extra = ""
					notes = ""
					description = "Used to limit the amount of gibs produced when this entity breaks, for performance reasons.\n0: Normal\n1: No Gibs\n2: Full Gibs on All Platforms (Xbox 360, PS3, etc)\n3: Reduced gibs"
					choices = {}
				}
				"minhealthdmg":
				{
					typename = "integer"
					shortinfo = "Min Damage to Hurt"
					extra = ""
					notes = ""
					description = "If a single hit to the object doesn't do at least this much damage, the prop won't take any of the damage it attempted to give."
					choices = {}
				}
				"PressureDelay":
				{
					typename = "float"
					shortinfo = "Pressure Delay"
					extra = ""
					notes = ""
					description = "Seconds to delay breaking from pressure. Allows creaking/groaning sounds to play."
					choices = {}
				}
				"health":
				{
					typename = "integer"
					shortinfo = "Health"
					extra = ""
					notes = ""
					description = "How close to breaking the object is."
					choices = {}
				}
				"max_health":
				{
					typename = "integer"
					shortinfo = "Maximum Health"
					extra = ""
					notes = ""
					description = "Health cannot exceed this amount."
					choices = {}
				}
				"physdamagescale":
				{
					typename = "float"
					shortinfo = "Physics Impact Damage Scale"
					extra = ""
					notes = ""
					description = "Multiplier for damage amount when this entity is hit by a physics object. With a value of 0 the entity will take no damage from physics."
					choices = {}
				}
				"BreakableType":
				{
					typename = "choices"
					shortinfo = "Breakable By"
					extra = "(in all games since [Left 4 Dead])"
					notes = ""
					description = "[Left 4 Dead][Left 4 Dead 2] only. Who can break this?\n0: Everyone\n1: All Infected\n2: Only Tanks"
					choices = {}
				}
				"model":
				{
					typename = "string"
					shortinfo = "World Model"
					extra = ""
					notes = ""
					description = "The model this entity should appear as. 128-character limit."
					choices = {}
				}
				"skin_or_ModelSkin_[Alien_Swarm]":
				{
					typename = "integer"
					shortinfo = "Skin"
					extra = ""
					notes = ""
					description = "Some models have multiple skins. This value selects from the index, starting with 0."
					choices = {}
				}
				"solid":
				{
					typename = "choices"
					shortinfo = "Collisions"
					extra = ""
					notes = ""
					description = "Method of collision for this entity.\n0: None\n1: BSP (QPhysics) !FGD �Bug:�In [Portal 2] Portal 2, if an entity using QPhysics collisions is hit by Gel, the game will crash!\n2: Bounding Box\n3: Oriented Bounding Box !FGD\n4: Oriented Bounding Box, constrained to Yaw only !FGD\n5: Custom/Test !FGD\n6: VPhysics"
					choices = {}
				}
				"body_or_SetBodyGroup":
				{
					typename = "integer"
					shortinfo = "Body Group"
					extra = "!FGD"
					notes = ""
					description = "Sets the the active $bodygroup."
					choices = {}
				}
				"hitboxset":
				{
					typename = "string"
					shortinfo = "Hitbox Set"
					extra = "!FGD"
					notes = ""
					description = "Sets the $hboxset to use."
					choices = {}
				}
				"sequence":
				{
					typename = "integer"
					shortinfo = "Sequence"
					extra = "!FGD"
					notes = ""
					description = "Default animation sequence for the model to be playing after spawning."
					choices = {}
				}
				"playbackrate":
				{
					typename = "float"
					shortinfo = "Playback Rate"
					extra = "!FGD"
					notes = ""
					description = "A multiplier of the framerate at which animations are played, negative values are accepted. Default is 1.0"
					choices = {}
				}
				"cycle":
				{
					typename = "float"
					shortinfo = "Cycle"
					extra = "!FGD"
					notes = ""
					description = "The current frame of the currently playing animation, on a range from 0-1."
					choices = {}
				}
				"LightingOrigin":
				{
					typename = "targetname"
					shortinfo = "Lighting Origin"
					extra = ""
					notes = ""
					description = "Select an entity (not info_lighting!) from which to sample lighting instead of the entity's origin."
					choices = {}
				}
				"LightingOriginHack":
				{
					typename = "targetname"
					shortinfo = "Lighting Origin Offset"
					extra = "!FGD"
					notes = ""
					description = "The info_lighting_relative from which to sample lighting instead of the entity's origin. Not in [Left 4 Dead][Left 4 Dead 2]."
					choices = {}
				}
				"damagefilter":
				{
					typename = "targetname"
					shortinfo = "Damage Filter Name"
					extra = ""
					notes = ""
					description = "When this entity receives damage, it will filter by this entity."
					choices = {}
				}
				"fademindist":
				{
					typename = "float"
					shortinfo = "Start Fade Distance"
					extra = ""
					notes = ""
					description = "Distance at which the entity starts fading. If <0, the entity will disappear instantly when end fade is hit. The value will scale appropriately if the entity is in a 3D Skybox."
					choices = {}
				}
				"fademaxdist":
				{
					typename = "float"
					shortinfo = "End Fade Distance"
					extra = ""
					notes = ""
					description = "Distance at which the entity ends fading. If <0, the entity won't disappear at all. The value will scale appropriately if the entity is in a 3D Skybox."
					choices = {}
				}
				"fadescale":
				{
					typename = "float"
					shortinfo = "Fade Scale"
					extra = ""
					notes = ""
					description = "If specified in the worldspawn, or if the engine is running below DirectX 8, entities will fade out even if the fade distances above aren't specified. This value gives more control over when this happens: numbers smaller than 1 cause the entity to fade out at further distances, and greater than 1 cause it to fade out at closer distances. Using 0 turns off the forced fade altogether. See also $noforcedfade."
					choices = {}
				}
				"rendermode":
				{
					typename = "choices"
					shortinfo = "Render Mode"
					extra = ""
					notes = ""
					description = "Set a non-standard rendering mode on this entity."
					choices = 
					{
						"0" : "Normal"
						"1" : "Color"
						"2" : "Texture"
						"3" : "Glow"
						"4" : "Solid/Alphatest"
						"5" : "Additive"
						"6" : "Removed, does nothing"
						"7" : "Additive Fractional Frame"
						"8" : "Alpha Add"
						"9" : "World Space Glow"
						"10" : "Don't Render"

					}
				}
				"renderamt":
				{
					typename = "integer"
					shortinfo = "Render FX / Transparency (0 - 255)"
					extra = ""
					notes = ""
					description = "Transparency amount, requires a Render Mode other than Normal. 0 is invisible, 255 is fully visible."
					choices = {}
				}
				"rendercolor":
				{
					typename = "color255"
					shortinfo = "Render Color (R G B)"
					extra = ""
					notes = ""
					description = "Color tint."
					choices = {}
				}
				"renderfx":
				{
					typename = "choices"
					shortinfo = "Render FX"
					extra = ""
					notes = ""
					description = "Preset pattern of appearance effects."
					choices = 
					{
						"0" : "None"
						"1" : "Slow Pulse"
						"2" : "Fast Pulse"
						"3" : "Slow Wide Pulse"
						"4" : "Fast Wide Pulse"
						"5" : "Slow Fade Away"
						"6" : "Fast Fade Away"
						"7" : "Slow Become Solid"
						"8" : "Fast Become Solid"
						"9" : "Slow Strobe"
						"10" : "Fast Strobe"
						"11" : "Faster Strobe"
						"12" : "Slow Flicker"
						"13" : "Fast Flicker"
						"14" : "Constant Glow"
						"15" : "Distort"
						"16" : "Hologram (Distort + fade)"
						"17" : "Scale Up"
						"22" : "Spotlight FX"
						"23" : "Cull By Distance"
						"24" : "Fade Wider Pulse"
						"26" : "Fade Near"

					}
				}
			}
		}
		prop_dynamic_override = 
		{
			description = "prop_dynamic_override is a  point entity available in all Source games. A variant of prop_dynamic which will permit using models designed to be used as prop_physics. Although this entity provides the freedom of turning physics props into dynamic props, be aware of that players will rely on the behavior of props to be more or less consistent with other maps, and even other Source games."
			flagnotes = ""
			flags = 
			{
				"16":
				{
					category = "BreakableProp"
					description = "Break on Touch"
					notes = ""
				}
				"32":
				{
					category = "BreakableProp"
					description = "Break on Pressure"
					notes = ""
				}
				"64":
				{
					category = ""
					description = "Use Hitboxes for Renderbox"
					notes = ""
				}
				"256":
				{
					category = ""
					description = "Start with collision disabled"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"DefaultAnim":
				{
					typename = "string"
					shortinfo = "Default Animation"
					extra = ""
					notes = ""
					description = "The animation this prop will play when not doing a random or forced animation."
					choices = {}
				}
				"RandomAnimation":
				{
					typename = "boolean"
					shortinfo = "Randomly Animate"
					extra = ""
					notes = ""
					description = "Makes the prop randomly select and play animations at intervals defined by the Min/Max Random Anim Time KVs. In between the random animations, it will revert to playing Default Animation."
					choices = {}
				}
				"MinAnimTime":
				{
					typename = "float"
					shortinfo = "Min Random Anim Time"
					extra = ""
					notes = ""
					description = "Minimum time between random animations."
					choices = {}
				}
				"MaxAnimTime":
				{
					typename = "float"
					shortinfo = "Max Random Anim Time"
					extra = ""
					notes = ""
					description = "Maximum time between random animations."
					choices = {}
				}
				"updatechildren":
				{
					typename = "boolean"
					shortinfo = "Update children"
					extra = ""
					notes = ""
					description = "Confirm:A boolean set to true by default. When set to 0, any children attached to this entity as an attachment will not update. (seems like it would not have a practical use...)"
					choices = {}
				}
				"DisableBoneFollowers":
				{
					typename = "boolean"
					shortinfo = "Disable Bone Followers"
					extra = "(in all games since [Source][Source])"
					notes = ""
					description = "Disables generation of phys_bone_followers for each convex piece the model has in its collision model. phys_bone_followers can quickly eat up the edict count, so this keyvalue can be very helpful in freeing resources. This will however make the collision model no longer function ([confirm] As in become non-solid?), and the model will not be able to ragdoll anymore."
					choices = {}
				}
				"HoldAnimation":
				{
					typename = "boolean"
					shortinfo = "Hold Animation"
					extra = "(in all games since [Alien Swarm])"
					notes = ""
					description = "If set, the prop will not loop its animation, but hold the last frame."
					choices = {}
				}
				"AnimateEveryFrame":
				{
					typename = "boolean"
					shortinfo = "Animate Every Frame"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Force this prop to animate every frame. Usually this doesn't need to be touched."
					choices = {}
				}
				"gmod_allowphysgun":
				{
					typename = "boolean"
					shortinfo = "Allow Physics Gun"
					extra = "(only in [Garry's Mod])"
					notes = ""
					description = "If set, players cannot use Physics Gun on this entity."
					choices = {}
				}
				"gmod_allowtools":
				{
					typename = "string"
					shortinfo = "Sandbox Tool Whitelist"
					extra = "(only in [Garry's Mod])"
					notes = ""
					description = "If set, only given tools can be used on this entity. You need to supply the tool class names, the names of the .lua files of those tools. This also includes the context menu properties!"
					choices = {}
				}
				"ExplodeDamage":
				{
					typename = "float"
					shortinfo = "Explosion Damage"
					extra = ""
					notes = ""
					description = "If non-zero, when this entity breaks it will create an explosion that causes the specified amount of damage. See also Explosion Radius."
					choices = {}
				}
				"ExplodeRadius":
				{
					typename = "float"
					shortinfo = "Explodsion Radius"
					extra = ""
					notes = ""
					description = "If non-zero, when this entity breaks it will create an explosion with a radius of the specified amount. See also Explosion Damage."
					choices = {}
				}
				"puntsound":
				{
					typename = "sound"
					shortinfo = "Sound to make when punted"
					extra = "(in all games since [Half-Life 2: Episode One][Half-Life 2: Episode One])"
					notes = ""
					description = "Sound to make when punted by gravity gun."
					choices = {}
				}
				"BreakModelMessage":
				{
					typename = "string"
					shortinfo = "Break Model Message"
					extra = ""
					notes = ""
					description = "'If set, will use this break model message instead of the normal break behavior.'  Confirm:Is this new with Source SDK 2013...? It isn't in Alien Swarm or 2007 code but is in 2013. New with L4D?"
					choices = {}
				}
				"PerformanceMode":
				{
					typename = "choices"
					shortinfo = "Performance Mode"
					extra = ""
					notes = ""
					description = "Used to limit the amount of gibs produced when this entity breaks, for performance reasons.\n0: Normal\n1: No Gibs\n2: Full Gibs on All Platforms (Xbox 360, PS3, etc)\n3: Reduced gibs"
					choices = {}
				}
				"minhealthdmg":
				{
					typename = "integer"
					shortinfo = "Min Damage to Hurt"
					extra = ""
					notes = ""
					description = "If a single hit to the object doesn't do at least this much damage, the prop won't take any of the damage it attempted to give."
					choices = {}
				}
				"PressureDelay":
				{
					typename = "float"
					shortinfo = "Pressure Delay"
					extra = ""
					notes = ""
					description = "Seconds to delay breaking from pressure. Allows creaking/groaning sounds to play."
					choices = {}
				}
				"health":
				{
					typename = "integer"
					shortinfo = "Health"
					extra = ""
					notes = ""
					description = "How close to breaking the object is."
					choices = {}
				}
				"max_health":
				{
					typename = "integer"
					shortinfo = "Maximum Health"
					extra = ""
					notes = ""
					description = "Health cannot exceed this amount."
					choices = {}
				}
				"physdamagescale":
				{
					typename = "float"
					shortinfo = "Physics Impact Damage Scale"
					extra = ""
					notes = ""
					description = "Multiplier for damage amount when this entity is hit by a physics object. With a value of 0 the entity will take no damage from physics."
					choices = {}
				}
				"BreakableType":
				{
					typename = "choices"
					shortinfo = "Breakable By"
					extra = "(in all games since [Left 4 Dead])"
					notes = ""
					description = "[Left 4 Dead][Left 4 Dead 2] only. Who can break this?\n0: Everyone\n1: All Infected\n2: Only Tanks"
					choices = {}
				}
				"model":
				{
					typename = "string"
					shortinfo = "World Model"
					extra = ""
					notes = ""
					description = "The model this entity should appear as. 128-character limit."
					choices = {}
				}
				"skin_or_ModelSkin_[Alien_Swarm]":
				{
					typename = "integer"
					shortinfo = "Skin"
					extra = ""
					notes = ""
					description = "Some models have multiple skins. This value selects from the index, starting with 0."
					choices = {}
				}
				"solid":
				{
					typename = "choices"
					shortinfo = "Collisions"
					extra = ""
					notes = ""
					description = "Method of collision for this entity.\n0: None\n1: BSP (QPhysics) !FGD �Bug:�In [Portal 2] Portal 2, if an entity using QPhysics collisions is hit by Gel, the game will crash!\n2: Bounding Box\n3: Oriented Bounding Box !FGD\n4: Oriented Bounding Box, constrained to Yaw only !FGD\n5: Custom/Test !FGD\n6: VPhysics"
					choices = {}
				}
				"body_or_SetBodyGroup":
				{
					typename = "integer"
					shortinfo = "Body Group"
					extra = "!FGD"
					notes = ""
					description = "Sets the the active $bodygroup."
					choices = {}
				}
				"hitboxset":
				{
					typename = "string"
					shortinfo = "Hitbox Set"
					extra = "!FGD"
					notes = ""
					description = "Sets the $hboxset to use."
					choices = {}
				}
				"sequence":
				{
					typename = "integer"
					shortinfo = "Sequence"
					extra = "!FGD"
					notes = ""
					description = "Default animation sequence for the model to be playing after spawning."
					choices = {}
				}
				"playbackrate":
				{
					typename = "float"
					shortinfo = "Playback Rate"
					extra = "!FGD"
					notes = ""
					description = "A multiplier of the framerate at which animations are played, negative values are accepted. Default is 1.0"
					choices = {}
				}
				"cycle":
				{
					typename = "float"
					shortinfo = "Cycle"
					extra = "!FGD"
					notes = ""
					description = "The current frame of the currently playing animation, on a range from 0-1."
					choices = {}
				}
				"LightingOrigin":
				{
					typename = "targetname"
					shortinfo = "Lighting Origin"
					extra = ""
					notes = ""
					description = "Select an entity (not info_lighting!) from which to sample lighting instead of the entity's origin."
					choices = {}
				}
				"LightingOriginHack":
				{
					typename = "targetname"
					shortinfo = "Lighting Origin Offset"
					extra = "!FGD"
					notes = ""
					description = "The info_lighting_relative from which to sample lighting instead of the entity's origin. Not in [Left 4 Dead][Left 4 Dead 2]."
					choices = {}
				}
				"damagefilter":
				{
					typename = "targetname"
					shortinfo = "Damage Filter Name"
					extra = ""
					notes = ""
					description = "When this entity receives damage, it will filter by this entity."
					choices = {}
				}
				"fademindist":
				{
					typename = "float"
					shortinfo = "Start Fade Distance"
					extra = ""
					notes = ""
					description = "Distance at which the entity starts fading. If <0, the entity will disappear instantly when end fade is hit. The value will scale appropriately if the entity is in a 3D Skybox."
					choices = {}
				}
				"fademaxdist":
				{
					typename = "float"
					shortinfo = "End Fade Distance"
					extra = ""
					notes = ""
					description = "Distance at which the entity ends fading. If <0, the entity won't disappear at all. The value will scale appropriately if the entity is in a 3D Skybox."
					choices = {}
				}
				"fadescale":
				{
					typename = "float"
					shortinfo = "Fade Scale"
					extra = ""
					notes = ""
					description = "If specified in the worldspawn, or if the engine is running below DirectX 8, entities will fade out even if the fade distances above aren't specified. This value gives more control over when this happens: numbers smaller than 1 cause the entity to fade out at further distances, and greater than 1 cause it to fade out at closer distances. Using 0 turns off the forced fade altogether. See also $noforcedfade."
					choices = {}
				}
				"rendermode":
				{
					typename = "choices"
					shortinfo = "Render Mode"
					extra = ""
					notes = ""
					description = "Set a non-standard rendering mode on this entity."
					choices = 
					{
						"0" : "Normal"
						"1" : "Color"
						"2" : "Texture"
						"3" : "Glow"
						"4" : "Solid/Alphatest"
						"5" : "Additive"
						"6" : "Removed, does nothing"
						"7" : "Additive Fractional Frame"
						"8" : "Alpha Add"
						"9" : "World Space Glow"
						"10" : "Don't Render"

					}
				}
				"renderamt":
				{
					typename = "integer"
					shortinfo = "Render FX / Transparency (0 - 255)"
					extra = ""
					notes = ""
					description = "Transparency amount, requires a Render Mode other than Normal. 0 is invisible, 255 is fully visible."
					choices = {}
				}
				"rendercolor":
				{
					typename = "color255"
					shortinfo = "Render Color (R G B)"
					extra = ""
					notes = ""
					description = "Color tint."
					choices = {}
				}
				"renderfx":
				{
					typename = "choices"
					shortinfo = "Render FX"
					extra = ""
					notes = ""
					description = "Preset pattern of appearance effects."
					choices = 
					{
						"0" : "None"
						"1" : "Slow Pulse"
						"2" : "Fast Pulse"
						"3" : "Slow Wide Pulse"
						"4" : "Fast Wide Pulse"
						"5" : "Slow Fade Away"
						"6" : "Fast Fade Away"
						"7" : "Slow Become Solid"
						"8" : "Fast Become Solid"
						"9" : "Slow Strobe"
						"10" : "Fast Strobe"
						"11" : "Faster Strobe"
						"12" : "Slow Flicker"
						"13" : "Fast Flicker"
						"14" : "Constant Glow"
						"15" : "Distort"
						"16" : "Hologram (Distort + fade)"
						"17" : "Scale Up"
						"22" : "Spotlight FX"
						"23" : "Cull By Distance"
						"24" : "Fade Wider Pulse"
						"26" : "Fade Near"

					}
				}
			}
		}
		prop_physics = 
		{
			description = "prop_physics is a  point entity available in all Source games. It is used to add rigid, VPhysics-simulated models to the world.\nThe only value required for prop_physics to work is a path to a model. As long as that model is physics-enabled, the correct data will be loaded from it when the map starts. It is possible to change any embedded physics data with the 'Override Parameters' keyvalue.\nPhysics objects like prop_physics can be parented, though it is not in the default FGD and may not function correctly. It is recommended to instead use dynamic physics constraints. See Physics Entity Overview for more information."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Start Asleep."
					notes = ""
				}
				"2":
				{
					category = ""
					description = "Don't take physics damage."
					notes = ""
				}
				"4":
				{
					category = ""
					description = "Debris - Don't collide with the player or other debris."
					notes = ""
				}
				"8":
				{
					category = ""
					description = "Motion Disabled."
					notes = ""
				}
				"16":
				{
					category = "BreakableProp"
					description = "Break on Touch"
					notes = ""
				}
				"32":
				{
					category = "BreakableProp"
					description = "Break on Pressure"
					notes = ""
				}
				"64":
				{
					category = ""
					description = "Enable motion when grabbed by gravity gun."
					notes = ""
				}
				"128":
				{
					category = ""
					description = "Not affected by rotor wash."
					notes = ""
				}
				"256":
				{
					category = ""
					description = "Generate output on +use."
					notes = ""
				}
				"512":
				{
					category = ""
					description = "Prevent pickup."
					notes = ""
				}
				"1024":
				{
					category = ""
					description = "Prevent motion enable on player bump."
					notes = ""
				}
				"4096":
				{
					category = ""
					description = "Debris with trigger interaction."
					notes = ""
				}
				"8192":
				{
					category = ""
					description = "Force server-side (Multiplayer only; see sv_pushaway_clientside_size)"
					notes = ""
				}
				"1048576":
				{
					category = ""
					description = "Gravity gun can ALWAYS pick up. No matter what."
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"physdamagescale":
				{
					typename = "float"
					shortinfo = "Physics Impact Damage Scale"
					extra = ""
					notes = ""
					description = "Multiplies damage received from physics impacts. 0 means the feature is disabled for backwards compatibility."
					choices = {}
				}
				"Damagetype":
				{
					typename = "boolean"
					shortinfo = "Impact damage type"
					extra = ""
					notes = ""
					description = "If true (1), damage type is sharp and the object can slice others."
					choices = {}
				}
				"nodamageforces":
				{
					typename = "boolean"
					shortinfo = "Damaging it Doesn't Push It"
					extra = ""
					notes = ""
					description = "Whether damaging the entity applies force to it."
					choices = {}
				}
				"inertiascale":
				{
					typename = "float"
					shortinfo = "Scale Factor For Inertia"
					extra = ""
					notes = ""
					description = "Scales the angular mass of an object. Used to hack angular damage and collision response.  Confirm:Doesn't actually affect inertia?"
					choices = {}
				}
				"massscale":
				{
					typename = "float"
					shortinfo = "Mass Scale"
					extra = ""
					notes = ""
					description = "Multiplier for the object's mass."
					choices = {}
				}
				"overridescript":
				{
					typename = "string"
					shortinfo = "Override Parameters"
					extra = ""
					notes = ""
					description = "A list of physics keyvalues that are usually embedded in the model. Format is key,value,key,value,...."
					choices = {}
				}
				"damagetoenablemotion":
				{
					typename = "integer"
					shortinfo = "Health Level to Override Motion"
					extra = ""
					notes = ""
					description = "If specified, this object will start with motion disabled. Once its health has dropped below this specified amount, it will enable motion."
					choices = {}
				}
				"forcetoenablemotion":
				{
					typename = "float"
					shortinfo = "Physics Impact Force to Override Motion"
					extra = ""
					notes = ""
					description = "If specified, this object will start motion disabled. Any impact that imparts a force greater than this value will enable motion."
					choices = {}
				}
				"mindxlevel":
				{
					typename = "choices"
					shortinfo = "Minimum DX Level"
					extra = ""
					notes = ""
					description = "The entity will not exist if the engine is running outside the given range of DirectX Versions. Replaced by SystemLevelChoice from [Left 4 Dead] Left 4 Dead onwards.\n�Warning:�If these are used, the object may break when the user switches their DirectX settings."
					choices = {}
				}
				"maxdxlevel":
				{
					typename = "choices"
					shortinfo = "Maximum DX Level"
					extra = ""
					notes = ""
					description = "Default (no bounding)\nDX7\nDX8\nDX8.1\nDX9 SM2\nDX9 SM3"
					choices = {}
				}
				"mincpulevel":
				{
					typename = "choices"
					shortinfo = "Minimum CPU Level"
					extra = "(in all games since [Left 4 Dead])"
					notes = ""
					description = "A user with a CPU level lower than this will not see this object rendered in-game. CPU levels are determined by the Effect detail setting."
					choices = {}
				}
				"maxcpulevel":
				{
					typename = "choices"
					shortinfo = "Maximum CPU Level"
					extra = "(in all games since [Left 4 Dead])"
					notes = ""
					description = "0: Default\n1: Low\n2: Medium\n3: High"
					choices = {}
				}
				"mingpulevel":
				{
					typename = "choices"
					shortinfo = "Minimum GPU Level"
					extra = "(in all games since [Left 4 Dead])"
					notes = ""
					description = "A user with a GPU level lower than this will not see this object rendered in-game. GPU levels are determined by the Shader detail setting."
					choices = {}
				}
				"maxgpulevel":
				{
					typename = "choices"
					shortinfo = "Maximum GPU Level"
					extra = "(in all games since [Left 4 Dead])"
					notes = ""
					description = "0: Default\n1: Very low\n2: Low\n3: Medium\n4: High"
					choices = {}
				}
				"gmod_allowphysgun":
				{
					typename = "boolean"
					shortinfo = "Allow Physics Gun"
					extra = "(only in [Garry's Mod])"
					notes = ""
					description = "If set, players cannot use Physics Gun on this entity."
					choices = {}
				}
				"gmod_allowtools":
				{
					typename = "string"
					shortinfo = "Sandbox Tool Whitelist"
					extra = "(only in [Garry's Mod])"
					notes = ""
					description = "If set, only given tools can be used on this entity. You need to supply the tool class names, the names of the .lua files of those tools. This also includes the context menu properties!"
					choices = {}
				}
				"rendermode":
				{
					typename = "choices"
					shortinfo = "Render Mode"
					extra = ""
					notes = ""
					description = "Set a non-standard rendering mode on this entity."
					choices = 
					{
						"0" : "Normal"
						"1" : "Color"
						"2" : "Texture"
						"3" : "Glow"
						"4" : "Solid/Alphatest"
						"5" : "Additive"
						"6" : "Removed, does nothing"
						"7" : "Additive Fractional Frame"
						"8" : "Alpha Add"
						"9" : "World Space Glow"
						"10" : "Don't Render"

					}
				}
				"renderamt":
				{
					typename = "integer"
					shortinfo = "Render FX / Transparency (0 - 255)"
					extra = ""
					notes = ""
					description = "Transparency amount, requires a Render Mode other than Normal. 0 is invisible, 255 is fully visible."
					choices = {}
				}
				"rendercolor":
				{
					typename = "color255"
					shortinfo = "Render Color (R G B)"
					extra = ""
					notes = ""
					description = "Color tint."
					choices = {}
				}
				"disablereceiveshadows":
				{
					typename = "boolean"
					shortinfo = "Disable Receiving Shadows"
					extra = ""
					notes = ""
					description = "Prevent the entity from receiving shadows on itself."
					choices = {}
				}
				"renderfx":
				{
					typename = "choices"
					shortinfo = "Render FX"
					extra = ""
					notes = ""
					description = "Preset pattern of appearance effects."
					choices = 
					{
						"0" : "None"
						"1" : "Slow Pulse"
						"2" : "Fast Pulse"
						"3" : "Slow Wide Pulse"
						"4" : "Fast Wide Pulse"
						"5" : "Slow Fade Away"
						"6" : "Fast Fade Away"
						"7" : "Slow Become Solid"
						"8" : "Fast Become Solid"
						"9" : "Slow Strobe"
						"10" : "Fast Strobe"
						"11" : "Faster Strobe"
						"12" : "Slow Flicker"
						"13" : "Fast Flicker"
						"14" : "Constant Glow"
						"15" : "Distort"
						"16" : "Hologram (Distort + fade)"
						"17" : "Scale Up"
						"18" : "Glowing Shell (OBSOLETE)"
						"19" : "Clamp Minimum Scale (OBSOLETE)"
						"20" : "Environmental Rain (OBSOLETE)"
						"21" : "Environmental Snow (OBSOLETE)"
						"22" : "Spotlight FX"
						"23" : "Ragdoll"
						"24" : "Fade Wider Pulse"

					}
				}
			}
		}
		prop_physics_multiplayer = 
		{
			description = "prop_physics_multiplayer is a  point entity available in all Source games. It is identical to prop_physics except that it bounces away from collision (if sv_turbophysics is enabled), which helps to avoid the prediction errors that normal physics objects typically generate. \nTo do:�Test if this issue has been fixed in later versions of Source."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Start Asleep."
					notes = ""
				}
				"2":
				{
					category = ""
					description = "Don't take physics damage."
					notes = ""
				}
				"4":
				{
					category = ""
					description = "Debris - Don't collide with the player or other debris."
					notes = ""
				}
				"8":
				{
					category = ""
					description = "Motion Disabled."
					notes = ""
				}
				"16":
				{
					category = "BreakableProp"
					description = "Break on Touch"
					notes = ""
				}
				"32":
				{
					category = "BreakableProp"
					description = "Break on Pressure"
					notes = ""
				}
				"64":
				{
					category = ""
					description = "Enable motion when grabbed by gravity gun."
					notes = ""
				}
				"128":
				{
					category = ""
					description = "Not affected by rotor wash."
					notes = ""
				}
				"256":
				{
					category = ""
					description = "Generate output on +use."
					notes = ""
				}
				"512":
				{
					category = ""
					description = "Prevent pickup."
					notes = ""
				}
				"1024":
				{
					category = ""
					description = "Prevent motion enable on player bump."
					notes = ""
				}
				"4096":
				{
					category = ""
					description = "Debris with trigger interaction."
					notes = ""
				}
				"8192":
				{
					category = ""
					description = "Force server-side (Multiplayer only; see sv_pushaway_clientside_size)"
					notes = ""
				}
				"1048576":
				{
					category = ""
					description = "Gravity gun can ALWAYS pick up. No matter what."
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "choices"
					shortinfo = "Physics Mode"
					extra = ""
					notes = ""
					description = "Sets the physics mode used by the prop."
					choices = {}
				}
			}
		}
		prop_physics_override = 
		{
			description = "prop_physics_override is a  point entity available in all Source games. A prop type that will override the properties built into its model, making it work like a prop_physics entity. The health of props can also be overridden by using this entity.\nGenerally, if a prop_physics in your map has been removed because its model wasn't meant to be a physics prop, you can use this entity to still make it a prop_physics, without any drawbacks.\nAlthough this entity provides the freedom of turning any prop into a physics prop, be aware of that players will rely on the behavior of props to be more or less consistent with other maps, and even other Source games.\nIn code it is represented by class CPhysicsProp, defined in props.cpp."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Start Asleep."
					notes = ""
				}
				"2":
				{
					category = ""
					description = "Don't take physics damage."
					notes = ""
				}
				"4":
				{
					category = ""
					description = "Debris - Don't collide with the player or other debris."
					notes = ""
				}
				"8":
				{
					category = ""
					description = "Motion Disabled."
					notes = ""
				}
				"16":
				{
					category = "BreakableProp"
					description = "Break on Touch"
					notes = ""
				}
				"32":
				{
					category = "BreakableProp"
					description = "Break on Pressure"
					notes = ""
				}
				"64":
				{
					category = ""
					description = "Enable motion when grabbed by gravity gun."
					notes = ""
				}
				"128":
				{
					category = ""
					description = "Not affected by rotor wash."
					notes = ""
				}
				"256":
				{
					category = ""
					description = "Generate output on +use."
					notes = ""
				}
				"512":
				{
					category = ""
					description = "Prevent pickup."
					notes = ""
				}
				"1024":
				{
					category = ""
					description = "Prevent motion enable on player bump."
					notes = ""
				}
				"4096":
				{
					category = ""
					description = "Debris with trigger interaction."
					notes = ""
				}
				"8192":
				{
					category = ""
					description = "Force server-side (Multiplayer only; see sv_pushaway_clientside_size)"
					notes = ""
				}
				"1048576":
				{
					category = ""
					description = "Gravity gun can ALWAYS pick up. No matter what."
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "integer"
					shortinfo = "Health"
					extra = ""
					notes = ""
					description = "Number of points of damage to take before breaking. 0 means don't break."
					choices = {}
				}
				"physdamagescale":
				{
					typename = "float"
					shortinfo = "Physics Impact Damage Scale"
					extra = ""
					notes = ""
					description = "Multiplies damage received from physics impacts. 0 means the feature is disabled for backwards compatibility."
					choices = {}
				}
				"Damagetype":
				{
					typename = "boolean"
					shortinfo = "Impact damage type"
					extra = ""
					notes = ""
					description = "If true (1), damage type is sharp and the object can slice others."
					choices = {}
				}
				"nodamageforces":
				{
					typename = "boolean"
					shortinfo = "Damaging it Doesn't Push It"
					extra = ""
					notes = ""
					description = "Whether damaging the entity applies force to it."
					choices = {}
				}
				"inertiascale":
				{
					typename = "float"
					shortinfo = "Scale Factor For Inertia"
					extra = ""
					notes = ""
					description = "Scales the angular mass of an object. Used to hack angular damage and collision response.  Confirm:Doesn't actually affect inertia?"
					choices = {}
				}
				"massscale":
				{
					typename = "float"
					shortinfo = "Mass Scale"
					extra = ""
					notes = ""
					description = "Multiplier for the object's mass."
					choices = {}
				}
				"overridescript":
				{
					typename = "string"
					shortinfo = "Override Parameters"
					extra = ""
					notes = ""
					description = "A list of physics keyvalues that are usually embedded in the model. Format is key,value,key,value,...."
					choices = {}
				}
				"damagetoenablemotion":
				{
					typename = "integer"
					shortinfo = "Health Level to Override Motion"
					extra = ""
					notes = ""
					description = "If specified, this object will start with motion disabled. Once its health has dropped below this specified amount, it will enable motion."
					choices = {}
				}
				"forcetoenablemotion":
				{
					typename = "float"
					shortinfo = "Physics Impact Force to Override Motion"
					extra = ""
					notes = ""
					description = "If specified, this object will start motion disabled. Any impact that imparts a force greater than this value will enable motion."
					choices = {}
				}
				"mindxlevel":
				{
					typename = "choices"
					shortinfo = "Minimum DX Level"
					extra = ""
					notes = ""
					description = "The entity will not exist if the engine is running outside the given range of DirectX Versions. Replaced by SystemLevelChoice from [Left 4 Dead] Left 4 Dead onwards.\n�Warning:�If these are used, the object may break when the user switches their DirectX settings."
					choices = {}
				}
				"maxdxlevel":
				{
					typename = "choices"
					shortinfo = "Maximum DX Level"
					extra = ""
					notes = ""
					description = "Default (no bounding)\nDX7\nDX8\nDX8.1\nDX9 SM2\nDX9 SM3"
					choices = {}
				}
				"mincpulevel":
				{
					typename = "choices"
					shortinfo = "Minimum CPU Level"
					extra = "(in all games since [Left 4 Dead])"
					notes = ""
					description = "A user with a CPU level lower than this will not see this object rendered in-game. CPU levels are determined by the Effect detail setting."
					choices = {}
				}
				"maxcpulevel":
				{
					typename = "choices"
					shortinfo = "Maximum CPU Level"
					extra = "(in all games since [Left 4 Dead])"
					notes = ""
					description = "0: Default\n1: Low\n2: Medium\n3: High"
					choices = {}
				}
				"mingpulevel":
				{
					typename = "choices"
					shortinfo = "Minimum GPU Level"
					extra = "(in all games since [Left 4 Dead])"
					notes = ""
					description = "A user with a GPU level lower than this will not see this object rendered in-game. GPU levels are determined by the Shader detail setting."
					choices = {}
				}
				"maxgpulevel":
				{
					typename = "choices"
					shortinfo = "Maximum GPU Level"
					extra = "(in all games since [Left 4 Dead])"
					notes = ""
					description = "0: Default\n1: Very low\n2: Low\n3: Medium\n4: High"
					choices = {}
				}
				"gmod_allowphysgun":
				{
					typename = "boolean"
					shortinfo = "Allow Physics Gun"
					extra = "(only in [Garry's Mod])"
					notes = ""
					description = "If set, players cannot use Physics Gun on this entity."
					choices = {}
				}
				"gmod_allowtools":
				{
					typename = "string"
					shortinfo = "Sandbox Tool Whitelist"
					extra = "(only in [Garry's Mod])"
					notes = ""
					description = "If set, only given tools can be used on this entity. You need to supply the tool class names, the names of the .lua files of those tools. This also includes the context menu properties!"
					choices = {}
				}
			}
		}
		prop_ragdoll = 
		{
			description = "prop_ragdoll is a  point entity available in all Source games. It is a VPhysics ragdoll. Ragdolls are collections of physics objects constrained together to simulate a jointed object like a dead body. They are very expensive to simulate.\n In code, it is represented by class CRagdollProp, defined in physics_prop_ragdoll.cpp.\nSee also Prop Types Overview."
			flagnotes = ""
			flags = 
			{
				"4":
				{
					category = ""
					description = "Debris - Don't collide with the player or other debris"
					notes = ""
				}
				"8192":
				{
					category = ""
					description = "Allow Dissolve"
					notes = ""
				}
				"16384":
				{
					category = ""
					description = "Motion Disabled"
					notes = ""
				}
				"32768":
				{
					category = ""
					description = "Allow stretch"
					notes = ""
				}
				"65536":
				{
					category = ""
					description = "Start asleep"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "integer"
					shortinfo = "sequence"
					extra = "!FGD"
					notes = ""
					description = "The ragdoll will be moved to the first frame of this animation before VPhysics takes over. �Bug:�Doesn't function."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "integer"
					shortinfo = "body"
					extra = "!FGD"
					notes = ""
					description = "Specifies which body group should be used."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "string"
					shortinfo = "Override Animation"
					extra = ""
					notes = ""
					description = "Filled in by the engine via wc_update_entity. Do not edit by hand except to clear."
					choices = {}
				}
				"mindxlevel":
				{
					typename = "choices"
					shortinfo = "Minimum DX Level"
					extra = ""
					notes = ""
					description = "The entity will not exist if the engine is running outside the given range of DirectX Versions. Replaced by SystemLevelChoice from [Left 4 Dead] Left 4 Dead onwards.\n�Warning:�If these are used, the object may break when the user switches their DirectX settings."
					choices = {}
				}
				"maxdxlevel":
				{
					typename = "choices"
					shortinfo = "Maximum DX Level"
					extra = ""
					notes = ""
					description = "Default (no bounding)\nDX7\nDX8\nDX8.1\nDX9 SM2\nDX9 SM3"
					choices = {}
				}
				"mincpulevel":
				{
					typename = "choices"
					shortinfo = "Minimum CPU Level"
					extra = "(in all games since [Left 4 Dead])"
					notes = ""
					description = "A user with a CPU level lower than this will not see this object rendered in-game. CPU levels are determined by the Effect detail setting."
					choices = {}
				}
				"maxcpulevel":
				{
					typename = "choices"
					shortinfo = "Maximum CPU Level"
					extra = "(in all games since [Left 4 Dead])"
					notes = ""
					description = "0: Default\n1: Low\n2: Medium\n3: High"
					choices = {}
				}
				"mingpulevel":
				{
					typename = "choices"
					shortinfo = "Minimum GPU Level"
					extra = "(in all games since [Left 4 Dead])"
					notes = ""
					description = "A user with a GPU level lower than this will not see this object rendered in-game. GPU levels are determined by the Shader detail setting."
					choices = {}
				}
				"maxgpulevel":
				{
					typename = "choices"
					shortinfo = "Maximum GPU Level"
					extra = "(in all games since [Left 4 Dead])"
					notes = ""
					description = "0: Default\n1: Very low\n2: Low\n3: Medium\n4: High"
					choices = {}
				}
				"model":
				{
					typename = "string"
					shortinfo = "World Model"
					extra = ""
					notes = ""
					description = "The model this entity should appear as. 128-character limit."
					choices = {}
				}
				"skin":
				{
					typename = "integer"
					shortinfo = "Skin"
					extra = ""
					notes = ""
					description = "Some models have multiple skins. This value selects from the index, starting with 0. �Tip:�Hammer's model browser automatically updates this value if you use it to view different skins."
					choices = {}
				}
				"modelscale":
				{
					typename = "float"
					shortinfo = "Model Scale"
					extra = "(in all games since [Source][Source])"
					notes = ""
					description = "A multiplier for the size of the model."
					choices = {}
				}
				"disableshadows":
				{
					typename = "boolean"
					shortinfo = "Disable Shadows"
					extra = ""
					notes = ""
					description = "Prevents the entity from creating cheap render-to-texture shadows, or lightmap shadows if the entity is a prop_static. Does not affect shadow mapping."
					choices = {}
				}
				"disableshadowdepth":
				{
					typename = "boolean"
					shortinfo = "Disable ShadowDepth"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable rendering into shadow depth (for projected textures) for this entity."
					choices = {}
				}
				"shadowdepthnocache":
				{
					typename = "choices"
					shortinfo = "Projected Texture Cache"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to hint projected texture system whether it is sufficient to cache shadow volume of this entity or to force render it every frame instead.\n0�: Default\n1�: No cache - render every frame\n2�: Cache it - render only once"
					choices = {}
				}
				"disableflashlight":
				{
					typename = "boolean"
					shortinfo = "Disable flashlight"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable projected texture lighting and shadows on this entity."
					choices = {}
				}
				"drawinfastreflection":
				{
					typename = "boolean"
					shortinfo = "Render in Fast Reflections"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "If enabled, this entity will render in fast water reflections (i.e. when a water material specifies $reflectonlymarkedentities) and in the world impostor pass."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
				"fademindist":
				{
					typename = "float"
					shortinfo = "Start Fade Dist"
					extra = ""
					notes = ""
					description = "Distance at which the prop starts to fade."
					choices = {}
				}
				"fademaxdist":
				{
					typename = "float"
					shortinfo = "End Fade Dist"
					extra = ""
					notes = ""
					description = "Max fade distance at which the prop is visible.\nIf start fade is <0, the prop will disappear instantly when end fade is hit.\nIf end fade is <0, the prop won't disappear at all. (This is the default behaviour.)\nThe values will scale appropriately if the prop is in a 3D Skybox."
					choices = {}
				}
				"fadescale":
				{
					typename = "float"
					shortinfo = "Fade Scale"
					extra = ""
					notes = ""
					description = "If you specify so in worldspawn, or if the engine is running below DirectX 8 (DX7 in Ep1), props will fade out even if the fade distances above aren't specified. This value gives you some control over when this happens: numbers smaller than 1 cause the prop to fade out at further distances, and greater than 1 cause it to fade out at closer distances. Using 0 turns off the forced fade altogether. See also the QC command $noforcedfade."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"gmod_allowphysgun":
				{
					typename = "boolean"
					shortinfo = "Allow Physics Gun"
					extra = "(only in [Garry's Mod])"
					notes = ""
					description = "If set, players cannot use Physics Gun on this entity."
					choices = {}
				}
				"gmod_allowtools":
				{
					typename = "string"
					shortinfo = "Sandbox Tool Whitelist"
					extra = "(only in [Garry's Mod])"
					notes = ""
					description = "If set, only given tools can be used on this entity. You need to supply the tool class names, the names of the .lua files of those tools. This also includes the context menu properties!"
					choices = {}
				}
			}
		}
		prop_static = 
		{
			description = "prop_static is a internal point entity available in all Source games. It is used to cheaply add a model to the world. It cannot move, animate, or accept input, and doesn't exist as an entity after the map has been compiled. The vast majority of models in a typical map are prop_statics.\nA prop_static will collide with other objects assuming it has a collision mesh, and, unlike all other model entities, can be lit per-vertex and cast shadows onto lightmaps."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"solid":
				{
					typename = "choices"
					shortinfo = "Collisions"
					extra = ""
					notes = ""
					description = "How the prop should interact with other objects.\nNot solid\nUse bounding box\nUse VPhysics (default) �Note:�Using this setting on models without a collision mesh will cause the engine to throw a warning upon loading the map. If you see such a warning, reset the collision of all props using the noted model to one of the other two choices."
					choices = {}
				}
				"screenspacefade":
				{
					typename = "boolean"
					shortinfo = "Screen Space Fade"
					extra = ""
					notes = ""
					description = "If enabled, the prop will fade out based on how many screen pixels it covers. The start and end fade distances come to represent the pixels that the prop covers at the start and end of its fade when this is enabled."
					choices = {}
				}
				"lightingorigin":
				{
					typename = "targetname"
					shortinfo = "Lighting Origin"
					extra = ""
					notes = ""
					description = "An info_lighting from which to sample lighting (instead of the model's origin). Disables per-vertex lighting."
					choices = {}
				}
				"disablevertexlighting":
				{
					typename = "boolean"
					shortinfo = "Disable Vertex lighting"
					extra = ""
					notes = ""
					description = "Prop will be lit uniformly with a lighting value sampled from its origin. Enable this if the entity is not shadowed by another object."
					choices = {}
				}
				"disableselfshadowing":
				{
					typename = "boolean"
					shortinfo = "Disable Self-Shadowing with vertex lighting"
					extra = ""
					notes = ""
					description = "When vertex lighting is enabled, prevent the geometry from self-shadowing -- casting shadows onto itself."
					choices = {}
				}
				"ignorenormals":
				{
					typename = "boolean"
					shortinfo = "Ignore surface normal for computing vertex lighting"
					extra = ""
					notes = ""
					description = "When vertex lighting is enabled, ignore the surface normal of faces when calculating the vertex lighting.\n�Tip:�Useful for thin, translucent objects such as leaves on foliage props."
					choices = {}
				}
				"renderamt":
				{
					typename = "integer"
					shortinfo = "Alpha"
					extra = "(in all games since [Left 4 Dead])"
					notes = ""
					description = "Alpha of the fade, where 0 is fully transparent and 255 is fully opaque."
					choices = {}
				}
				"rendercolor":
				{
					typename = "color255"
					shortinfo = "Render Color (R G B)"
					extra = "(in all games since [Left 4 Dead])"
					notes = ""
					description = "Tint the model with this color."
					choices = {}
				}
				"generatelightmaps":
				{
					typename = "boolean"
					shortinfo = "Generate (and use) lightmaps for this static prop"
					extra = "(only in [Source][Source][Source])"
					notes = ""
					description = "Generate a lightmap for this prop. Requires -StaticPropLighting to be enabled in VRAD. For more information, visit tf2maps.net.\n�Note:�Lightmapping can be also faked on static props using the Modulate shader in all games, although syncing the lighting can be difficult.\n�Bug:�[Counter-Strike: Source] This setting doesn't work on models with multiple skins."
					choices = {}
				}
				"lightmapresolutionx":
				{
					typename = "integer"
					shortinfo = "Lightmap Resolution X"
					extra = "(only in [Source][Source][Source])"
					notes = ""
					description = "The resolution of the generated lightmap in the X (or U) direction. (Only used if Generate Lightmaps is Yes.)"
					choices = {}
				}
				"lightmapresolutiony":
				{
					typename = "integer"
					shortinfo = "Lightmap Resolution Y"
					extra = "(only in [Source][Source][Source])"
					notes = ""
					description = "The resolution of the generated lightmap in the Y (or V) direction. (Only used if Generate Lightmaps is Yes.)"
					choices = {}
				}
				"enablelightbounce":
				{
					typename = "boolean"
					shortinfo = "Enable Bounced Lighting"
					extra = "(only in [Counter-Strike: Global Offensive])"
					notes = ""
					description = "Whether VRAD should create indirect lighting from this prop."
					choices = {}
				}
				"preventpropcombine":
				{
					typename = "boolean"
					shortinfo = "Disable Prop Combine"
					extra = "(only in [Counter-Strike: Global Offensive])"
					notes = ""
					description = "Prevent this static prop from combining with any other static props in vbsp."
					choices = {}
				}
				"uniformscale":
				{
					typename = "float"
					shortinfo = "Uniform Scaling"
					extra = "(only in [Counter-Strike: Global Offensive])"
					notes = ""
					description = "Evenly scales a given model along the X Y Z axis.\n�Bug:�In Hammer, undoing/redoing any changes (whether they are slight unit movements or scale changes) will result in the prop appearing 'normal' sized in the 3D Textured Viewport (the model only appears normal sized and the value given is still shown upon reload of the vmf)."
					choices = {}
				}
				"model":
				{
					typename = "string"
					shortinfo = "World Model"
					extra = ""
					notes = ""
					description = "The model this entity should appear as. 128-character limit."
					choices = {}
				}
				"skin":
				{
					typename = "integer"
					shortinfo = "Skin"
					extra = ""
					notes = ""
					description = "Some models have multiple skins. This value selects from the index, starting with 0. �Tip:�Hammer's model browser automatically updates this value if you use it to view different skins."
					choices = {}
				}
				"modelscale":
				{
					typename = "float"
					shortinfo = "Model Scale"
					extra = "(in all games since [Source][Source])"
					notes = ""
					description = "A multiplier for the size of the model."
					choices = {}
				}
				"disableshadows":
				{
					typename = "boolean"
					shortinfo = "Disable Shadows"
					extra = ""
					notes = ""
					description = "Prevents the entity from creating cheap render-to-texture shadows, or lightmap shadows if the entity is a prop_static. Does not affect shadow mapping."
					choices = {}
				}
				"disableshadowdepth":
				{
					typename = "boolean"
					shortinfo = "Disable ShadowDepth"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable rendering into shadow depth (for projected textures) for this entity."
					choices = {}
				}
				"shadowdepthnocache":
				{
					typename = "choices"
					shortinfo = "Projected Texture Cache"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to hint projected texture system whether it is sufficient to cache shadow volume of this entity or to force render it every frame instead.\n0�: Default\n1�: No cache - render every frame\n2�: Cache it - render only once"
					choices = {}
				}
				"disableflashlight":
				{
					typename = "boolean"
					shortinfo = "Disable flashlight"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable projected texture lighting and shadows on this entity."
					choices = {}
				}
				"drawinfastreflection":
				{
					typename = "boolean"
					shortinfo = "Render in Fast Reflections"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "If enabled, this entity will render in fast water reflections (i.e. when a water material specifies $reflectonlymarkedentities) and in the world impostor pass."
					choices = {}
				}
				"fademindist":
				{
					typename = "float"
					shortinfo = "Start Fade Dist"
					extra = ""
					notes = ""
					description = "Distance at which the prop starts to fade."
					choices = {}
				}
				"fademaxdist":
				{
					typename = "float"
					shortinfo = "End Fade Dist"
					extra = ""
					notes = ""
					description = "Max fade distance at which the prop is visible.\nIf start fade is <0, the prop will disappear instantly when end fade is hit.\nIf end fade is <0, the prop won't disappear at all. (This is the default behaviour.)\nThe values will scale appropriately if the prop is in a 3D Skybox."
					choices = {}
				}
				"fadescale":
				{
					typename = "float"
					shortinfo = "Fade Scale"
					extra = ""
					notes = ""
					description = "If you specify so in worldspawn, or if the engine is running below DirectX 8 (DX7 in Ep1), props will fade out even if the fade distances above aren't specified. This value gives you some control over when this happens: numbers smaller than 1 cause the prop to fade out at further distances, and greater than 1 cause it to fade out at closer distances. Using 0 turns off the forced fade altogether. See also the QC command $noforcedfade."
					choices = {}
				}
				"mindxlevel":
				{
					typename = "choices"
					shortinfo = "Minimum DX Level"
					extra = ""
					notes = ""
					description = "The entity will not exist if the engine is running outside the given range of DirectX Versions. Replaced by SystemLevelChoice from [Left 4 Dead] Left 4 Dead onwards.\n�Warning:�If these are used, the object may break when the user switches their DirectX settings."
					choices = {}
				}
				"maxdxlevel":
				{
					typename = "choices"
					shortinfo = "Maximum DX Level"
					extra = ""
					notes = ""
					description = "Default (no bounding)\nDX7\nDX8\nDX8.1\nDX9 SM2\nDX9 SM3"
					choices = {}
				}
				"mincpulevel":
				{
					typename = "choices"
					shortinfo = "Minimum CPU Level"
					extra = "(in all games since [Left 4 Dead])"
					notes = ""
					description = "A user with a CPU level lower than this will not see this object rendered in-game. CPU levels are determined by the Effect detail setting."
					choices = {}
				}
				"maxcpulevel":
				{
					typename = "choices"
					shortinfo = "Maximum CPU Level"
					extra = "(in all games since [Left 4 Dead])"
					notes = ""
					description = "0: Default\n1: Low\n2: Medium\n3: High"
					choices = {}
				}
				"mingpulevel":
				{
					typename = "choices"
					shortinfo = "Minimum GPU Level"
					extra = "(in all games since [Left 4 Dead])"
					notes = ""
					description = "A user with a GPU level lower than this will not see this object rendered in-game. GPU levels are determined by the Shader detail setting."
					choices = {}
				}
				"maxgpulevel":
				{
					typename = "choices"
					shortinfo = "Maximum GPU Level"
					extra = "(in all games since [Left 4 Dead])"
					notes = ""
					description = "0: Default\n1: Very low\n2: Low\n3: Medium\n4: High"
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
			}
		}
		prop_wall_breakable = 
		{
			description = "[Left 4 Dead 2]�prop_wall_breakable is a  point entity available in Left 4 Dead 2."
			flagnotes = ""
			flags = 
			{
				"524288":
				{
					category = ""
					description = "Start Unbreakable"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"model":
				{
					typename = "string"
					shortinfo = "World Model"
					extra = ""
					notes = ""
					description = "The model this entity should appear as. 128-character limit."
					choices = {}
				}
				"skin":
				{
					typename = "integer"
					shortinfo = "Skin"
					extra = ""
					notes = ""
					description = "Some models have multiple skins. This value selects from the index, starting with 0. �Tip:�Hammer's model browser automatically updates this value if you use it to view different skins."
					choices = {}
				}
				"modelscale":
				{
					typename = "float"
					shortinfo = "Model Scale"
					extra = "(in all games since [Source][Source])"
					notes = ""
					description = "A multiplier for the size of the model."
					choices = {}
				}
				"disableshadows":
				{
					typename = "boolean"
					shortinfo = "Disable Shadows"
					extra = ""
					notes = ""
					description = "Prevents the entity from creating cheap render-to-texture shadows, or lightmap shadows if the entity is a prop_static. Does not affect shadow mapping."
					choices = {}
				}
				"disableshadowdepth":
				{
					typename = "boolean"
					shortinfo = "Disable ShadowDepth"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable rendering into shadow depth (for projected textures) for this entity."
					choices = {}
				}
				"shadowdepthnocache":
				{
					typename = "choices"
					shortinfo = "Projected Texture Cache"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to hint projected texture system whether it is sufficient to cache shadow volume of this entity or to force render it every frame instead.\n0�: Default\n1�: No cache - render every frame\n2�: Cache it - render only once"
					choices = {}
				}
				"disableflashlight":
				{
					typename = "boolean"
					shortinfo = "Disable flashlight"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable projected texture lighting and shadows on this entity."
					choices = {}
				}
				"drawinfastreflection":
				{
					typename = "boolean"
					shortinfo = "Render in Fast Reflections"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "If enabled, this entity will render in fast water reflections (i.e. when a water material specifies $reflectonlymarkedentities) and in the world impostor pass."
					choices = {}
				}
				"fademindist":
				{
					typename = "float"
					shortinfo = "Start Fade Dist"
					extra = ""
					notes = ""
					description = "Distance at which the prop starts to fade."
					choices = {}
				}
				"fademaxdist":
				{
					typename = "float"
					shortinfo = "End Fade Dist"
					extra = ""
					notes = ""
					description = "Max fade distance at which the prop is visible.\nIf start fade is <0, the prop will disappear instantly when end fade is hit.\nIf end fade is <0, the prop won't disappear at all. (This is the default behaviour.)\nThe values will scale appropriately if the prop is in a 3D Skybox."
					choices = {}
				}
				"fadescale":
				{
					typename = "float"
					shortinfo = "Fade Scale"
					extra = ""
					notes = ""
					description = "If you specify so in worldspawn, or if the engine is running below DirectX 8 (DX7 in Ep1), props will fade out even if the fade distances above aren't specified. This value gives you some control over when this happens: numbers smaller than 1 cause the prop to fade out at further distances, and greater than 1 cause it to fade out at closer distances. Using 0 turns off the forced fade altogether. See also the QC command $noforcedfade."
					choices = {}
				}
			}
		}
		
	}
	scripted = 
	{
		scripted_item_drop = 
		{
			description = "[Left 4 Dead 2]�scripted_item_drop is a  point entity available in Left 4 Dead 2. It is a prop similar to prop_physics_override, but with much of its functionality removed. It does not collide with players and has outputs for being touched and picked up, making it useful for simple collectible items."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
				"origin":
				{
					typename = "origin"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
				"model":
				{
					typename = "string"
					shortinfo = "World Model"
					extra = ""
					notes = ""
					description = "The model this entity should appear as. 128-character limit."
					choices = {}
				}
				"skin":
				{
					typename = "integer"
					shortinfo = "Skin"
					extra = ""
					notes = ""
					description = "Some models have multiple skins. This value selects from the index, starting with 0. �Tip:�Hammer's model browser automatically updates this value if you use it to view different skins."
					choices = {}
				}
				"modelscale":
				{
					typename = "float"
					shortinfo = "Model Scale"
					extra = "(in all games since [Source][Source])"
					notes = ""
					description = "A multiplier for the size of the model."
					choices = {}
				}
				"disableshadows":
				{
					typename = "boolean"
					shortinfo = "Disable Shadows"
					extra = ""
					notes = ""
					description = "Prevents the entity from creating cheap render-to-texture shadows, or lightmap shadows if the entity is a prop_static. Does not affect shadow mapping."
					choices = {}
				}
				"disableshadowdepth":
				{
					typename = "boolean"
					shortinfo = "Disable ShadowDepth"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable rendering into shadow depth (for projected textures) for this entity."
					choices = {}
				}
				"shadowdepthnocache":
				{
					typename = "choices"
					shortinfo = "Projected Texture Cache"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to hint projected texture system whether it is sufficient to cache shadow volume of this entity or to force render it every frame instead.\n0�: Default\n1�: No cache - render every frame\n2�: Cache it - render only once"
					choices = {}
				}
				"disableflashlight":
				{
					typename = "boolean"
					shortinfo = "Disable flashlight"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable projected texture lighting and shadows on this entity."
					choices = {}
				}
				"drawinfastreflection":
				{
					typename = "boolean"
					shortinfo = "Render in Fast Reflections"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "If enabled, this entity will render in fast water reflections (i.e. when a water material specifies $reflectonlymarkedentities) and in the world impostor pass."
					choices = {}
				}
			}
		}
		
	}
	trigger = 
	{
		trigger_active_weapon_detect = 
		{
			description = "[Left 4 Dead 2]�trigger_active_weapon_detect is a  brush entity available in Left 4 Dead 2. It fires an output when touched by a player that has a specific weapon active."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Clients"
					notes = ""
				}
				"2":
				{
					category = ""
					description = "NPCs"
					notes = ""
				}
				"4":
				{
					category = ""
					description = "Pushables"
					notes = ""
				}
				"8":
				{
					category = ""
					description = "Physics Objects"
					notes = ""
				}
				"16":
				{
					category = ""
					description = "Only player ally NPCs"
					notes = ""
				}
				"32":
				{
					category = ""
					description = "Only clients in vehicles"
					notes = ""
				}
				"64":
				{
					category = ""
					description = "Everything (not including physics debris)"
					notes = ""
				}
				"512":
				{
					category = ""
					description = "Only clients *not* in vehicles"
					notes = ""
				}
				"1024":
				{
					category = ""
					description = "Physics debris"
					notes = ""
				}
				"2048":
				{
					category = ""
					description = "Only NPCs in vehicles (respects player ally flag)"
					notes = ""
				}
				"4096":
				{
					category = ""
					description = "Disallow Bots. ()�Correctly account for object mass (trigger_push used to assume 100Kg) and multiple component physics objects (car, blob...)�(in all games since [Alien Swarm])"
					notes = "Note: In [Garry's Mod], flag 4096 is 'Correctly account for object mass' for trigger_push only.[confirm]"
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "string"
					shortinfo = "Weapon To Detect"
					extra = ""
					notes = ""
					description = "weapon classname that player must have active"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "filter"
					shortinfo = "Filter Name"
					extra = ""
					notes = ""
					description = "A filter entity to test potential activators against."
					choices = {}
				}
				"mins":
				{
					typename = "vector"
					shortinfo = "Minimum Bounding Box Size"
					extra = "!FGD"
					notes = ""
					description = "Co-ordinate of the minimum bounding box corner. The bounding box is drawn from this corner to the other one. Requires Bounding Box collisions (solid 2) to be used. Can be used to overwrite the collision shape of a brush, although it can only be a cuboid."
					choices = {}
				}
				"maxs":
				{
					typename = "vector"
					shortinfo = "Maximum Bounding Box Size"
					extra = "!FGD"
					notes = ""
					description = "Co-ordinate of the maximum bounding box corner. The bounding box is drawn from this corner to the other one. Requires Bounding Box collisions (solid 2) to be used. Can be used to overwrite the collision shape of a brush, although it can only be a cuboid."
					choices = {}
				}
				"solid":
				{
					typename = "choices"
					shortinfo = "Collisions"
					extra = "!FGD"
					notes = ""
					description = "Method of collision for this entity.\n0: None\n1: BSP (QPhysics)\n2: Bounding Box\n3: Oriented Bounding Box\n4: Oriented Bounding Box, constrained to Yaw only\n5: Custom/Test\n6: VPhysics"
					choices = {}
				}
				"modelindex":
				{
					typename = "short"
					shortinfo = "Model Index"
					extra = "!FGD"
					notes = ""
					description = "Changes the entity's model to a precached model on the map."
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"StartDisabled":
				{
					typename = "boolean"
					shortinfo = "Start Disabled"
					extra = ""
					notes = ""
					description = "Stay dormant until activated (probably with the Enable input)."
					choices = {}
				}
			}
		}
		trigger_auto_crouch = 
		{
			description = "trigger_auto_crouch is a  brush entity available in all Source games since [Left 4 Dead] Left 4 Dead. It allows players touching the trigger to auto-crouch."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Clients"
					notes = ""
				}
				"2":
				{
					category = ""
					description = "NPCs"
					notes = ""
				}
				"4":
				{
					category = ""
					description = "Pushables"
					notes = ""
				}
				"8":
				{
					category = ""
					description = "Physics Objects"
					notes = ""
				}
				"16":
				{
					category = ""
					description = "Only player ally NPCs"
					notes = ""
				}
				"32":
				{
					category = ""
					description = "Only clients in vehicles"
					notes = ""
				}
				"64":
				{
					category = ""
					description = "Everything (not including physics debris)"
					notes = ""
				}
				"512":
				{
					category = ""
					description = "Only clients *not* in vehicles"
					notes = ""
				}
				"1024":
				{
					category = ""
					description = "Physics debris"
					notes = ""
				}
				"2048":
				{
					category = ""
					description = "Only NPCs in vehicles (respects player ally flag)"
					notes = ""
				}
				"4096":
				{
					category = ""
					description = "Disallow Bots. ()�Correctly account for object mass (trigger_push used to assume 100Kg) and multiple component physics objects (car, blob...)�(in all games since [Alien Swarm])"
					notes = "Note: In [Garry's Mod], flag 4096 is 'Correctly account for object mass' for trigger_push only.[confirm]"
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "filter"
					shortinfo = "Filter Name"
					extra = ""
					notes = ""
					description = "A filter entity to test potential activators against."
					choices = {}
				}
				"mins":
				{
					typename = "vector"
					shortinfo = "Minimum Bounding Box Size"
					extra = "!FGD"
					notes = ""
					description = "Co-ordinate of the minimum bounding box corner. The bounding box is drawn from this corner to the other one. Requires Bounding Box collisions (solid 2) to be used. Can be used to overwrite the collision shape of a brush, although it can only be a cuboid."
					choices = {}
				}
				"maxs":
				{
					typename = "vector"
					shortinfo = "Maximum Bounding Box Size"
					extra = "!FGD"
					notes = ""
					description = "Co-ordinate of the maximum bounding box corner. The bounding box is drawn from this corner to the other one. Requires Bounding Box collisions (solid 2) to be used. Can be used to overwrite the collision shape of a brush, although it can only be a cuboid."
					choices = {}
				}
				"solid":
				{
					typename = "choices"
					shortinfo = "Collisions"
					extra = "!FGD"
					notes = ""
					description = "Method of collision for this entity.\n0: None\n1: BSP (QPhysics)\n2: Bounding Box\n3: Oriented Bounding Box\n4: Oriented Bounding Box, constrained to Yaw only\n5: Custom/Test\n6: VPhysics"
					choices = {}
				}
				"modelindex":
				{
					typename = "short"
					shortinfo = "Model Index"
					extra = "!FGD"
					notes = ""
					description = "Changes the entity's model to a precached model on the map."
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"StartDisabled":
				{
					typename = "boolean"
					shortinfo = "Start Disabled"
					extra = ""
					notes = ""
					description = "Stay dormant until activated (probably with the Enable input)."
					choices = {}
				}
			}
		}
		trigger_escape = 
		{
			description = "[Left 4 Dead][Left 4 Dead 2]�trigger_escape is a  brush entity available in the Left 4 Dead series. The trigger indicates if there are Survivors in the volume who can escape the finale."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Clients"
					notes = ""
				}
				"2":
				{
					category = ""
					description = "NPCs"
					notes = ""
				}
				"4":
				{
					category = ""
					description = "Pushables"
					notes = ""
				}
				"8":
				{
					category = ""
					description = "Physics Objects"
					notes = ""
				}
				"16":
				{
					category = ""
					description = "Only player ally NPCs"
					notes = ""
				}
				"32":
				{
					category = ""
					description = "Only clients in vehicles"
					notes = ""
				}
				"64":
				{
					category = ""
					description = "Everything (not including physics debris)"
					notes = ""
				}
				"512":
				{
					category = ""
					description = "Only clients *not* in vehicles"
					notes = ""
				}
				"1024":
				{
					category = ""
					description = "Physics debris"
					notes = ""
				}
				"2048":
				{
					category = ""
					description = "Only NPCs in vehicles (respects player ally flag)"
					notes = ""
				}
				"4096":
				{
					category = ""
					description = "Disallow Bots. ()�Correctly account for object mass (trigger_push used to assume 100Kg) and multiple component physics objects (car, blob...)�(in all games since [Alien Swarm])"
					notes = "Note: In [Garry's Mod], flag 4096 is 'Correctly account for object mass' for trigger_push only.[confirm]"
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "filter"
					shortinfo = "Filter Name"
					extra = ""
					notes = ""
					description = "A filter entity to test potential activators against."
					choices = {}
				}
				"mins":
				{
					typename = "vector"
					shortinfo = "Minimum Bounding Box Size"
					extra = "!FGD"
					notes = ""
					description = "Co-ordinate of the minimum bounding box corner. The bounding box is drawn from this corner to the other one. Requires Bounding Box collisions (solid 2) to be used. Can be used to overwrite the collision shape of a brush, although it can only be a cuboid."
					choices = {}
				}
				"maxs":
				{
					typename = "vector"
					shortinfo = "Maximum Bounding Box Size"
					extra = "!FGD"
					notes = ""
					description = "Co-ordinate of the maximum bounding box corner. The bounding box is drawn from this corner to the other one. Requires Bounding Box collisions (solid 2) to be used. Can be used to overwrite the collision shape of a brush, although it can only be a cuboid."
					choices = {}
				}
				"solid":
				{
					typename = "choices"
					shortinfo = "Collisions"
					extra = "!FGD"
					notes = ""
					description = "Method of collision for this entity.\n0: None\n1: BSP (QPhysics)\n2: Bounding Box\n3: Oriented Bounding Box\n4: Oriented Bounding Box, constrained to Yaw only\n5: Custom/Test\n6: VPhysics"
					choices = {}
				}
				"modelindex":
				{
					typename = "short"
					shortinfo = "Model Index"
					extra = "!FGD"
					notes = ""
					description = "Changes the entity's model to a precached model on the map."
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"StartDisabled":
				{
					typename = "boolean"
					shortinfo = "Start Disabled"
					extra = ""
					notes = ""
					description = "Stay dormant until activated (probably with the Enable input)."
					choices = {}
				}
			}
		}
		trigger_finale = 
		{
			description = "[Left 4 Dead][Left 4 Dead 2]�trigger_finale is a  point entity available in the Left 4 Dead series. The entity triggers the end of the current campaign session. Its location is crucial in determining the end of the escape route, also known as the flow of the single-map campaign or finale map in a multi-map campaign. If trigger_finale is not above the finale arena's nav mesh, the end of the escape route will be determined by the center of the all the nav areas marked with FINALE."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "model_path"
					shortinfo = "World model"
					extra = ""
					notes = ""
					description = ""
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "boolean"
					shortinfo = "Disable Shadows"
					extra = ""
					notes = ""
					description = "Used to disable dynamic shadows on this entity."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "float"
					shortinfo = "First Use Delay"
					extra = ""
					notes = ""
					description = "For two-part finale starts, delays this many seconds before allowing another +use."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "float"
					shortinfo = "Use Delay"
					extra = ""
					notes = ""
					description = "Starts the finale this many seconds after a +use."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_5":
				{
					typename = "choices"
					shortinfo = "Finale Type"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Specifies which style of finale to trigger\n0�: Standard\n1�: Gauntlet\n2�: Custom\n4�: Scavenge"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_6":
				{
					typename = "string"
					shortinfo = "Script File"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = ""
					choices = {}
				}
				"UNKNOWN_KEY_NAME_7":
				{
					typename = "float"
					shortinfo = "Versus Travel"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "How much of the versus score is attained through travel to the finale ( not valid in gauntlet finale )"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_8":
				{
					typename = "boolean"
					shortinfo = "Is Sacrifice Finale"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "If true, one survivor has to be available to perform some action outside the escape vehicle."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
				"StartDisabled":
				{
					typename = "boolean"
					shortinfo = "Start Disabled"
					extra = ""
					notes = ""
					description = "Stay dormant until activated (probably with the Enable input)."
					choices = {}
				}
			}
		}
		trigger_hurt_ghost = 
		{
			description = "[Left 4 Dead][Left 4 Dead 2]�trigger_hurt_ghost is a  point entity available in the Left 4 Dead series."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Clients"
					notes = ""
				}
				"2":
				{
					category = ""
					description = "NPCs"
					notes = ""
				}
				"4":
				{
					category = ""
					description = "Pushables"
					notes = ""
				}
				"8":
				{
					category = ""
					description = "Physics Objects"
					notes = ""
				}
				"16":
				{
					category = ""
					description = "Only player ally NPCs"
					notes = ""
				}
				"32":
				{
					category = ""
					description = "Only clients in vehicles"
					notes = ""
				}
				"64":
				{
					category = ""
					description = "Everything (not including physics debris)"
					notes = ""
				}
				"512":
				{
					category = ""
					description = "Only clients *not* in vehicles"
					notes = ""
				}
				"1024":
				{
					category = ""
					description = "Physics debris"
					notes = ""
				}
				"2048":
				{
					category = ""
					description = "Only NPCs in vehicles (respects player ally flag)"
					notes = ""
				}
				"4096":
				{
					category = ""
					description = "Disallow Bots. ()�Correctly account for object mass (trigger_push used to assume 100Kg) and multiple component physics objects (car, blob...)�(in all games since [Alien Swarm])"
					notes = "Note: In [Garry's Mod], flag 4096 is 'Correctly account for object mass' for trigger_push only.[confirm]"
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"Obsolete":
				{
					typename = "string"
					shortinfo = "Master"
					extra = ""
					notes = ""
					description = "Legacy support: The name of a master entity. If the master hasn't been activated, this entity will not activate."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "integer"
					shortinfo = "Damage"
					extra = ""
					notes = ""
					description = "The amount of damage done to entities that touch this trigger. The damage is done every half-second. See also Damage Model for extra details on how damage can be dealt. Use negative value to heal."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "integer"
					shortinfo = "Damage Cap"
					extra = ""
					notes = ""
					description = "Maximum damage dealt per second. This field is only used if you select the Doubling w/Forgiveness damage model, via the spawnflag."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "choices"
					shortinfo = "Damage Type"
					extra = ""
					notes = ""
					description = "Literal values can be added together to stack effects"
					choices = {}
				}
			}
		}
		trigger_standoff = 
		{
			description = "[Left 4 Dead][Left 4 Dead 2]�trigger_standoff is a  point entity available in the Left 4 Dead series. Standoff Trigger. [Clarify]"
			flagnotes = ""
			flags = 
			{
				"512":
				{
					category = ""
					description = "Diable +use"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "model_path"
					shortinfo = "World model"
					extra = ""
					notes = ""
					description = ""
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "boolean"
					shortinfo = "Disable Shadows"
					extra = ""
					notes = ""
					description = "Used to disable dynamic shadows on this entity."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "float"
					shortinfo = "Use Duration"
					extra = ""
					notes = ""
					description = "Seconds a survivor must +use the trigger to start the finale (0 is instantaneous)."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "float"
					shortinfo = "Use Delay"
					extra = ""
					notes = ""
					description = "Starts the finale this many seconds after a +use."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
			}
		}
		trigger_upgrade_laser_sight = 
		{
			description = "[Left 4 Dead 2]�trigger_upgrade_laser_sight is a  brush entity available in Left 4 Dead 2. The entity gives laser sight upgrade to players within the volume. For instance, when the volume is disabled, players lose the laser sights given. It is used in the final map of The Passing to automatically equip the L4D1 survivors with laser sights."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Clients"
					notes = ""
				}
				"2":
				{
					category = ""
					description = "NPCs"
					notes = ""
				}
				"4":
				{
					category = ""
					description = "Pushables"
					notes = ""
				}
				"8":
				{
					category = ""
					description = "Physics Objects"
					notes = ""
				}
				"16":
				{
					category = ""
					description = "Only player ally NPCs"
					notes = ""
				}
				"32":
				{
					category = ""
					description = "Only clients in vehicles"
					notes = ""
				}
				"64":
				{
					category = ""
					description = "Everything (not including physics debris)"
					notes = ""
				}
				"512":
				{
					category = ""
					description = "Only clients *not* in vehicles"
					notes = ""
				}
				"1024":
				{
					category = ""
					description = "Physics debris"
					notes = ""
				}
				"2048":
				{
					category = ""
					description = "Only NPCs in vehicles (respects player ally flag)"
					notes = ""
				}
				"4096":
				{
					category = ""
					description = "Disallow Bots. ()�Correctly account for object mass (trigger_push used to assume 100Kg) and multiple component physics objects (car, blob...)�(in all games since [Alien Swarm])"
					notes = "Note: In [Garry's Mod], flag 4096 is 'Correctly account for object mass' for trigger_push only.[confirm]"
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "filter"
					shortinfo = "Filter Name"
					extra = ""
					notes = ""
					description = "A filter entity to test potential activators against."
					choices = {}
				}
				"mins":
				{
					typename = "vector"
					shortinfo = "Minimum Bounding Box Size"
					extra = "!FGD"
					notes = ""
					description = "Co-ordinate of the minimum bounding box corner. The bounding box is drawn from this corner to the other one. Requires Bounding Box collisions (solid 2) to be used. Can be used to overwrite the collision shape of a brush, although it can only be a cuboid."
					choices = {}
				}
				"maxs":
				{
					typename = "vector"
					shortinfo = "Maximum Bounding Box Size"
					extra = "!FGD"
					notes = ""
					description = "Co-ordinate of the maximum bounding box corner. The bounding box is drawn from this corner to the other one. Requires Bounding Box collisions (solid 2) to be used. Can be used to overwrite the collision shape of a brush, although it can only be a cuboid."
					choices = {}
				}
				"solid":
				{
					typename = "choices"
					shortinfo = "Collisions"
					extra = "!FGD"
					notes = ""
					description = "Method of collision for this entity.\n0: None\n1: BSP (QPhysics)\n2: Bounding Box\n3: Oriented Bounding Box\n4: Oriented Bounding Box, constrained to Yaw only\n5: Custom/Test\n6: VPhysics"
					choices = {}
				}
				"modelindex":
				{
					typename = "short"
					shortinfo = "Model Index"
					extra = "!FGD"
					notes = ""
					description = "Changes the entity's model to a precached model on the map."
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"StartDisabled":
				{
					typename = "boolean"
					shortinfo = "Start Disabled"
					extra = ""
					notes = ""
					description = "Stay dormant until activated (probably with the Enable input)."
					choices = {}
				}
			}
		}
		trigger_autosave = 
		{
			description = "trigger_autosave is a  brush entity available in all Source games. It triggers an auto-save when the player enters its volume."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "string"
					shortinfo = "Master"
					extra = ""
					notes = ""
					description = "Legacy support: The name of a master entity. If the master hasn't been activated, this entity will not activate."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "boolean"
					shortinfo = "Force New Level Unit"
					extra = ""
					notes = ""
					description = "If set, the save will discard any savedata from previous levels, for the purpose of keeping savegame filesizes down. Can only be safely used if there is no way for the player to return to previous levels."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "float"
					shortinfo = "Dangerous Timer"
					extra = ""
					notes = ""
					description = "The number of seconds the player must survive before this autosave takes effect."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "integer"
					shortinfo = "Minumum Hit Points"
					extra = ""
					notes = ""
					description = "Don't save dangerous when player has less than this many hitpoints."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		trigger_changelevel = 
		{
			description = "trigger_changelevel is a  brush entity available in all Source games. It triggers a level change.\n In code, it is represented by class CChangeLevel, defined in triggers.cpp."
			flagnotes = ""
			flags = 
			{
				"2":
				{
					category = ""
					description = "Disable Touch"
					notes = ""
				}
				"4":
				{
					category = ""
					description = "To Previous Chapter"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "targetname"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "Name of the brush."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "string"
					shortinfo = "New Map Name"
					extra = ""
					notes = ""
					description = "Name of the map to change to."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "targetname"
					shortinfo = "Landmark Name"
					extra = ""
					notes = ""
					description = "Name of the landmark to use. (See above for details!)"
					choices = {}
				}
			}
		}
		trigger_gravity = 
		{
			description = "trigger_gravity is a  brush entity available in all Source games. It scales the force of gravity applied to players (ONLY players, despite its flags) inside it. Players will retain scaled gravity until reset."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Clients"
					notes = ""
				}
				"2":
				{
					category = ""
					description = "NPCs"
					notes = ""
				}
				"4":
				{
					category = ""
					description = "Pushables"
					notes = ""
				}
				"8":
				{
					category = ""
					description = "Physics Objects"
					notes = ""
				}
				"16":
				{
					category = ""
					description = "Only player ally NPCs"
					notes = ""
				}
				"32":
				{
					category = ""
					description = "Only clients in vehicles"
					notes = ""
				}
				"64":
				{
					category = ""
					description = "Everything (not including physics debris)"
					notes = ""
				}
				"512":
				{
					category = ""
					description = "Only clients *not* in vehicles"
					notes = ""
				}
				"1024":
				{
					category = ""
					description = "Physics debris"
					notes = ""
				}
				"2048":
				{
					category = ""
					description = "Only NPCs in vehicles (respects player ally flag)"
					notes = ""
				}
				"4096":
				{
					category = ""
					description = "Disallow Bots. ()�Correctly account for object mass (trigger_push used to assume 100Kg) and multiple component physics objects (car, blob...)�(in all games since [Alien Swarm])"
					notes = "Note: In [Garry's Mod], flag 4096 is 'Correctly account for object mass' for trigger_push only.[confirm]"
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"0-1":
				{
					typename = "integer"
					shortinfo = "Gravity"
					extra = ""
					notes = ""
					description = "Gravity multiplier. 1 is normal gravity, 0 is none. Accepts negative values and decimals."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "filter"
					shortinfo = "Filter Name"
					extra = ""
					notes = ""
					description = "A filter entity to test potential activators against."
					choices = {}
				}
				"mins":
				{
					typename = "vector"
					shortinfo = "Minimum Bounding Box Size"
					extra = "!FGD"
					notes = ""
					description = "Co-ordinate of the minimum bounding box corner. The bounding box is drawn from this corner to the other one. Requires Bounding Box collisions (solid 2) to be used. Can be used to overwrite the collision shape of a brush, although it can only be a cuboid."
					choices = {}
				}
				"maxs":
				{
					typename = "vector"
					shortinfo = "Maximum Bounding Box Size"
					extra = "!FGD"
					notes = ""
					description = "Co-ordinate of the maximum bounding box corner. The bounding box is drawn from this corner to the other one. Requires Bounding Box collisions (solid 2) to be used. Can be used to overwrite the collision shape of a brush, although it can only be a cuboid."
					choices = {}
				}
				"solid":
				{
					typename = "choices"
					shortinfo = "Collisions"
					extra = "!FGD"
					notes = ""
					description = "Method of collision for this entity.\n0: None\n1: BSP (QPhysics)\n2: Bounding Box\n3: Oriented Bounding Box\n4: Oriented Bounding Box, constrained to Yaw only\n5: Custom/Test\n6: VPhysics"
					choices = {}
				}
				"modelindex":
				{
					typename = "short"
					shortinfo = "Model Index"
					extra = "!FGD"
					notes = ""
					description = "Changes the entity's model to a precached model on the map."
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"StartDisabled":
				{
					typename = "boolean"
					shortinfo = "Start Disabled"
					extra = ""
					notes = ""
					description = "Stay dormant until activated (probably with the Enable input)."
					choices = {}
				}
			}
		}
		trigger_hurt = 
		{
			description = "trigger_hurt is a  brush entity available in all Source games. It is a trigger volume that damages entities that touch it.\nFor a list on how different damage types will affect the player, see here."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Clients"
					notes = ""
				}
				"2":
				{
					category = ""
					description = "NPCs"
					notes = ""
				}
				"4":
				{
					category = ""
					description = "Pushables"
					notes = ""
				}
				"8":
				{
					category = ""
					description = "Physics Objects"
					notes = ""
				}
				"16":
				{
					category = ""
					description = "Only player ally NPCs"
					notes = ""
				}
				"32":
				{
					category = ""
					description = "Only clients in vehicles"
					notes = ""
				}
				"64":
				{
					category = ""
					description = "Everything (not including physics debris)"
					notes = ""
				}
				"512":
				{
					category = ""
					description = "Only clients *not* in vehicles"
					notes = ""
				}
				"1024":
				{
					category = ""
					description = "Physics debris"
					notes = ""
				}
				"2048":
				{
					category = ""
					description = "Only NPCs in vehicles (respects player ally flag)"
					notes = ""
				}
				"4096":
				{
					category = ""
					description = "Disallow Bots. ()�Correctly account for object mass (trigger_push used to assume 100Kg) and multiple component physics objects (car, blob...)�(in all games since [Alien Swarm])"
					notes = "Note: In [Garry's Mod], flag 4096 is 'Correctly account for object mass' for trigger_push only.[confirm]"
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"Obsolete":
				{
					typename = "string"
					shortinfo = "Master"
					extra = ""
					notes = ""
					description = "Legacy support: The name of a master entity. If the master hasn't been activated, this entity will not activate."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "integer"
					shortinfo = "Damage"
					extra = ""
					notes = ""
					description = "The amount of damage done to entities that touch this trigger. The damage is done every half-second. See also Damage Model for extra details on how damage can be dealt. Use negative value to heal."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "integer"
					shortinfo = "Damage Cap"
					extra = ""
					notes = ""
					description = "Maximum damage dealt per second. This field is only used if you select the Doubling w/Forgiveness damage model, via the spawnflag."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "choices"
					shortinfo = "Damage Type"
					extra = ""
					notes = ""
					description = "Literal values can be added together to stack effects"
					choices = {}
				}
			}
		}
		trigger_impact = 
		{
			description = "trigger_impact is a  brush entity available in all Source games. It can be told to push all physics objects that are inside of it in the direction specified by this trigger's angles. Also outputs the force at the time of impact for anyone else that wants to use it. \n In code, it is represented by class CTriggerImpact, defined in triggers.cpp."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "float"
					shortinfo = "Magnitude"
					extra = ""
					notes = ""
					description = "The strength of the impact. Negative values reverse the direction."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "float"
					shortinfo = "Noise"
					extra = ""
					notes = ""
					description = "The amount of directional noise (0-1). 0 = no noise, 1 = random direction."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "float"
					shortinfo = "Viewkick"
					extra = ""
					notes = ""
					description = "The amount to kick player's view if the player is in the trigger.  Proportional to magnitude (0-1)."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"origin":
				{
					typename = "origin"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
			}
		}
		trigger_look = 
		{
			description = "trigger_look is a  brush entity available in all Source games. It is used to trigger something when the player looks at something.\nIt fires OnTrigger when the player looks at a target entity for the given amount of time while within the trigger volume. If the player leaves the trigger or looks away from the target entity, the clock resets.\nIf the Use Velocity instead of facing spawnflag is checked, the trigger uses the player's velocity instead of the player's view, so it determines whenever the player is moving toward the target entity; this is useful for triggering when players are driving a vehicle at something.\n In code, it is represented by class CTriggerLook, defined in triggers.cpp."
			flagnotes = ""
			flags = 
			{
				"128":
				{
					category = ""
					description = "Fire Once"
					notes = ""
				}
				"256":
				{
					category = ""
					description = "Use Velocity instead of facing"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"target":
				{
					typename = "targetname"
					shortinfo = "Look Target"
					extra = ""
					notes = ""
					description = "The name of the entity to be looked at."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "string"
					shortinfo = "LookTime"
					extra = ""
					notes = ""
					description = "The time, in seconds, that the player must look the target before firing the output. Resets if player leaves trigger, or looks outside the Field of View threshold."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "string"
					shortinfo = "FieldOfView"
					extra = ""
					notes = ""
					description = "How close the player has to be looking at the target. 1.0 = straight ahead/n 0.0 = +/- 90 degrees/n -1.0 = all directions)."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "float"
					shortinfo = "Timeout"
					extra = ""
					notes = ""
					description = "The time, in seconds, to wait after player enters the trigger before firing the OnTimeout output, 0 = never."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "filter"
					shortinfo = "Filter Name"
					extra = ""
					notes = ""
					description = "A filter entity to test potential activators against."
					choices = {}
				}
				"mins":
				{
					typename = "vector"
					shortinfo = "Minimum Bounding Box Size"
					extra = "!FGD"
					notes = ""
					description = "Co-ordinate of the minimum bounding box corner. The bounding box is drawn from this corner to the other one. Requires Bounding Box collisions (solid 2) to be used. Can be used to overwrite the collision shape of a brush, although it can only be a cuboid."
					choices = {}
				}
				"maxs":
				{
					typename = "vector"
					shortinfo = "Maximum Bounding Box Size"
					extra = "!FGD"
					notes = ""
					description = "Co-ordinate of the maximum bounding box corner. The bounding box is drawn from this corner to the other one. Requires Bounding Box collisions (solid 2) to be used. Can be used to overwrite the collision shape of a brush, although it can only be a cuboid."
					choices = {}
				}
				"solid":
				{
					typename = "choices"
					shortinfo = "Collisions"
					extra = "!FGD"
					notes = ""
					description = "Method of collision for this entity.\n0: None\n1: BSP (QPhysics)\n2: Bounding Box\n3: Oriented Bounding Box\n4: Oriented Bounding Box, constrained to Yaw only\n5: Custom/Test\n6: VPhysics"
					choices = {}
				}
				"modelindex":
				{
					typename = "short"
					shortinfo = "Model Index"
					extra = "!FGD"
					notes = ""
					description = "Changes the entity's model to a precached model on the map."
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"StartDisabled":
				{
					typename = "boolean"
					shortinfo = "Start Disabled"
					extra = ""
					notes = ""
					description = "Stay dormant until activated (probably with the Enable input)."
					choices = {}
				}
			}
		}
		trigger_multiple = 
		{
			description = "trigger_multiple is a  brush entity available in all Source games. It is a volume that fires outputs when a specified type of entity enters or leaves it."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Clients"
					notes = ""
				}
				"2":
				{
					category = ""
					description = "NPCs"
					notes = ""
				}
				"4":
				{
					category = ""
					description = "Pushables"
					notes = ""
				}
				"8":
				{
					category = ""
					description = "Physics Objects"
					notes = ""
				}
				"16":
				{
					category = ""
					description = "Only player ally NPCs"
					notes = ""
				}
				"32":
				{
					category = ""
					description = "Only clients in vehicles"
					notes = ""
				}
				"64":
				{
					category = ""
					description = "Everything (not including physics debris)"
					notes = ""
				}
				"512":
				{
					category = ""
					description = "Only clients *not* in vehicles"
					notes = ""
				}
				"1024":
				{
					category = ""
					description = "Physics debris"
					notes = ""
				}
				"2048":
				{
					category = ""
					description = "Only NPCs in vehicles (respects player ally flag)"
					notes = ""
				}
				"4096":
				{
					category = ""
					description = "Disallow Bots. ()�Correctly account for object mass (trigger_push used to assume 100Kg) and multiple component physics objects (car, blob...)�(in all games since [Alien Swarm])"
					notes = "Note: In [Garry's Mod], flag 4096 is 'Correctly account for object mass' for trigger_push only.[confirm]"
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "integer"
					shortinfo = "Delay Before Reset"
					extra = ""
					notes = ""
					description = "Amount of time, in seconds, after the trigger_multiple has triggered before it can be triggered again. If set to -1, it will never trigger again (in which case you should just use a trigger_once)."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "choices"
					shortinfo = "Entire Team Number"
					extra = "(in all games since [Left 4 Dead])"
					notes = ""
					description = "If the entire team is touching, fire OnEntireTeamStartTouch\n0�: None\n2�: Survivor\n3�: Infected"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "boolean"
					shortinfo = "Incapacitated players can trigger"
					extra = "(in all games since [Left 4 Dead])"
					notes = ""
					description = "Whether incapacitated players can trigger."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "boolean"
					shortinfo = "Ghost players can trigger"
					extra = "(in all games since [Left 4 Dead])"
					notes = ""
					description = "Whether ghost survivors can trigger."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_5":
				{
					typename = "filter"
					shortinfo = "Filter Name"
					extra = ""
					notes = ""
					description = "A filter entity to test potential activators against."
					choices = {}
				}
				"mins":
				{
					typename = "vector"
					shortinfo = "Minimum Bounding Box Size"
					extra = "!FGD"
					notes = ""
					description = "Co-ordinate of the minimum bounding box corner. The bounding box is drawn from this corner to the other one. Requires Bounding Box collisions (solid 2) to be used. Can be used to overwrite the collision shape of a brush, although it can only be a cuboid."
					choices = {}
				}
				"maxs":
				{
					typename = "vector"
					shortinfo = "Maximum Bounding Box Size"
					extra = "!FGD"
					notes = ""
					description = "Co-ordinate of the maximum bounding box corner. The bounding box is drawn from this corner to the other one. Requires Bounding Box collisions (solid 2) to be used. Can be used to overwrite the collision shape of a brush, although it can only be a cuboid."
					choices = {}
				}
				"solid":
				{
					typename = "choices"
					shortinfo = "Collisions"
					extra = "!FGD"
					notes = ""
					description = "Method of collision for this entity.\n0: None\n1: BSP (QPhysics)\n2: Bounding Box\n3: Oriented Bounding Box\n4: Oriented Bounding Box, constrained to Yaw only\n5: Custom/Test\n6: VPhysics"
					choices = {}
				}
				"modelindex":
				{
					typename = "short"
					shortinfo = "Model Index"
					extra = "!FGD"
					notes = ""
					description = "Changes the entity's model to a precached model on the map."
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"StartDisabled":
				{
					typename = "boolean"
					shortinfo = "Start Disabled"
					extra = ""
					notes = ""
					description = "Stay dormant until activated (probably with the Enable input)."
					choices = {}
				}
			}
		}
		trigger_once = 
		{
			description = "trigger_once is a  brush entity available in all Source games. It is a trigger volume that removes itself after it has been triggered (touched by a qualifying entity) once. A trigger uses outputs to activate an event in another entity."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Clients"
					notes = ""
				}
				"2":
				{
					category = ""
					description = "NPCs"
					notes = ""
				}
				"4":
				{
					category = ""
					description = "Pushables"
					notes = ""
				}
				"8":
				{
					category = ""
					description = "Physics Objects"
					notes = ""
				}
				"16":
				{
					category = ""
					description = "Only player ally NPCs"
					notes = ""
				}
				"32":
				{
					category = ""
					description = "Only clients in vehicles"
					notes = ""
				}
				"64":
				{
					category = ""
					description = "Everything (not including physics debris)"
					notes = ""
				}
				"512":
				{
					category = ""
					description = "Only clients *not* in vehicles"
					notes = ""
				}
				"1024":
				{
					category = ""
					description = "Physics debris"
					notes = ""
				}
				"2048":
				{
					category = ""
					description = "Only NPCs in vehicles (respects player ally flag)"
					notes = ""
				}
				"4096":
				{
					category = ""
					description = "Disallow Bots. ()�Correctly account for object mass (trigger_push used to assume 100Kg) and multiple component physics objects (car, blob...)�(in all games since [Alien Swarm])"
					notes = "Note: In [Garry's Mod], flag 4096 is 'Correctly account for object mass' for trigger_push only.[confirm]"
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "filter"
					shortinfo = "Filter Name"
					extra = ""
					notes = ""
					description = "A filter entity to test potential activators against."
					choices = {}
				}
				"mins":
				{
					typename = "vector"
					shortinfo = "Minimum Bounding Box Size"
					extra = "!FGD"
					notes = ""
					description = "Co-ordinate of the minimum bounding box corner. The bounding box is drawn from this corner to the other one. Requires Bounding Box collisions (solid 2) to be used. Can be used to overwrite the collision shape of a brush, although it can only be a cuboid."
					choices = {}
				}
				"maxs":
				{
					typename = "vector"
					shortinfo = "Maximum Bounding Box Size"
					extra = "!FGD"
					notes = ""
					description = "Co-ordinate of the maximum bounding box corner. The bounding box is drawn from this corner to the other one. Requires Bounding Box collisions (solid 2) to be used. Can be used to overwrite the collision shape of a brush, although it can only be a cuboid."
					choices = {}
				}
				"solid":
				{
					typename = "choices"
					shortinfo = "Collisions"
					extra = "!FGD"
					notes = ""
					description = "Method of collision for this entity.\n0: None\n1: BSP (QPhysics)\n2: Bounding Box\n3: Oriented Bounding Box\n4: Oriented Bounding Box, constrained to Yaw only\n5: Custom/Test\n6: VPhysics"
					choices = {}
				}
				"modelindex":
				{
					typename = "short"
					shortinfo = "Model Index"
					extra = "!FGD"
					notes = ""
					description = "Changes the entity's model to a precached model on the map."
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"StartDisabled":
				{
					typename = "boolean"
					shortinfo = "Start Disabled"
					extra = ""
					notes = ""
					description = "Stay dormant until activated (probably with the Enable input)."
					choices = {}
				}
			}
		}
		trigger_playermovement = 
		{
			description = "trigger_playermovement is a  brush entity available in all Source games. It can be used to control player's movement options, for instance by automatically ducking or forcing walking speed."
			flagnotes = ""
			flags = 
			{
				"16":
				{
					category = ""
					description = "(OBSOLETE, Uncheck me)"
					notes = ""
				}
				"128":
				{
					category = ""
					description = "Disable auto player movement"
					notes = ""
				}
				"2048":
				{
					category = ""
					description = "Auto-duck while in trigger"
					notes = ""
				}
				"4096":
				{
					category = ""
					description = "Auto-walk while in trigger (in all games since [Left 4 Dead])"
					notes = ""
				}
				"8192":
				{
					category = ""
					description = "Disable jump while in trigger (in all games since [Left 4 Dead 2])"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "filter"
					shortinfo = "Filter Name"
					extra = ""
					notes = ""
					description = "A filter entity to test potential activators against."
					choices = {}
				}
				"mins":
				{
					typename = "vector"
					shortinfo = "Minimum Bounding Box Size"
					extra = "!FGD"
					notes = ""
					description = "Co-ordinate of the minimum bounding box corner. The bounding box is drawn from this corner to the other one. Requires Bounding Box collisions (solid 2) to be used. Can be used to overwrite the collision shape of a brush, although it can only be a cuboid."
					choices = {}
				}
				"maxs":
				{
					typename = "vector"
					shortinfo = "Maximum Bounding Box Size"
					extra = "!FGD"
					notes = ""
					description = "Co-ordinate of the maximum bounding box corner. The bounding box is drawn from this corner to the other one. Requires Bounding Box collisions (solid 2) to be used. Can be used to overwrite the collision shape of a brush, although it can only be a cuboid."
					choices = {}
				}
				"solid":
				{
					typename = "choices"
					shortinfo = "Collisions"
					extra = "!FGD"
					notes = ""
					description = "Method of collision for this entity.\n0: None\n1: BSP (QPhysics)\n2: Bounding Box\n3: Oriented Bounding Box\n4: Oriented Bounding Box, constrained to Yaw only\n5: Custom/Test\n6: VPhysics"
					choices = {}
				}
				"modelindex":
				{
					typename = "short"
					shortinfo = "Model Index"
					extra = "!FGD"
					notes = ""
					description = "Changes the entity's model to a precached model on the map."
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"StartDisabled":
				{
					typename = "boolean"
					shortinfo = "Start Disabled"
					extra = ""
					notes = ""
					description = "Stay dormant until activated (probably with the Enable input)."
					choices = {}
				}
			}
		}
		trigger_proximity = 
		{
			description = "trigger_proximity is a  brush entity available in all Source games. It measures the distance of an entity within the trigger volume from a given point (and within a given radius). The NearestEntityDistance output will be 0 when the entity is at the center point, and 1 when the entity is at the radius.\n In code, it is represented by class CTriggerProximity, defined in trigger.cpp."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Clients"
					notes = ""
				}
				"2":
				{
					category = ""
					description = "NPCs"
					notes = ""
				}
				"4":
				{
					category = ""
					description = "Pushables"
					notes = ""
				}
				"8":
				{
					category = ""
					description = "Physics Objects"
					notes = ""
				}
				"16":
				{
					category = ""
					description = "Only player ally NPCs"
					notes = ""
				}
				"32":
				{
					category = ""
					description = "Only clients in vehicles"
					notes = ""
				}
				"64":
				{
					category = ""
					description = "Everything (not including physics debris)"
					notes = ""
				}
				"512":
				{
					category = ""
					description = "Only clients *not* in vehicles"
					notes = ""
				}
				"1024":
				{
					category = ""
					description = "Physics debris"
					notes = ""
				}
				"2048":
				{
					category = ""
					description = "Only NPCs in vehicles (respects player ally flag)"
					notes = ""
				}
				"4096":
				{
					category = ""
					description = "Disallow Bots. ()�Correctly account for object mass (trigger_push used to assume 100Kg) and multiple component physics objects (car, blob...)�(in all games since [Alien Swarm])"
					notes = "Note: In [Garry's Mod], flag 4096 is 'Correctly account for object mass' for trigger_push only.[confirm]"
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "targetname"
					shortinfo = "Point to Measure From"
					extra = ""
					notes = ""
					description = "The name of the target entity, the origin of which is the point to measure another entity's distance from."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "string"
					shortinfo = "Radius to measure within"
					extra = ""
					notes = ""
					description = "The radius to which the distance should be mapped. Entities outside the radius will be ignored."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "filter"
					shortinfo = "Filter Name"
					extra = ""
					notes = ""
					description = "A filter entity to test potential activators against."
					choices = {}
				}
				"mins":
				{
					typename = "vector"
					shortinfo = "Minimum Bounding Box Size"
					extra = "!FGD"
					notes = ""
					description = "Co-ordinate of the minimum bounding box corner. The bounding box is drawn from this corner to the other one. Requires Bounding Box collisions (solid 2) to be used. Can be used to overwrite the collision shape of a brush, although it can only be a cuboid."
					choices = {}
				}
				"maxs":
				{
					typename = "vector"
					shortinfo = "Maximum Bounding Box Size"
					extra = "!FGD"
					notes = ""
					description = "Co-ordinate of the maximum bounding box corner. The bounding box is drawn from this corner to the other one. Requires Bounding Box collisions (solid 2) to be used. Can be used to overwrite the collision shape of a brush, although it can only be a cuboid."
					choices = {}
				}
				"solid":
				{
					typename = "choices"
					shortinfo = "Collisions"
					extra = "!FGD"
					notes = ""
					description = "Method of collision for this entity.\n0: None\n1: BSP (QPhysics)\n2: Bounding Box\n3: Oriented Bounding Box\n4: Oriented Bounding Box, constrained to Yaw only\n5: Custom/Test\n6: VPhysics"
					choices = {}
				}
				"modelindex":
				{
					typename = "short"
					shortinfo = "Model Index"
					extra = "!FGD"
					notes = ""
					description = "Changes the entity's model to a precached model on the map."
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"StartDisabled":
				{
					typename = "boolean"
					shortinfo = "Start Disabled"
					extra = ""
					notes = ""
					description = "Stay dormant until activated (probably with the Enable input)."
					choices = {}
				}
			}
		}
		trigger_push = 
		{
			description = "trigger_push is a  brush entity available in all Source games. It is a trigger volume that pushes entities that touch it, except those with a parent.\n In code, it is represented by class CTriggerPush, defined in triggers.cpp."
			flagnotes = ""
			flags = 
			{
				"128":
				{
					category = ""
					description = "Once Only (possibly means set velocity rather than apply acceleration)"
					notes = ""
				}
				"256":
				{
					category = ""
					description = "Affects Ladders (Half-Life 2)"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"pushdir":
				{
					typename = "angle"
					shortinfo = "Push Direction"
					extra = ""
					notes = ""
					description = "Angles indicating the direction to push touched entities."
					choices = {}
				}
				"speed":
				{
					typename = "integer"
					shortinfo = "Speed of Push"
					extra = ""
					notes = ""
					description = "The speed at which to push entities away, in inches / second."
					choices = {}
				}
				"alternateticksfix":
				{
					typename = "float"
					shortinfo = "Scale force for alternate ticks"
					extra = ""
					notes = ""
					description = "If nonzero, scale the force by this amount when running with alternate ticks. This fixes problems with an overly large force due to the longer frametime on when running with sv_alternateticks 1."
					choices = {}
				}
				"triggeronstarttouch":
				{
					typename = "boolean"
					shortinfo = "Trigger on Start Touch"
					extra = "(only in [Left 4 Dead 2])"
					notes = ""
					description = "Trigger on start touch instead of on touch."
					choices = {}
				}
				"OnlyFallingPlayers":
				{
					typename = "boolean"
					shortinfo = "Only Falling Players"
					extra = "(in all games since [Counter-Strike: Global Offensive])�(also in [Garry's Mod])"
					notes = ""
					description = "Only affect players if they are falling (and not pressing jump)."
					choices = {}
				}
				"FallingSpeedThreshold":
				{
					typename = "float"
					shortinfo = "Player fall speed"
					extra = "(in all games since [Counter-Strike: Global Offensive])�(also in [Garry's Mod])"
					notes = ""
					description = "A player must be falling this fast for them to be pushed."
					choices = {}
				}
			}
		}
		trigger_remove = 
		{
			description = "trigger_remove is a  brush entity available in all Source games. It is a trigger volume that removes any entities that touch it.\nThis is not the same as killing entities; i.e. NPCs removed in this manner will not fire their OnKilled outputs.\n In code, it is represented by class CTriggerRemove, defined in triggers.cpp."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Clients"
					notes = ""
				}
				"2":
				{
					category = ""
					description = "NPCs"
					notes = ""
				}
				"4":
				{
					category = ""
					description = "Pushables"
					notes = ""
				}
				"8":
				{
					category = ""
					description = "Physics Objects"
					notes = ""
				}
				"16":
				{
					category = ""
					description = "Only player ally NPCs"
					notes = ""
				}
				"32":
				{
					category = ""
					description = "Only clients in vehicles"
					notes = ""
				}
				"64":
				{
					category = ""
					description = "Everything (not including physics debris)"
					notes = ""
				}
				"512":
				{
					category = ""
					description = "Only clients *not* in vehicles"
					notes = ""
				}
				"1024":
				{
					category = ""
					description = "Physics debris"
					notes = ""
				}
				"2048":
				{
					category = ""
					description = "Only NPCs in vehicles (respects player ally flag)"
					notes = ""
				}
				"4096":
				{
					category = ""
					description = "Disallow Bots. ()�Correctly account for object mass (trigger_push used to assume 100Kg) and multiple component physics objects (car, blob...)�(in all games since [Alien Swarm])"
					notes = "Note: In [Garry's Mod], flag 4096 is 'Correctly account for object mass' for trigger_push only.[confirm]"
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "filter"
					shortinfo = "Filter Name"
					extra = ""
					notes = ""
					description = "A filter entity to test potential activators against."
					choices = {}
				}
				"mins":
				{
					typename = "vector"
					shortinfo = "Minimum Bounding Box Size"
					extra = "!FGD"
					notes = ""
					description = "Co-ordinate of the minimum bounding box corner. The bounding box is drawn from this corner to the other one. Requires Bounding Box collisions (solid 2) to be used. Can be used to overwrite the collision shape of a brush, although it can only be a cuboid."
					choices = {}
				}
				"maxs":
				{
					typename = "vector"
					shortinfo = "Maximum Bounding Box Size"
					extra = "!FGD"
					notes = ""
					description = "Co-ordinate of the maximum bounding box corner. The bounding box is drawn from this corner to the other one. Requires Bounding Box collisions (solid 2) to be used. Can be used to overwrite the collision shape of a brush, although it can only be a cuboid."
					choices = {}
				}
				"solid":
				{
					typename = "choices"
					shortinfo = "Collisions"
					extra = "!FGD"
					notes = ""
					description = "Method of collision for this entity.\n0: None\n1: BSP (QPhysics)\n2: Bounding Box\n3: Oriented Bounding Box\n4: Oriented Bounding Box, constrained to Yaw only\n5: Custom/Test\n6: VPhysics"
					choices = {}
				}
				"modelindex":
				{
					typename = "short"
					shortinfo = "Model Index"
					extra = "!FGD"
					notes = ""
					description = "Changes the entity's model to a precached model on the map."
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"StartDisabled":
				{
					typename = "boolean"
					shortinfo = "Start Disabled"
					extra = ""
					notes = ""
					description = "Stay dormant until activated (probably with the Enable input)."
					choices = {}
				}
			}
		}
		trigger_serverragdoll = 
		{
			description = "trigger_serverragdoll is a  brush entity available in all Episode One games. It is a volume that forces any NPC inside it to create a server side ragdoll instead of a client one."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		trigger_soundscape = 
		{
			description = "trigger_soundscape is a  brush entity available in all Source games. It automatically triggers an env_soundscape_triggerable whenever a player is inside its volume and not triggering any other soundscape entities."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Clients"
					notes = ""
				}
				"2":
				{
					category = ""
					description = "NPCs"
					notes = ""
				}
				"4":
				{
					category = ""
					description = "Pushables"
					notes = ""
				}
				"8":
				{
					category = ""
					description = "Physics Objects"
					notes = ""
				}
				"16":
				{
					category = ""
					description = "Only player ally NPCs"
					notes = ""
				}
				"32":
				{
					category = ""
					description = "Only clients in vehicles"
					notes = ""
				}
				"64":
				{
					category = ""
					description = "Everything (not including physics debris)"
					notes = ""
				}
				"512":
				{
					category = ""
					description = "Only clients *not* in vehicles"
					notes = ""
				}
				"1024":
				{
					category = ""
					description = "Physics debris"
					notes = ""
				}
				"2048":
				{
					category = ""
					description = "Only NPCs in vehicles (respects player ally flag)"
					notes = ""
				}
				"4096":
				{
					category = ""
					description = "Disallow Bots. ()�Correctly account for object mass (trigger_push used to assume 100Kg) and multiple component physics objects (car, blob...)�(in all games since [Alien Swarm])"
					notes = "Note: In [Garry's Mod], flag 4096 is 'Correctly account for object mass' for trigger_push only.[confirm]"
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "targetname"
					shortinfo = "Soundscape"
					extra = ""
					notes = ""
					description = "The env_soundscape_triggerable that this brush triggers. (Not to be confused with the actual soundscape that the env_soundscape_triggerable then calls.)"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "filter"
					shortinfo = "Filter Name"
					extra = ""
					notes = ""
					description = "A filter entity to test potential activators against."
					choices = {}
				}
				"mins":
				{
					typename = "vector"
					shortinfo = "Minimum Bounding Box Size"
					extra = "!FGD"
					notes = ""
					description = "Co-ordinate of the minimum bounding box corner. The bounding box is drawn from this corner to the other one. Requires Bounding Box collisions (solid 2) to be used. Can be used to overwrite the collision shape of a brush, although it can only be a cuboid."
					choices = {}
				}
				"maxs":
				{
					typename = "vector"
					shortinfo = "Maximum Bounding Box Size"
					extra = "!FGD"
					notes = ""
					description = "Co-ordinate of the maximum bounding box corner. The bounding box is drawn from this corner to the other one. Requires Bounding Box collisions (solid 2) to be used. Can be used to overwrite the collision shape of a brush, although it can only be a cuboid."
					choices = {}
				}
				"solid":
				{
					typename = "choices"
					shortinfo = "Collisions"
					extra = "!FGD"
					notes = ""
					description = "Method of collision for this entity.\n0: None\n1: BSP (QPhysics)\n2: Bounding Box\n3: Oriented Bounding Box\n4: Oriented Bounding Box, constrained to Yaw only\n5: Custom/Test\n6: VPhysics"
					choices = {}
				}
				"modelindex":
				{
					typename = "short"
					shortinfo = "Model Index"
					extra = "!FGD"
					notes = ""
					description = "Changes the entity's model to a precached model on the map."
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"StartDisabled":
				{
					typename = "boolean"
					shortinfo = "Start Disabled"
					extra = ""
					notes = ""
					description = "Stay dormant until activated (probably with the Enable input)."
					choices = {}
				}
			}
		}
		trigger_teleport = 
		{
			description = "trigger_teleport is a  brush entity available in all Source games."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Clients"
					notes = ""
				}
				"2":
				{
					category = ""
					description = "NPCs"
					notes = ""
				}
				"4":
				{
					category = ""
					description = "Pushables"
					notes = ""
				}
				"8":
				{
					category = ""
					description = "Physics Objects"
					notes = ""
				}
				"16":
				{
					category = ""
					description = "Only player ally NPCs"
					notes = ""
				}
				"32":
				{
					category = ""
					description = "Only clients in vehicles"
					notes = ""
				}
				"64":
				{
					category = ""
					description = "Everything (not including physics debris)"
					notes = ""
				}
				"512":
				{
					category = ""
					description = "Only clients *not* in vehicles"
					notes = ""
				}
				"1024":
				{
					category = ""
					description = "Physics debris"
					notes = ""
				}
				"2048":
				{
					category = ""
					description = "Only NPCs in vehicles (respects player ally flag)"
					notes = ""
				}
				"4096":
				{
					category = ""
					description = "Disallow Bots. ()�Correctly account for object mass (trigger_push used to assume 100Kg) and multiple component physics objects (car, blob...)�(in all games since [Alien Swarm])"
					notes = "Note: In [Garry's Mod], flag 4096 is 'Correctly account for object mass' for trigger_push only.[confirm]"
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "targetname"
					shortinfo = "Remote Destination"
					extra = ""
					notes = "Note: Any entity can be used as the teleport destination, including players./nWarning: [Counter-Strike: Global Offensive] Teleport to a killed teleport destination entity will crash your client/server."
					description = "The entity specifying the point to which entities should be teleported.  Usually either a info_teleport_destination or info_target."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "targetname"
					shortinfo = "Local Destination Landmark"
					extra = ""
					notes = "Tip: You can use !self to use the origin of this entity as the landmark."
					description = "If specified, then teleported entities are offset from the target by their initial offset from the landmark."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "filter"
					shortinfo = "Filter Name"
					extra = ""
					notes = ""
					description = "A filter entity to test potential activators against."
					choices = {}
				}
				"mins":
				{
					typename = "vector"
					shortinfo = "Minimum Bounding Box Size"
					extra = "!FGD"
					notes = ""
					description = "Co-ordinate of the minimum bounding box corner. The bounding box is drawn from this corner to the other one. Requires Bounding Box collisions (solid 2) to be used. Can be used to overwrite the collision shape of a brush, although it can only be a cuboid."
					choices = {}
				}
				"maxs":
				{
					typename = "vector"
					shortinfo = "Maximum Bounding Box Size"
					extra = "!FGD"
					notes = ""
					description = "Co-ordinate of the maximum bounding box corner. The bounding box is drawn from this corner to the other one. Requires Bounding Box collisions (solid 2) to be used. Can be used to overwrite the collision shape of a brush, although it can only be a cuboid."
					choices = {}
				}
				"solid":
				{
					typename = "choices"
					shortinfo = "Collisions"
					extra = "!FGD"
					notes = ""
					description = "Method of collision for this entity.\n0: None\n1: BSP (QPhysics)\n2: Bounding Box\n3: Oriented Bounding Box\n4: Oriented Bounding Box, constrained to Yaw only\n5: Custom/Test\n6: VPhysics"
					choices = {}
				}
				"modelindex":
				{
					typename = "short"
					shortinfo = "Model Index"
					extra = "!FGD"
					notes = ""
					description = "Changes the entity's model to a precached model on the map."
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"StartDisabled":
				{
					typename = "boolean"
					shortinfo = "Start Disabled"
					extra = ""
					notes = ""
					description = "Stay dormant until activated (probably with the Enable input)."
					choices = {}
				}
			}
		}
		trigger_tonemap = 
		{
			description = "trigger_tonemap is a  brush entity available in all Source games since [Left 4 Dead] Left 4 Dead."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"TonemapName":
				{
					typename = "targetname"
					shortinfo = "Tonemap Name"
					extra = ""
					notes = ""
					description = "The name of the tonemap controller entity associated with this trigger."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		trigger_transition = 
		{
			description = "trigger_transition is a  brush entity available in all Source games. It controls which entities go through a level transition. Trigger transitions should be named the same as the info_landmark which is associated with a particular trigger_changelevel. Any entities which are within the trigger_transition brush volume will then go to the next map. The player must also be inside the brush volume."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		trigger_wind = 
		{
			description = "trigger_wind is a  brush entity available in all Source games. It is a trigger that pushes physics objects that touch its volume.\n In code, it is represented by class CTriggerWind, defined in triggers.cpp."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Clients"
					notes = ""
				}
				"2":
				{
					category = ""
					description = "NPCs"
					notes = ""
				}
				"4":
				{
					category = ""
					description = "Pushables"
					notes = ""
				}
				"8":
				{
					category = ""
					description = "Physics Objects"
					notes = ""
				}
				"16":
				{
					category = ""
					description = "Only player ally NPCs"
					notes = ""
				}
				"32":
				{
					category = ""
					description = "Only clients in vehicles"
					notes = ""
				}
				"64":
				{
					category = ""
					description = "Everything (not including physics debris)"
					notes = ""
				}
				"512":
				{
					category = ""
					description = "Only clients *not* in vehicles"
					notes = ""
				}
				"1024":
				{
					category = ""
					description = "Physics debris"
					notes = ""
				}
				"2048":
				{
					category = ""
					description = "Only NPCs in vehicles (respects player ally flag)"
					notes = ""
				}
				"4096":
				{
					category = ""
					description = "Disallow Bots. ()�Correctly account for object mass (trigger_push used to assume 100Kg) and multiple component physics objects (car, blob...)�(in all games since [Alien Swarm])"
					notes = "Note: In [Garry's Mod], flag 4096 is 'Correctly account for object mass' for trigger_push only.[confirm]"
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "integer"
					shortinfo = "Speed"
					extra = ""
					notes = ""
					description = "The baseline for how hard the wind blows."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "integer"
					shortinfo = "Speed Noise"
					extra = ""
					notes = ""
					description = "Noise added to wind speed +/-"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "integer"
					shortinfo = "Direction Noise"
					extra = ""
					notes = ""
					description = "Noise added to wind direction."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "integer"
					shortinfo = "Hold Time"
					extra = ""
					notes = ""
					description = "Baseline for how long to wait before changing wind."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_5":
				{
					typename = "integer"
					shortinfo = "Hold Noise"
					extra = ""
					notes = ""
					description = "Noise added to how long to wait before changing wind."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_6":
				{
					typename = "filter"
					shortinfo = "Filter Name"
					extra = ""
					notes = ""
					description = "A filter entity to test potential activators against."
					choices = {}
				}
				"mins":
				{
					typename = "vector"
					shortinfo = "Minimum Bounding Box Size"
					extra = "!FGD"
					notes = ""
					description = "Co-ordinate of the minimum bounding box corner. The bounding box is drawn from this corner to the other one. Requires Bounding Box collisions (solid 2) to be used. Can be used to overwrite the collision shape of a brush, although it can only be a cuboid."
					choices = {}
				}
				"maxs":
				{
					typename = "vector"
					shortinfo = "Maximum Bounding Box Size"
					extra = "!FGD"
					notes = ""
					description = "Co-ordinate of the maximum bounding box corner. The bounding box is drawn from this corner to the other one. Requires Bounding Box collisions (solid 2) to be used. Can be used to overwrite the collision shape of a brush, although it can only be a cuboid."
					choices = {}
				}
				"solid":
				{
					typename = "choices"
					shortinfo = "Collisions"
					extra = "!FGD"
					notes = ""
					description = "Method of collision for this entity.\n0: None\n1: BSP (QPhysics)\n2: Bounding Box\n3: Oriented Bounding Box\n4: Oriented Bounding Box, constrained to Yaw only\n5: Custom/Test\n6: VPhysics"
					choices = {}
				}
				"modelindex":
				{
					typename = "short"
					shortinfo = "Model Index"
					extra = "!FGD"
					notes = ""
					description = "Changes the entity's model to a precached model on the map."
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"StartDisabled":
				{
					typename = "boolean"
					shortinfo = "Start Disabled"
					extra = ""
					notes = ""
					description = "Stay dormant until activated (probably with the Enable input)."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
			}
		}
		
	}
	upgrade = 
	{
		upgrade_spawn = 
		{
			description = "[Left 4 Dead 2]�upgrade_spawn is a  point entity available in Left 4 Dead 2. It is a configurable spawner for weapon upgrades."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Enable Physics on spawned item"
					notes = ""
				}
				"2":
				{
					category = ""
					description = "Spawned Item Must Exist"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "integer"
					shortinfo = "Laser Sight"
					extra = ""
					notes = ""
					description = ""
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "integer"
					shortinfo = "UpgradePack - Incendiary"
					extra = ""
					notes = ""
					description = ""
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "integer"
					shortinfo = "UpgradePack - Explosive"
					extra = ""
					notes = ""
					description = ""
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		upgrade_ammo_explosive = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		upgrade_ammo_incendiary = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		upgrade_laser_sight = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		
	}
	weapon = 
	{
		weapon_adrenaline_spawn = 
		{
			description = "[Left 4 Dead 2]�weapon_adrenaline_spawn is a  point entity available in Left 4 Dead 2. It is a possible spawn point for adrenaline."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Enable Physics"
					notes = ""
				}
				"2":
				{
					category = ""
					description = "Must Exist"
					notes = ""
				}
				"8":
				{
					category = ""
					description = "Infinite items (overrides count)"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "integer"
					shortinfo = "Weapon Skin"
					extra = ""
					notes = ""
					description = "Some weapons have multiple versions of their textures, called skins. Set this to a number other than -1 to make the given weapon use that skin instead of the default."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "float"
					shortinfo = "Glow Range"
					extra = ""
					notes = ""
					description = "Set a custom glow range for this spawner. 0 means use the default range."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "choices"
					shortinfo = "Collisions"
					extra = ""
					notes = ""
					description = "Collision box type.\n0�: Not Solid\n2�: Use Bounding Box\n6�: Use VPhysics"
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
				"model":
				{
					typename = "string"
					shortinfo = "World Model"
					extra = ""
					notes = ""
					description = "The model this entity should appear as. 128-character limit."
					choices = {}
				}
				"skin":
				{
					typename = "integer"
					shortinfo = "Skin"
					extra = ""
					notes = ""
					description = "Some models have multiple skins. This value selects from the index, starting with 0. �Tip:�Hammer's model browser automatically updates this value if you use it to view different skins."
					choices = {}
				}
				"modelscale":
				{
					typename = "float"
					shortinfo = "Model Scale"
					extra = "(in all games since [Source][Source])"
					notes = ""
					description = "A multiplier for the size of the model."
					choices = {}
				}
				"disableshadows":
				{
					typename = "boolean"
					shortinfo = "Disable Shadows"
					extra = ""
					notes = ""
					description = "Prevents the entity from creating cheap render-to-texture shadows, or lightmap shadows if the entity is a prop_static. Does not affect shadow mapping."
					choices = {}
				}
				"disableshadowdepth":
				{
					typename = "boolean"
					shortinfo = "Disable ShadowDepth"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable rendering into shadow depth (for projected textures) for this entity."
					choices = {}
				}
				"shadowdepthnocache":
				{
					typename = "choices"
					shortinfo = "Projected Texture Cache"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to hint projected texture system whether it is sufficient to cache shadow volume of this entity or to force render it every frame instead.\n0�: Default\n1�: No cache - render every frame\n2�: Cache it - render only once"
					choices = {}
				}
				"disableflashlight":
				{
					typename = "boolean"
					shortinfo = "Disable flashlight"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable projected texture lighting and shadows on this entity."
					choices = {}
				}
				"drawinfastreflection":
				{
					typename = "boolean"
					shortinfo = "Render in Fast Reflections"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "If enabled, this entity will render in fast water reflections (i.e. when a water material specifies $reflectonlymarkedentities) and in the world impostor pass."
					choices = {}
				}
			}
		}
		weapon_ammo_spawn = 
		{
			description = "[Left 4 Dead][Left 4 Dead 2]�weapon_ammo_spawn is a  point entity available in the Left 4 Dead series. It is a possible spawnpoint for ammo restock."
			flagnotes = ""
			flags = 
			{
				"4":
				{
					category = ""
					description = "Absorb any dropped weapon type"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "integer"
					shortinfo = "Count"
					extra = ""
					notes = ""
					description = "Max number of weapons given before disappearing."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "integer"
					shortinfo = "Weapon Skin"
					extra = ""
					notes = ""
					description = "Some weapons have multiple versions of their textures, called skins. Set this to a number other than -1 to make the given weapon use that skin instead of the default."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "float"
					shortinfo = "Glow Range"
					extra = ""
					notes = ""
					description = "Set a custom glow range for this spawner. 0 means use the default range."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "choices"
					shortinfo = "Collisions"
					extra = ""
					notes = ""
					description = "Collision box type.\n0�: Not Solid\n2�: Use Bounding Box\n6�: Use VPhysics"
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_5":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
				"model":
				{
					typename = "string"
					shortinfo = "World Model"
					extra = ""
					notes = ""
					description = "The model this entity should appear as. 128-character limit."
					choices = {}
				}
				"skin":
				{
					typename = "integer"
					shortinfo = "Skin"
					extra = ""
					notes = ""
					description = "Some models have multiple skins. This value selects from the index, starting with 0. �Tip:�Hammer's model browser automatically updates this value if you use it to view different skins."
					choices = {}
				}
				"modelscale":
				{
					typename = "float"
					shortinfo = "Model Scale"
					extra = "(in all games since [Source][Source])"
					notes = ""
					description = "A multiplier for the size of the model."
					choices = {}
				}
				"disableshadows":
				{
					typename = "boolean"
					shortinfo = "Disable Shadows"
					extra = ""
					notes = ""
					description = "Prevents the entity from creating cheap render-to-texture shadows, or lightmap shadows if the entity is a prop_static. Does not affect shadow mapping."
					choices = {}
				}
				"disableshadowdepth":
				{
					typename = "boolean"
					shortinfo = "Disable ShadowDepth"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable rendering into shadow depth (for projected textures) for this entity."
					choices = {}
				}
				"shadowdepthnocache":
				{
					typename = "choices"
					shortinfo = "Projected Texture Cache"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to hint projected texture system whether it is sufficient to cache shadow volume of this entity or to force render it every frame instead.\n0�: Default\n1�: No cache - render every frame\n2�: Cache it - render only once"
					choices = {}
				}
				"disableflashlight":
				{
					typename = "boolean"
					shortinfo = "Disable flashlight"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable projected texture lighting and shadows on this entity."
					choices = {}
				}
				"drawinfastreflection":
				{
					typename = "boolean"
					shortinfo = "Render in Fast Reflections"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "If enabled, this entity will render in fast water reflections (i.e. when a water material specifies $reflectonlymarkedentities) and in the world impostor pass."
					choices = {}
				}
			}
		}
		weapon_autoshotgun_spawn = 
		{
			description = "[Left 4 Dead][Left 4 Dead 2]�weapon_autoshotgun_spawn is a  point entity available in the Left 4 Dead series. It is a possible spawn point for automatic shotguns."
			flagnotes = ""
			flags = 
			{
				"4":
				{
					category = ""
					description = "Absorb any dropped weapon type"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "integer"
					shortinfo = "Count"
					extra = ""
					notes = ""
					description = "Max number of weapons given before disappearing."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "integer"
					shortinfo = "Weapon Skin"
					extra = ""
					notes = ""
					description = "Some weapons have multiple versions of their textures, called skins. Set this to a number other than -1 to make the given weapon use that skin instead of the default."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "float"
					shortinfo = "Glow Range"
					extra = ""
					notes = ""
					description = "Set a custom glow range for this spawner. 0 means use the default range."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "choices"
					shortinfo = "Collisions"
					extra = ""
					notes = ""
					description = "Collision box type.\n0�: Not Solid\n2�: Use Bounding Box\n6�: Use VPhysics"
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_5":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
				"model":
				{
					typename = "string"
					shortinfo = "World Model"
					extra = ""
					notes = ""
					description = "The model this entity should appear as. 128-character limit."
					choices = {}
				}
				"skin":
				{
					typename = "integer"
					shortinfo = "Skin"
					extra = ""
					notes = ""
					description = "Some models have multiple skins. This value selects from the index, starting with 0. �Tip:�Hammer's model browser automatically updates this value if you use it to view different skins."
					choices = {}
				}
				"modelscale":
				{
					typename = "float"
					shortinfo = "Model Scale"
					extra = "(in all games since [Source][Source])"
					notes = ""
					description = "A multiplier for the size of the model."
					choices = {}
				}
				"disableshadows":
				{
					typename = "boolean"
					shortinfo = "Disable Shadows"
					extra = ""
					notes = ""
					description = "Prevents the entity from creating cheap render-to-texture shadows, or lightmap shadows if the entity is a prop_static. Does not affect shadow mapping."
					choices = {}
				}
				"disableshadowdepth":
				{
					typename = "boolean"
					shortinfo = "Disable ShadowDepth"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable rendering into shadow depth (for projected textures) for this entity."
					choices = {}
				}
				"shadowdepthnocache":
				{
					typename = "choices"
					shortinfo = "Projected Texture Cache"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to hint projected texture system whether it is sufficient to cache shadow volume of this entity or to force render it every frame instead.\n0�: Default\n1�: No cache - render every frame\n2�: Cache it - render only once"
					choices = {}
				}
				"disableflashlight":
				{
					typename = "boolean"
					shortinfo = "Disable flashlight"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable projected texture lighting and shadows on this entity."
					choices = {}
				}
				"drawinfastreflection":
				{
					typename = "boolean"
					shortinfo = "Render in Fast Reflections"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "If enabled, this entity will render in fast water reflections (i.e. when a water material specifies $reflectonlymarkedentities) and in the world impostor pass."
					choices = {}
				}
			}
		}
		weapon_chainsaw_spawn = 
		{
			description = "[Left 4 Dead 2]�weapon_chainsaw_spawn is a  point entity available in Left 4 Dead 2. It is a possible spawn point for a chainsaw."
			flagnotes = ""
			flags = 
			{
				"4":
				{
					category = ""
					description = "Absorb any dropped weapon type"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "integer"
					shortinfo = "Count"
					extra = ""
					notes = ""
					description = "Max number of weapons given before disappearing."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "integer"
					shortinfo = "Weapon Skin"
					extra = ""
					notes = ""
					description = "Some weapons have multiple versions of their textures, called skins. Set this to a number other than -1 to make the given weapon use that skin instead of the default."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "float"
					shortinfo = "Glow Range"
					extra = ""
					notes = ""
					description = "Set a custom glow range for this spawner. 0 means use the default range."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "choices"
					shortinfo = "Collisions"
					extra = ""
					notes = ""
					description = "Collision box type.\n0�: Not Solid\n2�: Use Bounding Box\n6�: Use VPhysics"
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_5":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
				"model":
				{
					typename = "string"
					shortinfo = "World Model"
					extra = ""
					notes = ""
					description = "The model this entity should appear as. 128-character limit."
					choices = {}
				}
				"skin":
				{
					typename = "integer"
					shortinfo = "Skin"
					extra = ""
					notes = ""
					description = "Some models have multiple skins. This value selects from the index, starting with 0. �Tip:�Hammer's model browser automatically updates this value if you use it to view different skins."
					choices = {}
				}
				"modelscale":
				{
					typename = "float"
					shortinfo = "Model Scale"
					extra = "(in all games since [Source][Source])"
					notes = ""
					description = "A multiplier for the size of the model."
					choices = {}
				}
				"disableshadows":
				{
					typename = "boolean"
					shortinfo = "Disable Shadows"
					extra = ""
					notes = ""
					description = "Prevents the entity from creating cheap render-to-texture shadows, or lightmap shadows if the entity is a prop_static. Does not affect shadow mapping."
					choices = {}
				}
				"disableshadowdepth":
				{
					typename = "boolean"
					shortinfo = "Disable ShadowDepth"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable rendering into shadow depth (for projected textures) for this entity."
					choices = {}
				}
				"shadowdepthnocache":
				{
					typename = "choices"
					shortinfo = "Projected Texture Cache"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to hint projected texture system whether it is sufficient to cache shadow volume of this entity or to force render it every frame instead.\n0�: Default\n1�: No cache - render every frame\n2�: Cache it - render only once"
					choices = {}
				}
				"disableflashlight":
				{
					typename = "boolean"
					shortinfo = "Disable flashlight"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable projected texture lighting and shadows on this entity."
					choices = {}
				}
				"drawinfastreflection":
				{
					typename = "boolean"
					shortinfo = "Render in Fast Reflections"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "If enabled, this entity will render in fast water reflections (i.e. when a water material specifies $reflectonlymarkedentities) and in the world impostor pass."
					choices = {}
				}
			}
		}
		weapon_defibrillator_spawn = 
		{
			description = "[Left 4 Dead 2]�weapon_defibrillator_spawn is a  point entity available in Left 4 Dead 2. It is a possible spawn point for a defibrillator."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Enable Physics"
					notes = ""
				}
				"2":
				{
					category = ""
					description = "Must Exist"
					notes = ""
				}
				"8":
				{
					category = ""
					description = "Infinite items (overrides count)"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "integer"
					shortinfo = "Weapon Skin"
					extra = ""
					notes = ""
					description = "Some weapons have multiple versions of their textures, called skins. Set this to a number other than -1 to make the given weapon use that skin instead of the default."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "float"
					shortinfo = "Glow Range"
					extra = ""
					notes = ""
					description = "Set a custom glow range for this spawner. 0 means use the default range."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "choices"
					shortinfo = "Collisions"
					extra = ""
					notes = ""
					description = "Collision box type.\n0�: Not Solid\n2�: Use Bounding Box\n6�: Use VPhysics"
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
				"model":
				{
					typename = "string"
					shortinfo = "World Model"
					extra = ""
					notes = ""
					description = "The model this entity should appear as. 128-character limit."
					choices = {}
				}
				"skin":
				{
					typename = "integer"
					shortinfo = "Skin"
					extra = ""
					notes = ""
					description = "Some models have multiple skins. This value selects from the index, starting with 0. �Tip:�Hammer's model browser automatically updates this value if you use it to view different skins."
					choices = {}
				}
				"modelscale":
				{
					typename = "float"
					shortinfo = "Model Scale"
					extra = "(in all games since [Source][Source])"
					notes = ""
					description = "A multiplier for the size of the model."
					choices = {}
				}
				"disableshadows":
				{
					typename = "boolean"
					shortinfo = "Disable Shadows"
					extra = ""
					notes = ""
					description = "Prevents the entity from creating cheap render-to-texture shadows, or lightmap shadows if the entity is a prop_static. Does not affect shadow mapping."
					choices = {}
				}
				"disableshadowdepth":
				{
					typename = "boolean"
					shortinfo = "Disable ShadowDepth"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable rendering into shadow depth (for projected textures) for this entity."
					choices = {}
				}
				"shadowdepthnocache":
				{
					typename = "choices"
					shortinfo = "Projected Texture Cache"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to hint projected texture system whether it is sufficient to cache shadow volume of this entity or to force render it every frame instead.\n0�: Default\n1�: No cache - render every frame\n2�: Cache it - render only once"
					choices = {}
				}
				"disableflashlight":
				{
					typename = "boolean"
					shortinfo = "Disable flashlight"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable projected texture lighting and shadows on this entity."
					choices = {}
				}
				"drawinfastreflection":
				{
					typename = "boolean"
					shortinfo = "Render in Fast Reflections"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "If enabled, this entity will render in fast water reflections (i.e. when a water material specifies $reflectonlymarkedentities) and in the world impostor pass."
					choices = {}
				}
			}
		}
		weapon_first_aid_kit_spawn = 
		{
			description = "[Left 4 Dead][Left 4 Dead 2]�weapon_first_aid_kit_spawn is a  point entity available in the Left 4 Dead series. It is a possible spawn point for first aid kits."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Enable Physics"
					notes = ""
				}
				"2":
				{
					category = ""
					description = "Must Exist"
					notes = ""
				}
				"8":
				{
					category = ""
					description = "Infinite items (overrides count)"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "integer"
					shortinfo = "Weapon Skin"
					extra = ""
					notes = ""
					description = "Some weapons have multiple versions of their textures, called skins. Set this to a number other than -1 to make the given weapon use that skin instead of the default."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "float"
					shortinfo = "Glow Range"
					extra = ""
					notes = ""
					description = "Set a custom glow range for this spawner. 0 means use the default range."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "choices"
					shortinfo = "Collisions"
					extra = ""
					notes = ""
					description = "Collision box type.\n0�: Not Solid\n2�: Use Bounding Box\n6�: Use VPhysics"
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
				"model":
				{
					typename = "string"
					shortinfo = "World Model"
					extra = ""
					notes = ""
					description = "The model this entity should appear as. 128-character limit."
					choices = {}
				}
				"skin":
				{
					typename = "integer"
					shortinfo = "Skin"
					extra = ""
					notes = ""
					description = "Some models have multiple skins. This value selects from the index, starting with 0. �Tip:�Hammer's model browser automatically updates this value if you use it to view different skins."
					choices = {}
				}
				"modelscale":
				{
					typename = "float"
					shortinfo = "Model Scale"
					extra = "(in all games since [Source][Source])"
					notes = ""
					description = "A multiplier for the size of the model."
					choices = {}
				}
				"disableshadows":
				{
					typename = "boolean"
					shortinfo = "Disable Shadows"
					extra = ""
					notes = ""
					description = "Prevents the entity from creating cheap render-to-texture shadows, or lightmap shadows if the entity is a prop_static. Does not affect shadow mapping."
					choices = {}
				}
				"disableshadowdepth":
				{
					typename = "boolean"
					shortinfo = "Disable ShadowDepth"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable rendering into shadow depth (for projected textures) for this entity."
					choices = {}
				}
				"shadowdepthnocache":
				{
					typename = "choices"
					shortinfo = "Projected Texture Cache"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to hint projected texture system whether it is sufficient to cache shadow volume of this entity or to force render it every frame instead.\n0�: Default\n1�: No cache - render every frame\n2�: Cache it - render only once"
					choices = {}
				}
				"disableflashlight":
				{
					typename = "boolean"
					shortinfo = "Disable flashlight"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable projected texture lighting and shadows on this entity."
					choices = {}
				}
				"drawinfastreflection":
				{
					typename = "boolean"
					shortinfo = "Render in Fast Reflections"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "If enabled, this entity will render in fast water reflections (i.e. when a water material specifies $reflectonlymarkedentities) and in the world impostor pass."
					choices = {}
				}
			}
		}
		weapon_gascan_spawn = 
		{
			description = "[Left 4 Dead 2]�weapon_gascan_spawn is a  point entity available in Left 4 Dead 2. It is a possible spawn point for a gas can."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Enable Physics"
					notes = ""
				}
				"2":
				{
					category = ""
					description = "Must Exist"
					notes = ""
				}
				"8":
				{
					category = ""
					description = "Infinite items (overrides count)"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "integer"
					shortinfo = "Weapon Skin"
					extra = ""
					notes = ""
					description = "Some weapons have multiple versions of their textures, called skins. Set this to a number other than -1 to make the given weapon use that skin instead of the default."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "float"
					shortinfo = "Glow Range"
					extra = ""
					notes = ""
					description = "Set a custom glow range for this spawner. 0 means use the default range."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "choices"
					shortinfo = "Collisions"
					extra = ""
					notes = ""
					description = "Collision box type.\n0�: Not Solid\n2�: Use Bounding Box\n6�: Use VPhysics"
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
				"model":
				{
					typename = "string"
					shortinfo = "World Model"
					extra = ""
					notes = ""
					description = "The model this entity should appear as. 128-character limit."
					choices = {}
				}
				"skin":
				{
					typename = "integer"
					shortinfo = "Skin"
					extra = ""
					notes = ""
					description = "Some models have multiple skins. This value selects from the index, starting with 0. �Tip:�Hammer's model browser automatically updates this value if you use it to view different skins."
					choices = {}
				}
				"modelscale":
				{
					typename = "float"
					shortinfo = "Model Scale"
					extra = "(in all games since [Source][Source])"
					notes = ""
					description = "A multiplier for the size of the model."
					choices = {}
				}
				"disableshadows":
				{
					typename = "boolean"
					shortinfo = "Disable Shadows"
					extra = ""
					notes = ""
					description = "Prevents the entity from creating cheap render-to-texture shadows, or lightmap shadows if the entity is a prop_static. Does not affect shadow mapping."
					choices = {}
				}
				"disableshadowdepth":
				{
					typename = "boolean"
					shortinfo = "Disable ShadowDepth"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable rendering into shadow depth (for projected textures) for this entity."
					choices = {}
				}
				"shadowdepthnocache":
				{
					typename = "choices"
					shortinfo = "Projected Texture Cache"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to hint projected texture system whether it is sufficient to cache shadow volume of this entity or to force render it every frame instead.\n0�: Default\n1�: No cache - render every frame\n2�: Cache it - render only once"
					choices = {}
				}
				"disableflashlight":
				{
					typename = "boolean"
					shortinfo = "Disable flashlight"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable projected texture lighting and shadows on this entity."
					choices = {}
				}
				"drawinfastreflection":
				{
					typename = "boolean"
					shortinfo = "Render in Fast Reflections"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "If enabled, this entity will render in fast water reflections (i.e. when a water material specifies $reflectonlymarkedentities) and in the world impostor pass."
					choices = {}
				}
			}
		}
		weapon_grenade_launcher_spawn = 
		{
			description = "[Left 4 Dead 2]�weapon_grenade_launcher_spawn is a  point entity available in Left 4 Dead 2. It is a possible spawn point for a grenade launcher."
			flagnotes = ""
			flags = 
			{
				"4":
				{
					category = ""
					description = "Absorb any dropped weapon type"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "integer"
					shortinfo = "Count"
					extra = ""
					notes = ""
					description = "Max number of weapons given before disappearing."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "integer"
					shortinfo = "Weapon Skin"
					extra = ""
					notes = ""
					description = "Some weapons have multiple versions of their textures, called skins. Set this to a number other than -1 to make the given weapon use that skin instead of the default."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "float"
					shortinfo = "Glow Range"
					extra = ""
					notes = ""
					description = "Set a custom glow range for this spawner. 0 means use the default range."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "choices"
					shortinfo = "Collisions"
					extra = ""
					notes = ""
					description = "Collision box type.\n0�: Not Solid\n2�: Use Bounding Box\n6�: Use VPhysics"
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_5":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
				"model":
				{
					typename = "string"
					shortinfo = "World Model"
					extra = ""
					notes = ""
					description = "The model this entity should appear as. 128-character limit."
					choices = {}
				}
				"skin":
				{
					typename = "integer"
					shortinfo = "Skin"
					extra = ""
					notes = ""
					description = "Some models have multiple skins. This value selects from the index, starting with 0. �Tip:�Hammer's model browser automatically updates this value if you use it to view different skins."
					choices = {}
				}
				"modelscale":
				{
					typename = "float"
					shortinfo = "Model Scale"
					extra = "(in all games since [Source][Source])"
					notes = ""
					description = "A multiplier for the size of the model."
					choices = {}
				}
				"disableshadows":
				{
					typename = "boolean"
					shortinfo = "Disable Shadows"
					extra = ""
					notes = ""
					description = "Prevents the entity from creating cheap render-to-texture shadows, or lightmap shadows if the entity is a prop_static. Does not affect shadow mapping."
					choices = {}
				}
				"disableshadowdepth":
				{
					typename = "boolean"
					shortinfo = "Disable ShadowDepth"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable rendering into shadow depth (for projected textures) for this entity."
					choices = {}
				}
				"shadowdepthnocache":
				{
					typename = "choices"
					shortinfo = "Projected Texture Cache"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to hint projected texture system whether it is sufficient to cache shadow volume of this entity or to force render it every frame instead.\n0�: Default\n1�: No cache - render every frame\n2�: Cache it - render only once"
					choices = {}
				}
				"disableflashlight":
				{
					typename = "boolean"
					shortinfo = "Disable flashlight"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable projected texture lighting and shadows on this entity."
					choices = {}
				}
				"drawinfastreflection":
				{
					typename = "boolean"
					shortinfo = "Render in Fast Reflections"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "If enabled, this entity will render in fast water reflections (i.e. when a water material specifies $reflectonlymarkedentities) and in the world impostor pass."
					choices = {}
				}
			}
		}
		weapon_hunting_rifle_spawn = 
		{
			description = "[Left 4 Dead][Left 4 Dead 2]�weapon_hunting_rifle_spawn is a  point entity available in the Left 4 Dead series. It is a possible spawn point for hunting rifles."
			flagnotes = ""
			flags = 
			{
				"4":
				{
					category = ""
					description = "Absorb any dropped weapon type"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "integer"
					shortinfo = "Count"
					extra = ""
					notes = ""
					description = "Max number of weapons given before disappearing."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "integer"
					shortinfo = "Weapon Skin"
					extra = ""
					notes = ""
					description = "Some weapons have multiple versions of their textures, called skins. Set this to a number other than -1 to make the given weapon use that skin instead of the default."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "float"
					shortinfo = "Glow Range"
					extra = ""
					notes = ""
					description = "Set a custom glow range for this spawner. 0 means use the default range."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "choices"
					shortinfo = "Collisions"
					extra = ""
					notes = ""
					description = "Collision box type.\n0�: Not Solid\n2�: Use Bounding Box\n6�: Use VPhysics"
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_5":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
				"model":
				{
					typename = "string"
					shortinfo = "World Model"
					extra = ""
					notes = ""
					description = "The model this entity should appear as. 128-character limit."
					choices = {}
				}
				"skin":
				{
					typename = "integer"
					shortinfo = "Skin"
					extra = ""
					notes = ""
					description = "Some models have multiple skins. This value selects from the index, starting with 0. �Tip:�Hammer's model browser automatically updates this value if you use it to view different skins."
					choices = {}
				}
				"modelscale":
				{
					typename = "float"
					shortinfo = "Model Scale"
					extra = "(in all games since [Source][Source])"
					notes = ""
					description = "A multiplier for the size of the model."
					choices = {}
				}
				"disableshadows":
				{
					typename = "boolean"
					shortinfo = "Disable Shadows"
					extra = ""
					notes = ""
					description = "Prevents the entity from creating cheap render-to-texture shadows, or lightmap shadows if the entity is a prop_static. Does not affect shadow mapping."
					choices = {}
				}
				"disableshadowdepth":
				{
					typename = "boolean"
					shortinfo = "Disable ShadowDepth"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable rendering into shadow depth (for projected textures) for this entity."
					choices = {}
				}
				"shadowdepthnocache":
				{
					typename = "choices"
					shortinfo = "Projected Texture Cache"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to hint projected texture system whether it is sufficient to cache shadow volume of this entity or to force render it every frame instead.\n0�: Default\n1�: No cache - render every frame\n2�: Cache it - render only once"
					choices = {}
				}
				"disableflashlight":
				{
					typename = "boolean"
					shortinfo = "Disable flashlight"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable projected texture lighting and shadows on this entity."
					choices = {}
				}
				"drawinfastreflection":
				{
					typename = "boolean"
					shortinfo = "Render in Fast Reflections"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "If enabled, this entity will render in fast water reflections (i.e. when a water material specifies $reflectonlymarkedentities) and in the world impostor pass."
					choices = {}
				}
			}
		}
		weapon_item_spawn = 
		{
			description = "[Left 4 Dead 2]�weapon_item_spawn is a  point entity available in Left 4 Dead 2. It is a spawn point for any available item, except weapon upgrades."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Enable Physics on spawned item"
					notes = ""
				}
				"2":
				{
					category = ""
					description = "Spawned Item Must Exist"
					notes = ""
				}
				"8":
				{
					category = ""
					description = "Infinite Items"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "boolean"
					shortinfo = "Ammo pile"
					extra = ""
					notes = ""
					description = "If set to 1, the director considers to spawn this, or any other item with the boolean set to 1"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "boolean"
					shortinfo = "First aid kit"
					extra = ""
					notes = ""
					description = "If set to 1, the director considers to spawn this, or any other item with the boolean set to 1"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "boolean"
					shortinfo = "Molotov Cocktail"
					extra = ""
					notes = ""
					description = "If set to 1, the director considers to spawn this, or any other item with the boolean set to 1"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "boolean"
					shortinfo = "Pain Pills"
					extra = ""
					notes = ""
					description = "If set to 1, the director considers to spawn this, or any other item with the boolean set to 1"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_5":
				{
					typename = "boolean"
					shortinfo = "Pipe Bomb"
					extra = ""
					notes = ""
					description = "If set to 1, the director considers to spawn this, or any other item with the boolean set to 1"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_6":
				{
					typename = "boolean"
					shortinfo = "Oxygen Tank"
					extra = ""
					notes = ""
					description = "If set to 1, the director considers to spawn this, or any other item with the boolean set to 1"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_7":
				{
					typename = "boolean"
					shortinfo = "Propane Tank"
					extra = ""
					notes = ""
					description = "If set to 1, the director considers to spawn this, or any other item with the boolean set to 1"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_8":
				{
					typename = "boolean"
					shortinfo = "Gasoline Can"
					extra = ""
					notes = ""
					description = "If set to 1, the director considers to spawn this, or any other item with the boolean set to 1"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_9":
				{
					typename = "boolean"
					shortinfo = "Adrenaline"
					extra = ""
					notes = ""
					description = "If set to 1, the director considers to spawn this, or any other item with the boolean set to 1"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_10":
				{
					typename = "boolean"
					shortinfo = "Defibrillator"
					extra = ""
					notes = ""
					description = "If set to 1, the director considers to spawn this, or any other item with the boolean set to 1"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_11":
				{
					typename = "boolean"
					shortinfo = "Boomer Bile"
					extra = ""
					notes = ""
					description = "If set to 1, the director considers to spawn this, or any other item with the boolean set to 1"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_12":
				{
					typename = "boolean"
					shortinfo = "Chainsaw"
					extra = ""
					notes = ""
					description = "If set to 1, the director considers to spawn this, or any other item with the boolean set to 1"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_13":
				{
					typename = "boolean"
					shortinfo = "Grenade Launcher"
					extra = ""
					notes = ""
					description = "If set to 1, the director considers to spawn this, or any other item with the boolean set to 1"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_14":
				{
					typename = "boolean"
					shortinfo = "M60 Machinegun"
					extra = ""
					notes = ""
					description = "If set to 1, the director considers to spawn this, or any other item with the boolean set to 1"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_15":
				{
					typename = "string"
					shortinfo = "Melee Weapon"
					extra = ""
					notes = ""
					description = "If empty, the director won't consider to spawn a melee in this place. If you want the director to consider spawning one, use one or multiple names listed below, like in the weapon_melee_spawn entity"
					choices = {}
				}
			}
		}
		weapon_melee_spawn = 
		{
			description = "[Left 4 Dead 2]�weapon_melee_spawn is a  point entity available in Left 4 Dead 2. Is is a spawn point for any melee weapon."
			flagnotes = ""
			flags = 
			{
				"4":
				{
					category = ""
					description = "Absorb any dropped weapon type"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "string"
					shortinfo = "Melee Weapon"
					extra = ""
					notes = ""
					description = "Options: 'Any' or a comma-delimited string of melee weapon script names. Leave blank for none."
					choices = {}
				}
			}
		}
		weapon_molotov_spawn = 
		{
			description = "[Left 4 Dead][Left 4 Dead 2]�weapon_molotov_spawn is a  point entity available in the Left 4 Dead series. It is a possible spawn point for Molotov cocktails."
			flagnotes = ""
			flags = 
			{
				"4":
				{
					category = ""
					description = "Absorb any dropped weapon type"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "integer"
					shortinfo = "Count"
					extra = ""
					notes = ""
					description = "Max number of weapons given before disappearing."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "integer"
					shortinfo = "Weapon Skin"
					extra = ""
					notes = ""
					description = "Some weapons have multiple versions of their textures, called skins. Set this to a number other than -1 to make the given weapon use that skin instead of the default."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "float"
					shortinfo = "Glow Range"
					extra = ""
					notes = ""
					description = "Set a custom glow range for this spawner. 0 means use the default range."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "choices"
					shortinfo = "Collisions"
					extra = ""
					notes = ""
					description = "Collision box type.\n0�: Not Solid\n2�: Use Bounding Box\n6�: Use VPhysics"
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_5":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
				"model":
				{
					typename = "string"
					shortinfo = "World Model"
					extra = ""
					notes = ""
					description = "The model this entity should appear as. 128-character limit."
					choices = {}
				}
				"skin":
				{
					typename = "integer"
					shortinfo = "Skin"
					extra = ""
					notes = ""
					description = "Some models have multiple skins. This value selects from the index, starting with 0. �Tip:�Hammer's model browser automatically updates this value if you use it to view different skins."
					choices = {}
				}
				"modelscale":
				{
					typename = "float"
					shortinfo = "Model Scale"
					extra = "(in all games since [Source][Source])"
					notes = ""
					description = "A multiplier for the size of the model."
					choices = {}
				}
				"disableshadows":
				{
					typename = "boolean"
					shortinfo = "Disable Shadows"
					extra = ""
					notes = ""
					description = "Prevents the entity from creating cheap render-to-texture shadows, or lightmap shadows if the entity is a prop_static. Does not affect shadow mapping."
					choices = {}
				}
				"disableshadowdepth":
				{
					typename = "boolean"
					shortinfo = "Disable ShadowDepth"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable rendering into shadow depth (for projected textures) for this entity."
					choices = {}
				}
				"shadowdepthnocache":
				{
					typename = "choices"
					shortinfo = "Projected Texture Cache"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to hint projected texture system whether it is sufficient to cache shadow volume of this entity or to force render it every frame instead.\n0�: Default\n1�: No cache - render every frame\n2�: Cache it - render only once"
					choices = {}
				}
				"disableflashlight":
				{
					typename = "boolean"
					shortinfo = "Disable flashlight"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable projected texture lighting and shadows on this entity."
					choices = {}
				}
				"drawinfastreflection":
				{
					typename = "boolean"
					shortinfo = "Render in Fast Reflections"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "If enabled, this entity will render in fast water reflections (i.e. when a water material specifies $reflectonlymarkedentities) and in the world impostor pass."
					choices = {}
				}
			}
		}
		weapon_pain_pills_spawn = 
		{
			description = "[Left 4 Dead][Left 4 Dead 2]�weapon_pain_pills_spawn is a  point entity available in the Left 4 Dead series. It is a possible spawn point for pain pills."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Enable Physics"
					notes = ""
				}
				"2":
				{
					category = ""
					description = "Must Exist"
					notes = ""
				}
				"8":
				{
					category = ""
					description = "Infinite items (overrides count)"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "integer"
					shortinfo = "Weapon Skin"
					extra = ""
					notes = ""
					description = "Some weapons have multiple versions of their textures, called skins. Set this to a number other than -1 to make the given weapon use that skin instead of the default."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "float"
					shortinfo = "Glow Range"
					extra = ""
					notes = ""
					description = "Set a custom glow range for this spawner. 0 means use the default range."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "choices"
					shortinfo = "Collisions"
					extra = ""
					notes = ""
					description = "Collision box type.\n0�: Not Solid\n2�: Use Bounding Box\n6�: Use VPhysics"
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
				"model":
				{
					typename = "string"
					shortinfo = "World Model"
					extra = ""
					notes = ""
					description = "The model this entity should appear as. 128-character limit."
					choices = {}
				}
				"skin":
				{
					typename = "integer"
					shortinfo = "Skin"
					extra = ""
					notes = ""
					description = "Some models have multiple skins. This value selects from the index, starting with 0. �Tip:�Hammer's model browser automatically updates this value if you use it to view different skins."
					choices = {}
				}
				"modelscale":
				{
					typename = "float"
					shortinfo = "Model Scale"
					extra = "(in all games since [Source][Source])"
					notes = ""
					description = "A multiplier for the size of the model."
					choices = {}
				}
				"disableshadows":
				{
					typename = "boolean"
					shortinfo = "Disable Shadows"
					extra = ""
					notes = ""
					description = "Prevents the entity from creating cheap render-to-texture shadows, or lightmap shadows if the entity is a prop_static. Does not affect shadow mapping."
					choices = {}
				}
				"disableshadowdepth":
				{
					typename = "boolean"
					shortinfo = "Disable ShadowDepth"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable rendering into shadow depth (for projected textures) for this entity."
					choices = {}
				}
				"shadowdepthnocache":
				{
					typename = "choices"
					shortinfo = "Projected Texture Cache"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to hint projected texture system whether it is sufficient to cache shadow volume of this entity or to force render it every frame instead.\n0�: Default\n1�: No cache - render every frame\n2�: Cache it - render only once"
					choices = {}
				}
				"disableflashlight":
				{
					typename = "boolean"
					shortinfo = "Disable flashlight"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable projected texture lighting and shadows on this entity."
					choices = {}
				}
				"drawinfastreflection":
				{
					typename = "boolean"
					shortinfo = "Render in Fast Reflections"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "If enabled, this entity will render in fast water reflections (i.e. when a water material specifies $reflectonlymarkedentities) and in the world impostor pass."
					choices = {}
				}
			}
		}
		weapon_pipe_bomb_spawn = 
		{
			description = "[Left 4 Dead][Left 4 Dead 2]�weapon_pipe_bomb_spawn is a  point entity available in the Left 4 Dead series. It is a possible spawn point for pipe bombs."
			flagnotes = ""
			flags = 
			{
				"4":
				{
					category = ""
					description = "Absorb any dropped weapon type"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "integer"
					shortinfo = "Count"
					extra = ""
					notes = ""
					description = "Max number of weapons given before disappearing."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "integer"
					shortinfo = "Weapon Skin"
					extra = ""
					notes = ""
					description = "Some weapons have multiple versions of their textures, called skins. Set this to a number other than -1 to make the given weapon use that skin instead of the default."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "float"
					shortinfo = "Glow Range"
					extra = ""
					notes = ""
					description = "Set a custom glow range for this spawner. 0 means use the default range."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "choices"
					shortinfo = "Collisions"
					extra = ""
					notes = ""
					description = "Collision box type.\n0�: Not Solid\n2�: Use Bounding Box\n6�: Use VPhysics"
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_5":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
				"model":
				{
					typename = "string"
					shortinfo = "World Model"
					extra = ""
					notes = ""
					description = "The model this entity should appear as. 128-character limit."
					choices = {}
				}
				"skin":
				{
					typename = "integer"
					shortinfo = "Skin"
					extra = ""
					notes = ""
					description = "Some models have multiple skins. This value selects from the index, starting with 0. �Tip:�Hammer's model browser automatically updates this value if you use it to view different skins."
					choices = {}
				}
				"modelscale":
				{
					typename = "float"
					shortinfo = "Model Scale"
					extra = "(in all games since [Source][Source])"
					notes = ""
					description = "A multiplier for the size of the model."
					choices = {}
				}
				"disableshadows":
				{
					typename = "boolean"
					shortinfo = "Disable Shadows"
					extra = ""
					notes = ""
					description = "Prevents the entity from creating cheap render-to-texture shadows, or lightmap shadows if the entity is a prop_static. Does not affect shadow mapping."
					choices = {}
				}
				"disableshadowdepth":
				{
					typename = "boolean"
					shortinfo = "Disable ShadowDepth"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable rendering into shadow depth (for projected textures) for this entity."
					choices = {}
				}
				"shadowdepthnocache":
				{
					typename = "choices"
					shortinfo = "Projected Texture Cache"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to hint projected texture system whether it is sufficient to cache shadow volume of this entity or to force render it every frame instead.\n0�: Default\n1�: No cache - render every frame\n2�: Cache it - render only once"
					choices = {}
				}
				"disableflashlight":
				{
					typename = "boolean"
					shortinfo = "Disable flashlight"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable projected texture lighting and shadows on this entity."
					choices = {}
				}
				"drawinfastreflection":
				{
					typename = "boolean"
					shortinfo = "Render in Fast Reflections"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "If enabled, this entity will render in fast water reflections (i.e. when a water material specifies $reflectonlymarkedentities) and in the world impostor pass."
					choices = {}
				}
			}
		}
		weapon_pistol_magnum_spawn = 
		{
			description = "[Left 4 Dead 2]�weapon_pistol_magnum_spawn is a  point entity available in Left 4 Dead 2. It is a possible spawn point for a magnum pistol."
			flagnotes = ""
			flags = 
			{
				"4":
				{
					category = ""
					description = "Absorb any dropped weapon type"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "integer"
					shortinfo = "Count"
					extra = ""
					notes = ""
					description = "Max number of weapons given before disappearing."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "integer"
					shortinfo = "Weapon Skin"
					extra = ""
					notes = ""
					description = "Some weapons have multiple versions of their textures, called skins. Set this to a number other than -1 to make the given weapon use that skin instead of the default."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "float"
					shortinfo = "Glow Range"
					extra = ""
					notes = ""
					description = "Set a custom glow range for this spawner. 0 means use the default range."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "choices"
					shortinfo = "Collisions"
					extra = ""
					notes = ""
					description = "Collision box type.\n0�: Not Solid\n2�: Use Bounding Box\n6�: Use VPhysics"
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_5":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
				"model":
				{
					typename = "string"
					shortinfo = "World Model"
					extra = ""
					notes = ""
					description = "The model this entity should appear as. 128-character limit."
					choices = {}
				}
				"skin":
				{
					typename = "integer"
					shortinfo = "Skin"
					extra = ""
					notes = ""
					description = "Some models have multiple skins. This value selects from the index, starting with 0. �Tip:�Hammer's model browser automatically updates this value if you use it to view different skins."
					choices = {}
				}
				"modelscale":
				{
					typename = "float"
					shortinfo = "Model Scale"
					extra = "(in all games since [Source][Source])"
					notes = ""
					description = "A multiplier for the size of the model."
					choices = {}
				}
				"disableshadows":
				{
					typename = "boolean"
					shortinfo = "Disable Shadows"
					extra = ""
					notes = ""
					description = "Prevents the entity from creating cheap render-to-texture shadows, or lightmap shadows if the entity is a prop_static. Does not affect shadow mapping."
					choices = {}
				}
				"disableshadowdepth":
				{
					typename = "boolean"
					shortinfo = "Disable ShadowDepth"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable rendering into shadow depth (for projected textures) for this entity."
					choices = {}
				}
				"shadowdepthnocache":
				{
					typename = "choices"
					shortinfo = "Projected Texture Cache"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to hint projected texture system whether it is sufficient to cache shadow volume of this entity or to force render it every frame instead.\n0�: Default\n1�: No cache - render every frame\n2�: Cache it - render only once"
					choices = {}
				}
				"disableflashlight":
				{
					typename = "boolean"
					shortinfo = "Disable flashlight"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable projected texture lighting and shadows on this entity."
					choices = {}
				}
				"drawinfastreflection":
				{
					typename = "boolean"
					shortinfo = "Render in Fast Reflections"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "If enabled, this entity will render in fast water reflections (i.e. when a water material specifies $reflectonlymarkedentities) and in the world impostor pass."
					choices = {}
				}
			}
		}
		weapon_pistol_spawn = 
		{
			description = "[Left 4 Dead][Left 4 Dead 2]�weapon_pistol_spawn is a  point entity available in the Left 4 Dead series. It is a possible spawn point for pistols."
			flagnotes = ""
			flags = 
			{
				"4":
				{
					category = ""
					description = "Absorb any dropped weapon type"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "integer"
					shortinfo = "Count"
					extra = ""
					notes = ""
					description = "Max number of weapons given before disappearing."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "integer"
					shortinfo = "Weapon Skin"
					extra = ""
					notes = ""
					description = "Some weapons have multiple versions of their textures, called skins. Set this to a number other than -1 to make the given weapon use that skin instead of the default."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "float"
					shortinfo = "Glow Range"
					extra = ""
					notes = ""
					description = "Set a custom glow range for this spawner. 0 means use the default range."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "choices"
					shortinfo = "Collisions"
					extra = ""
					notes = ""
					description = "Collision box type.\n0�: Not Solid\n2�: Use Bounding Box\n6�: Use VPhysics"
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_5":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
				"model":
				{
					typename = "string"
					shortinfo = "World Model"
					extra = ""
					notes = ""
					description = "The model this entity should appear as. 128-character limit."
					choices = {}
				}
				"skin":
				{
					typename = "integer"
					shortinfo = "Skin"
					extra = ""
					notes = ""
					description = "Some models have multiple skins. This value selects from the index, starting with 0. �Tip:�Hammer's model browser automatically updates this value if you use it to view different skins."
					choices = {}
				}
				"modelscale":
				{
					typename = "float"
					shortinfo = "Model Scale"
					extra = "(in all games since [Source][Source])"
					notes = ""
					description = "A multiplier for the size of the model."
					choices = {}
				}
				"disableshadows":
				{
					typename = "boolean"
					shortinfo = "Disable Shadows"
					extra = ""
					notes = ""
					description = "Prevents the entity from creating cheap render-to-texture shadows, or lightmap shadows if the entity is a prop_static. Does not affect shadow mapping."
					choices = {}
				}
				"disableshadowdepth":
				{
					typename = "boolean"
					shortinfo = "Disable ShadowDepth"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable rendering into shadow depth (for projected textures) for this entity."
					choices = {}
				}
				"shadowdepthnocache":
				{
					typename = "choices"
					shortinfo = "Projected Texture Cache"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to hint projected texture system whether it is sufficient to cache shadow volume of this entity or to force render it every frame instead.\n0�: Default\n1�: No cache - render every frame\n2�: Cache it - render only once"
					choices = {}
				}
				"disableflashlight":
				{
					typename = "boolean"
					shortinfo = "Disable flashlight"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable projected texture lighting and shadows on this entity."
					choices = {}
				}
				"drawinfastreflection":
				{
					typename = "boolean"
					shortinfo = "Render in Fast Reflections"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "If enabled, this entity will render in fast water reflections (i.e. when a water material specifies $reflectonlymarkedentities) and in the world impostor pass."
					choices = {}
				}
			}
		}
		weapon_pumpshotgun_spawn = 
		{
			description = "[Left 4 Dead][Left 4 Dead 2]�weapon_pumpshotgun_spawn is a  point entity available in the Left 4 Dead series. It is a possible spawn point for pump shotguns."
			flagnotes = ""
			flags = 
			{
				"4":
				{
					category = ""
					description = "Absorb any dropped weapon type"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "integer"
					shortinfo = "Count"
					extra = ""
					notes = ""
					description = "Max number of weapons given before disappearing."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "integer"
					shortinfo = "Weapon Skin"
					extra = ""
					notes = ""
					description = "Some weapons have multiple versions of their textures, called skins. Set this to a number other than -1 to make the given weapon use that skin instead of the default."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "float"
					shortinfo = "Glow Range"
					extra = ""
					notes = ""
					description = "Set a custom glow range for this spawner. 0 means use the default range."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "choices"
					shortinfo = "Collisions"
					extra = ""
					notes = ""
					description = "Collision box type.\n0�: Not Solid\n2�: Use Bounding Box\n6�: Use VPhysics"
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_5":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
				"model":
				{
					typename = "string"
					shortinfo = "World Model"
					extra = ""
					notes = ""
					description = "The model this entity should appear as. 128-character limit."
					choices = {}
				}
				"skin":
				{
					typename = "integer"
					shortinfo = "Skin"
					extra = ""
					notes = ""
					description = "Some models have multiple skins. This value selects from the index, starting with 0. �Tip:�Hammer's model browser automatically updates this value if you use it to view different skins."
					choices = {}
				}
				"modelscale":
				{
					typename = "float"
					shortinfo = "Model Scale"
					extra = "(in all games since [Source][Source])"
					notes = ""
					description = "A multiplier for the size of the model."
					choices = {}
				}
				"disableshadows":
				{
					typename = "boolean"
					shortinfo = "Disable Shadows"
					extra = ""
					notes = ""
					description = "Prevents the entity from creating cheap render-to-texture shadows, or lightmap shadows if the entity is a prop_static. Does not affect shadow mapping."
					choices = {}
				}
				"disableshadowdepth":
				{
					typename = "boolean"
					shortinfo = "Disable ShadowDepth"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable rendering into shadow depth (for projected textures) for this entity."
					choices = {}
				}
				"shadowdepthnocache":
				{
					typename = "choices"
					shortinfo = "Projected Texture Cache"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to hint projected texture system whether it is sufficient to cache shadow volume of this entity or to force render it every frame instead.\n0�: Default\n1�: No cache - render every frame\n2�: Cache it - render only once"
					choices = {}
				}
				"disableflashlight":
				{
					typename = "boolean"
					shortinfo = "Disable flashlight"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable projected texture lighting and shadows on this entity."
					choices = {}
				}
				"drawinfastreflection":
				{
					typename = "boolean"
					shortinfo = "Render in Fast Reflections"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "If enabled, this entity will render in fast water reflections (i.e. when a water material specifies $reflectonlymarkedentities) and in the world impostor pass."
					choices = {}
				}
			}
		}
		weapon_rifle_ak47_spawn = 
		{
			description = "[Left 4 Dead 2]�weapon_rifle_ak47_spawn is a  point entity available in Left 4 Dead 2. It is a possible spawn point for the AK47 rifle."
			flagnotes = ""
			flags = 
			{
				"4":
				{
					category = ""
					description = "Absorb any dropped weapon type"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "integer"
					shortinfo = "Count"
					extra = ""
					notes = ""
					description = "Max number of weapons given before disappearing."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "integer"
					shortinfo = "Weapon Skin"
					extra = ""
					notes = ""
					description = "Some weapons have multiple versions of their textures, called skins. Set this to a number other than -1 to make the given weapon use that skin instead of the default."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "float"
					shortinfo = "Glow Range"
					extra = ""
					notes = ""
					description = "Set a custom glow range for this spawner. 0 means use the default range."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "choices"
					shortinfo = "Collisions"
					extra = ""
					notes = ""
					description = "Collision box type.\n0�: Not Solid\n2�: Use Bounding Box\n6�: Use VPhysics"
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_5":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
				"model":
				{
					typename = "string"
					shortinfo = "World Model"
					extra = ""
					notes = ""
					description = "The model this entity should appear as. 128-character limit."
					choices = {}
				}
				"skin":
				{
					typename = "integer"
					shortinfo = "Skin"
					extra = ""
					notes = ""
					description = "Some models have multiple skins. This value selects from the index, starting with 0. �Tip:�Hammer's model browser automatically updates this value if you use it to view different skins."
					choices = {}
				}
				"modelscale":
				{
					typename = "float"
					shortinfo = "Model Scale"
					extra = "(in all games since [Source][Source])"
					notes = ""
					description = "A multiplier for the size of the model."
					choices = {}
				}
				"disableshadows":
				{
					typename = "boolean"
					shortinfo = "Disable Shadows"
					extra = ""
					notes = ""
					description = "Prevents the entity from creating cheap render-to-texture shadows, or lightmap shadows if the entity is a prop_static. Does not affect shadow mapping."
					choices = {}
				}
				"disableshadowdepth":
				{
					typename = "boolean"
					shortinfo = "Disable ShadowDepth"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable rendering into shadow depth (for projected textures) for this entity."
					choices = {}
				}
				"shadowdepthnocache":
				{
					typename = "choices"
					shortinfo = "Projected Texture Cache"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to hint projected texture system whether it is sufficient to cache shadow volume of this entity or to force render it every frame instead.\n0�: Default\n1�: No cache - render every frame\n2�: Cache it - render only once"
					choices = {}
				}
				"disableflashlight":
				{
					typename = "boolean"
					shortinfo = "Disable flashlight"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable projected texture lighting and shadows on this entity."
					choices = {}
				}
				"drawinfastreflection":
				{
					typename = "boolean"
					shortinfo = "Render in Fast Reflections"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "If enabled, this entity will render in fast water reflections (i.e. when a water material specifies $reflectonlymarkedentities) and in the world impostor pass."
					choices = {}
				}
			}
		}
		weapon_rifle_desert_spawn = 
		{
			description = "[Left 4 Dead 2]�weapon_rifle_desert_spawn is a  point entity available in Left 4 Dead 2. It is a possible spawn point for the desert rifle."
			flagnotes = ""
			flags = 
			{
				"4":
				{
					category = ""
					description = "Absorb any dropped weapon type"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "integer"
					shortinfo = "Count"
					extra = ""
					notes = ""
					description = "Max number of weapons given before disappearing."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "integer"
					shortinfo = "Weapon Skin"
					extra = ""
					notes = ""
					description = "Some weapons have multiple versions of their textures, called skins. Set this to a number other than -1 to make the given weapon use that skin instead of the default."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "float"
					shortinfo = "Glow Range"
					extra = ""
					notes = ""
					description = "Set a custom glow range for this spawner. 0 means use the default range."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "choices"
					shortinfo = "Collisions"
					extra = ""
					notes = ""
					description = "Collision box type.\n0�: Not Solid\n2�: Use Bounding Box\n6�: Use VPhysics"
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_5":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
				"model":
				{
					typename = "string"
					shortinfo = "World Model"
					extra = ""
					notes = ""
					description = "The model this entity should appear as. 128-character limit."
					choices = {}
				}
				"skin":
				{
					typename = "integer"
					shortinfo = "Skin"
					extra = ""
					notes = ""
					description = "Some models have multiple skins. This value selects from the index, starting with 0. �Tip:�Hammer's model browser automatically updates this value if you use it to view different skins."
					choices = {}
				}
				"modelscale":
				{
					typename = "float"
					shortinfo = "Model Scale"
					extra = "(in all games since [Source][Source])"
					notes = ""
					description = "A multiplier for the size of the model."
					choices = {}
				}
				"disableshadows":
				{
					typename = "boolean"
					shortinfo = "Disable Shadows"
					extra = ""
					notes = ""
					description = "Prevents the entity from creating cheap render-to-texture shadows, or lightmap shadows if the entity is a prop_static. Does not affect shadow mapping."
					choices = {}
				}
				"disableshadowdepth":
				{
					typename = "boolean"
					shortinfo = "Disable ShadowDepth"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable rendering into shadow depth (for projected textures) for this entity."
					choices = {}
				}
				"shadowdepthnocache":
				{
					typename = "choices"
					shortinfo = "Projected Texture Cache"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to hint projected texture system whether it is sufficient to cache shadow volume of this entity or to force render it every frame instead.\n0�: Default\n1�: No cache - render every frame\n2�: Cache it - render only once"
					choices = {}
				}
				"disableflashlight":
				{
					typename = "boolean"
					shortinfo = "Disable flashlight"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable projected texture lighting and shadows on this entity."
					choices = {}
				}
				"drawinfastreflection":
				{
					typename = "boolean"
					shortinfo = "Render in Fast Reflections"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "If enabled, this entity will render in fast water reflections (i.e. when a water material specifies $reflectonlymarkedentities) and in the world impostor pass."
					choices = {}
				}
			}
		}
		weapon_rifle_m60_spawn = 
		{
			description = "[Left 4 Dead 2]�weapon_rifle_m60_spawn is a  point entity available in Left 4 Dead 2. It is a possible spawn point for a M60 machinegun."
			flagnotes = ""
			flags = 
			{
				"4":
				{
					category = ""
					description = "Absorb any dropped weapon type"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "integer"
					shortinfo = "Count"
					extra = ""
					notes = ""
					description = "Max number of weapons given before disappearing."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "integer"
					shortinfo = "Weapon Skin"
					extra = ""
					notes = ""
					description = "Some weapons have multiple versions of their textures, called skins. Set this to a number other than -1 to make the given weapon use that skin instead of the default."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "float"
					shortinfo = "Glow Range"
					extra = ""
					notes = ""
					description = "Set a custom glow range for this spawner. 0 means use the default range."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "choices"
					shortinfo = "Collisions"
					extra = ""
					notes = ""
					description = "Collision box type.\n0�: Not Solid\n2�: Use Bounding Box\n6�: Use VPhysics"
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_5":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
				"model":
				{
					typename = "string"
					shortinfo = "World Model"
					extra = ""
					notes = ""
					description = "The model this entity should appear as. 128-character limit."
					choices = {}
				}
				"skin":
				{
					typename = "integer"
					shortinfo = "Skin"
					extra = ""
					notes = ""
					description = "Some models have multiple skins. This value selects from the index, starting with 0. �Tip:�Hammer's model browser automatically updates this value if you use it to view different skins."
					choices = {}
				}
				"modelscale":
				{
					typename = "float"
					shortinfo = "Model Scale"
					extra = "(in all games since [Source][Source])"
					notes = ""
					description = "A multiplier for the size of the model."
					choices = {}
				}
				"disableshadows":
				{
					typename = "boolean"
					shortinfo = "Disable Shadows"
					extra = ""
					notes = ""
					description = "Prevents the entity from creating cheap render-to-texture shadows, or lightmap shadows if the entity is a prop_static. Does not affect shadow mapping."
					choices = {}
				}
				"disableshadowdepth":
				{
					typename = "boolean"
					shortinfo = "Disable ShadowDepth"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable rendering into shadow depth (for projected textures) for this entity."
					choices = {}
				}
				"shadowdepthnocache":
				{
					typename = "choices"
					shortinfo = "Projected Texture Cache"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to hint projected texture system whether it is sufficient to cache shadow volume of this entity or to force render it every frame instead.\n0�: Default\n1�: No cache - render every frame\n2�: Cache it - render only once"
					choices = {}
				}
				"disableflashlight":
				{
					typename = "boolean"
					shortinfo = "Disable flashlight"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable projected texture lighting and shadows on this entity."
					choices = {}
				}
				"drawinfastreflection":
				{
					typename = "boolean"
					shortinfo = "Render in Fast Reflections"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "If enabled, this entity will render in fast water reflections (i.e. when a water material specifies $reflectonlymarkedentities) and in the world impostor pass."
					choices = {}
				}
			}
		}
		weapon_rifle_sg552_spawn = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		weapon_rifle_spawn = 
		{
			description = "[Left 4 Dead][Left 4 Dead 2]�weapon_rifle_spawn is a  point entity available in the Left 4 Dead series. It is a possible spawnpoint for an assault rifle."
			flagnotes = ""
			flags = 
			{
				"4":
				{
					category = ""
					description = "Absorb any dropped weapon type"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "integer"
					shortinfo = "Count"
					extra = ""
					notes = ""
					description = "Max number of weapons given before disappearing."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "integer"
					shortinfo = "Weapon Skin"
					extra = ""
					notes = ""
					description = "Some weapons have multiple versions of their textures, called skins. Set this to a number other than -1 to make the given weapon use that skin instead of the default."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "float"
					shortinfo = "Glow Range"
					extra = ""
					notes = ""
					description = "Set a custom glow range for this spawner. 0 means use the default range."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "choices"
					shortinfo = "Collisions"
					extra = ""
					notes = ""
					description = "Collision box type.\n0�: Not Solid\n2�: Use Bounding Box\n6�: Use VPhysics"
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_5":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
				"model":
				{
					typename = "string"
					shortinfo = "World Model"
					extra = ""
					notes = ""
					description = "The model this entity should appear as. 128-character limit."
					choices = {}
				}
				"skin":
				{
					typename = "integer"
					shortinfo = "Skin"
					extra = ""
					notes = ""
					description = "Some models have multiple skins. This value selects from the index, starting with 0. �Tip:�Hammer's model browser automatically updates this value if you use it to view different skins."
					choices = {}
				}
				"modelscale":
				{
					typename = "float"
					shortinfo = "Model Scale"
					extra = "(in all games since [Source][Source])"
					notes = ""
					description = "A multiplier for the size of the model."
					choices = {}
				}
				"disableshadows":
				{
					typename = "boolean"
					shortinfo = "Disable Shadows"
					extra = ""
					notes = ""
					description = "Prevents the entity from creating cheap render-to-texture shadows, or lightmap shadows if the entity is a prop_static. Does not affect shadow mapping."
					choices = {}
				}
				"disableshadowdepth":
				{
					typename = "boolean"
					shortinfo = "Disable ShadowDepth"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable rendering into shadow depth (for projected textures) for this entity."
					choices = {}
				}
				"shadowdepthnocache":
				{
					typename = "choices"
					shortinfo = "Projected Texture Cache"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to hint projected texture system whether it is sufficient to cache shadow volume of this entity or to force render it every frame instead.\n0�: Default\n1�: No cache - render every frame\n2�: Cache it - render only once"
					choices = {}
				}
				"disableflashlight":
				{
					typename = "boolean"
					shortinfo = "Disable flashlight"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable projected texture lighting and shadows on this entity."
					choices = {}
				}
				"drawinfastreflection":
				{
					typename = "boolean"
					shortinfo = "Render in Fast Reflections"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "If enabled, this entity will render in fast water reflections (i.e. when a water material specifies $reflectonlymarkedentities) and in the world impostor pass."
					choices = {}
				}
			}
		}
		weapon_scavenge_item_spawn = 
		{
			description = "[Left 4 Dead 2]�weapon_scavenge_item_spawn is a  point entity available in Left 4 Dead 2. It is a spawn for a 'scavenge item'. It is a variant of the weapon_gascan_spawn that is specially designed for the scavenge game mode."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Enable Physics"
					notes = ""
				}
				"2":
				{
					category = ""
					description = "Must Exist"
					notes = ""
				}
				"8":
				{
					category = ""
					description = "Infinite items (overrides count)"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "choices"
					shortinfo = "Initial Glow State"
					extra = ""
					notes = ""
					description = "0�: OFF\n3�: ON"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "integer"
					shortinfo = "Weapon Skin"
					extra = ""
					notes = ""
					description = "Some weapons have multiple versions of their textures, called skins. Set this to a number other than -1 to make the given weapon use that skin instead of the default."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "float"
					shortinfo = "Glow Range"
					extra = ""
					notes = ""
					description = "Set a custom glow range for this spawner. 0 means use the default range."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "choices"
					shortinfo = "Collisions"
					extra = ""
					notes = ""
					description = "Collision box type.\n0�: Not Solid\n2�: Use Bounding Box\n6�: Use VPhysics"
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_5":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
				"model":
				{
					typename = "string"
					shortinfo = "World Model"
					extra = ""
					notes = ""
					description = "The model this entity should appear as. 128-character limit."
					choices = {}
				}
				"skin":
				{
					typename = "integer"
					shortinfo = "Skin"
					extra = ""
					notes = ""
					description = "Some models have multiple skins. This value selects from the index, starting with 0. �Tip:�Hammer's model browser automatically updates this value if you use it to view different skins."
					choices = {}
				}
				"modelscale":
				{
					typename = "float"
					shortinfo = "Model Scale"
					extra = "(in all games since [Source][Source])"
					notes = ""
					description = "A multiplier for the size of the model."
					choices = {}
				}
				"disableshadows":
				{
					typename = "boolean"
					shortinfo = "Disable Shadows"
					extra = ""
					notes = ""
					description = "Prevents the entity from creating cheap render-to-texture shadows, or lightmap shadows if the entity is a prop_static. Does not affect shadow mapping."
					choices = {}
				}
				"disableshadowdepth":
				{
					typename = "boolean"
					shortinfo = "Disable ShadowDepth"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable rendering into shadow depth (for projected textures) for this entity."
					choices = {}
				}
				"shadowdepthnocache":
				{
					typename = "choices"
					shortinfo = "Projected Texture Cache"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to hint projected texture system whether it is sufficient to cache shadow volume of this entity or to force render it every frame instead.\n0�: Default\n1�: No cache - render every frame\n2�: Cache it - render only once"
					choices = {}
				}
				"disableflashlight":
				{
					typename = "boolean"
					shortinfo = "Disable flashlight"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable projected texture lighting and shadows on this entity."
					choices = {}
				}
				"drawinfastreflection":
				{
					typename = "boolean"
					shortinfo = "Render in Fast Reflections"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "If enabled, this entity will render in fast water reflections (i.e. when a water material specifies $reflectonlymarkedentities) and in the world impostor pass."
					choices = {}
				}
			}
		}
		weapon_shotgun_chrome_spawn = 
		{
			description = "[Left 4 Dead 2]�weapon_shotgun_chrome_spawn is a  point entity available in Left 4 Dead 2. It is a possible spawn point for a chrome shotgun."
			flagnotes = ""
			flags = 
			{
				"4":
				{
					category = ""
					description = "Absorb any dropped weapon type"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "integer"
					shortinfo = "Count"
					extra = ""
					notes = ""
					description = "Max number of weapons given before disappearing."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "integer"
					shortinfo = "Weapon Skin"
					extra = ""
					notes = ""
					description = "Some weapons have multiple versions of their textures, called skins. Set this to a number other than -1 to make the given weapon use that skin instead of the default."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "float"
					shortinfo = "Glow Range"
					extra = ""
					notes = ""
					description = "Set a custom glow range for this spawner. 0 means use the default range."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "choices"
					shortinfo = "Collisions"
					extra = ""
					notes = ""
					description = "Collision box type.\n0�: Not Solid\n2�: Use Bounding Box\n6�: Use VPhysics"
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_5":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
				"model":
				{
					typename = "string"
					shortinfo = "World Model"
					extra = ""
					notes = ""
					description = "The model this entity should appear as. 128-character limit."
					choices = {}
				}
				"skin":
				{
					typename = "integer"
					shortinfo = "Skin"
					extra = ""
					notes = ""
					description = "Some models have multiple skins. This value selects from the index, starting with 0. �Tip:�Hammer's model browser automatically updates this value if you use it to view different skins."
					choices = {}
				}
				"modelscale":
				{
					typename = "float"
					shortinfo = "Model Scale"
					extra = "(in all games since [Source][Source])"
					notes = ""
					description = "A multiplier for the size of the model."
					choices = {}
				}
				"disableshadows":
				{
					typename = "boolean"
					shortinfo = "Disable Shadows"
					extra = ""
					notes = ""
					description = "Prevents the entity from creating cheap render-to-texture shadows, or lightmap shadows if the entity is a prop_static. Does not affect shadow mapping."
					choices = {}
				}
				"disableshadowdepth":
				{
					typename = "boolean"
					shortinfo = "Disable ShadowDepth"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable rendering into shadow depth (for projected textures) for this entity."
					choices = {}
				}
				"shadowdepthnocache":
				{
					typename = "choices"
					shortinfo = "Projected Texture Cache"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to hint projected texture system whether it is sufficient to cache shadow volume of this entity or to force render it every frame instead.\n0�: Default\n1�: No cache - render every frame\n2�: Cache it - render only once"
					choices = {}
				}
				"disableflashlight":
				{
					typename = "boolean"
					shortinfo = "Disable flashlight"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable projected texture lighting and shadows on this entity."
					choices = {}
				}
				"drawinfastreflection":
				{
					typename = "boolean"
					shortinfo = "Render in Fast Reflections"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "If enabled, this entity will render in fast water reflections (i.e. when a water material specifies $reflectonlymarkedentities) and in the world impostor pass."
					choices = {}
				}
			}
		}
		weapon_shotgun_spas_spawn = 
		{
			description = "[Left 4 Dead 2]�weapon_shotgun_spas_spawn is a  point entity available in Left 4 Dead 2. It is a possible spawn point for a SPAS shotgun."
			flagnotes = ""
			flags = 
			{
				"4":
				{
					category = ""
					description = "Absorb any dropped weapon type"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "integer"
					shortinfo = "Count"
					extra = ""
					notes = ""
					description = "Max number of weapons given before disappearing."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "integer"
					shortinfo = "Weapon Skin"
					extra = ""
					notes = ""
					description = "Some weapons have multiple versions of their textures, called skins. Set this to a number other than -1 to make the given weapon use that skin instead of the default."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "float"
					shortinfo = "Glow Range"
					extra = ""
					notes = ""
					description = "Set a custom glow range for this spawner. 0 means use the default range."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "choices"
					shortinfo = "Collisions"
					extra = ""
					notes = ""
					description = "Collision box type.\n0�: Not Solid\n2�: Use Bounding Box\n6�: Use VPhysics"
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_5":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
				"model":
				{
					typename = "string"
					shortinfo = "World Model"
					extra = ""
					notes = ""
					description = "The model this entity should appear as. 128-character limit."
					choices = {}
				}
				"skin":
				{
					typename = "integer"
					shortinfo = "Skin"
					extra = ""
					notes = ""
					description = "Some models have multiple skins. This value selects from the index, starting with 0. �Tip:�Hammer's model browser automatically updates this value if you use it to view different skins."
					choices = {}
				}
				"modelscale":
				{
					typename = "float"
					shortinfo = "Model Scale"
					extra = "(in all games since [Source][Source])"
					notes = ""
					description = "A multiplier for the size of the model."
					choices = {}
				}
				"disableshadows":
				{
					typename = "boolean"
					shortinfo = "Disable Shadows"
					extra = ""
					notes = ""
					description = "Prevents the entity from creating cheap render-to-texture shadows, or lightmap shadows if the entity is a prop_static. Does not affect shadow mapping."
					choices = {}
				}
				"disableshadowdepth":
				{
					typename = "boolean"
					shortinfo = "Disable ShadowDepth"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable rendering into shadow depth (for projected textures) for this entity."
					choices = {}
				}
				"shadowdepthnocache":
				{
					typename = "choices"
					shortinfo = "Projected Texture Cache"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to hint projected texture system whether it is sufficient to cache shadow volume of this entity or to force render it every frame instead.\n0�: Default\n1�: No cache - render every frame\n2�: Cache it - render only once"
					choices = {}
				}
				"disableflashlight":
				{
					typename = "boolean"
					shortinfo = "Disable flashlight"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable projected texture lighting and shadows on this entity."
					choices = {}
				}
				"drawinfastreflection":
				{
					typename = "boolean"
					shortinfo = "Render in Fast Reflections"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "If enabled, this entity will render in fast water reflections (i.e. when a water material specifies $reflectonlymarkedentities) and in the world impostor pass."
					choices = {}
				}
			}
		}
		weapon_smg_mp5_spawn = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		weapon_smg_silenced_spawn = 
		{
			description = "[Left 4 Dead 2]�weapon_smg_silenced_spawn is a  point entity available in Left 4 Dead 2. It is a possible spawn point for a silenced micro-UZI."
			flagnotes = ""
			flags = 
			{
				"4":
				{
					category = ""
					description = "Absorb any dropped weapon type"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "integer"
					shortinfo = "Count"
					extra = ""
					notes = ""
					description = "Max number of weapons given before disappearing."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "integer"
					shortinfo = "Weapon Skin"
					extra = ""
					notes = ""
					description = "Some weapons have multiple versions of their textures, called skins. Set this to a number other than -1 to make the given weapon use that skin instead of the default."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "float"
					shortinfo = "Glow Range"
					extra = ""
					notes = ""
					description = "Set a custom glow range for this spawner. 0 means use the default range."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "choices"
					shortinfo = "Collisions"
					extra = ""
					notes = ""
					description = "Collision box type.\n0�: Not Solid\n2�: Use Bounding Box\n6�: Use VPhysics"
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_5":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
				"model":
				{
					typename = "string"
					shortinfo = "World Model"
					extra = ""
					notes = ""
					description = "The model this entity should appear as. 128-character limit."
					choices = {}
				}
				"skin":
				{
					typename = "integer"
					shortinfo = "Skin"
					extra = ""
					notes = ""
					description = "Some models have multiple skins. This value selects from the index, starting with 0. �Tip:�Hammer's model browser automatically updates this value if you use it to view different skins."
					choices = {}
				}
				"modelscale":
				{
					typename = "float"
					shortinfo = "Model Scale"
					extra = "(in all games since [Source][Source])"
					notes = ""
					description = "A multiplier for the size of the model."
					choices = {}
				}
				"disableshadows":
				{
					typename = "boolean"
					shortinfo = "Disable Shadows"
					extra = ""
					notes = ""
					description = "Prevents the entity from creating cheap render-to-texture shadows, or lightmap shadows if the entity is a prop_static. Does not affect shadow mapping."
					choices = {}
				}
				"disableshadowdepth":
				{
					typename = "boolean"
					shortinfo = "Disable ShadowDepth"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable rendering into shadow depth (for projected textures) for this entity."
					choices = {}
				}
				"shadowdepthnocache":
				{
					typename = "choices"
					shortinfo = "Projected Texture Cache"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to hint projected texture system whether it is sufficient to cache shadow volume of this entity or to force render it every frame instead.\n0�: Default\n1�: No cache - render every frame\n2�: Cache it - render only once"
					choices = {}
				}
				"disableflashlight":
				{
					typename = "boolean"
					shortinfo = "Disable flashlight"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable projected texture lighting and shadows on this entity."
					choices = {}
				}
				"drawinfastreflection":
				{
					typename = "boolean"
					shortinfo = "Render in Fast Reflections"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "If enabled, this entity will render in fast water reflections (i.e. when a water material specifies $reflectonlymarkedentities) and in the world impostor pass."
					choices = {}
				}
			}
		}
		weapon_smg_spawn = 
		{
			description = "[Left 4 Dead][Left 4 Dead 2]�weapon_smg_spawn is a  point entity available in the Left 4 Dead series. It is a possible spawn point for submachine guns."
			flagnotes = ""
			flags = 
			{
				"4":
				{
					category = ""
					description = "Absorb any dropped weapon type"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "integer"
					shortinfo = "Count"
					extra = ""
					notes = ""
					description = "Max number of weapons given before disappearing."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "integer"
					shortinfo = "Weapon Skin"
					extra = ""
					notes = ""
					description = "Some weapons have multiple versions of their textures, called skins. Set this to a number other than -1 to make the given weapon use that skin instead of the default."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "float"
					shortinfo = "Glow Range"
					extra = ""
					notes = ""
					description = "Set a custom glow range for this spawner. 0 means use the default range."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "choices"
					shortinfo = "Collisions"
					extra = ""
					notes = ""
					description = "Collision box type.\n0�: Not Solid\n2�: Use Bounding Box\n6�: Use VPhysics"
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_5":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
				"model":
				{
					typename = "string"
					shortinfo = "World Model"
					extra = ""
					notes = ""
					description = "The model this entity should appear as. 128-character limit."
					choices = {}
				}
				"skin":
				{
					typename = "integer"
					shortinfo = "Skin"
					extra = ""
					notes = ""
					description = "Some models have multiple skins. This value selects from the index, starting with 0. �Tip:�Hammer's model browser automatically updates this value if you use it to view different skins."
					choices = {}
				}
				"modelscale":
				{
					typename = "float"
					shortinfo = "Model Scale"
					extra = "(in all games since [Source][Source])"
					notes = ""
					description = "A multiplier for the size of the model."
					choices = {}
				}
				"disableshadows":
				{
					typename = "boolean"
					shortinfo = "Disable Shadows"
					extra = ""
					notes = ""
					description = "Prevents the entity from creating cheap render-to-texture shadows, or lightmap shadows if the entity is a prop_static. Does not affect shadow mapping."
					choices = {}
				}
				"disableshadowdepth":
				{
					typename = "boolean"
					shortinfo = "Disable ShadowDepth"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable rendering into shadow depth (for projected textures) for this entity."
					choices = {}
				}
				"shadowdepthnocache":
				{
					typename = "choices"
					shortinfo = "Projected Texture Cache"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to hint projected texture system whether it is sufficient to cache shadow volume of this entity or to force render it every frame instead.\n0�: Default\n1�: No cache - render every frame\n2�: Cache it - render only once"
					choices = {}
				}
				"disableflashlight":
				{
					typename = "boolean"
					shortinfo = "Disable flashlight"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable projected texture lighting and shadows on this entity."
					choices = {}
				}
				"drawinfastreflection":
				{
					typename = "boolean"
					shortinfo = "Render in Fast Reflections"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "If enabled, this entity will render in fast water reflections (i.e. when a water material specifies $reflectonlymarkedentities) and in the world impostor pass."
					choices = {}
				}
			}
		}
		weapon_sniper_awp_spawn = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		weapon_sniper_military_spawn = 
		{
			description = "[Left 4 Dead 2]�weapon_sniper_military_spawn is a  point entity available in Left 4 Dead 2. It is a possible spawn point for a military sniper rifle."
			flagnotes = ""
			flags = 
			{
				"4":
				{
					category = ""
					description = "Absorb any dropped weapon type"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "integer"
					shortinfo = "Count"
					extra = ""
					notes = ""
					description = "Max number of weapons given before disappearing."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "integer"
					shortinfo = "Weapon Skin"
					extra = ""
					notes = ""
					description = "Some weapons have multiple versions of their textures, called skins. Set this to a number other than -1 to make the given weapon use that skin instead of the default."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "float"
					shortinfo = "Glow Range"
					extra = ""
					notes = ""
					description = "Set a custom glow range for this spawner. 0 means use the default range."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "choices"
					shortinfo = "Collisions"
					extra = ""
					notes = ""
					description = "Collision box type.\n0�: Not Solid\n2�: Use Bounding Box\n6�: Use VPhysics"
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_5":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
				"model":
				{
					typename = "string"
					shortinfo = "World Model"
					extra = ""
					notes = ""
					description = "The model this entity should appear as. 128-character limit."
					choices = {}
				}
				"skin":
				{
					typename = "integer"
					shortinfo = "Skin"
					extra = ""
					notes = ""
					description = "Some models have multiple skins. This value selects from the index, starting with 0. �Tip:�Hammer's model browser automatically updates this value if you use it to view different skins."
					choices = {}
				}
				"modelscale":
				{
					typename = "float"
					shortinfo = "Model Scale"
					extra = "(in all games since [Source][Source])"
					notes = ""
					description = "A multiplier for the size of the model."
					choices = {}
				}
				"disableshadows":
				{
					typename = "boolean"
					shortinfo = "Disable Shadows"
					extra = ""
					notes = ""
					description = "Prevents the entity from creating cheap render-to-texture shadows, or lightmap shadows if the entity is a prop_static. Does not affect shadow mapping."
					choices = {}
				}
				"disableshadowdepth":
				{
					typename = "boolean"
					shortinfo = "Disable ShadowDepth"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable rendering into shadow depth (for projected textures) for this entity."
					choices = {}
				}
				"shadowdepthnocache":
				{
					typename = "choices"
					shortinfo = "Projected Texture Cache"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to hint projected texture system whether it is sufficient to cache shadow volume of this entity or to force render it every frame instead.\n0�: Default\n1�: No cache - render every frame\n2�: Cache it - render only once"
					choices = {}
				}
				"disableflashlight":
				{
					typename = "boolean"
					shortinfo = "Disable flashlight"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable projected texture lighting and shadows on this entity."
					choices = {}
				}
				"drawinfastreflection":
				{
					typename = "boolean"
					shortinfo = "Render in Fast Reflections"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "If enabled, this entity will render in fast water reflections (i.e. when a water material specifies $reflectonlymarkedentities) and in the world impostor pass."
					choices = {}
				}
			}
		}
		weapon_sniper_scout_spawn = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		weapon_spawn = 
		{
			description = "[Left 4 Dead 2]�weapon_spawn is a  point entity available in Left 4 Dead 2. It is a configurable spawner for any non-melee weapon."
			flagnotes = ""
			flags = 
			{
				"16":
				{
					category = ""
					description = "Constrain to spawn position (don't drop to the ground)"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "choices"
					shortinfo = "Selection"
					extra = ""
					notes = ""
					description = "Value\nDescription\n\n\nany\nAny primary or secondary weapon\n\n\nany_pistol\nAny Pistol\n\n\nweapon_pistol\nPistol\n\n\nweapon_pistol_magnum\nMagnum Pistol\n\n\nany_primary\nAny Primary Weapon\n\n\ntier1_any\nAny tier 1 primary\n\n\ntier2_any\nAny tier 2 primary\n\n\nany_smg\nAny tier 1 SMG\n\n\nany_rifle\nAny tier 2 Rifle\n\n\nany_sniper_rifle\nAny tier 2 Sniper Rifle\n\n\nany_shotgun\nAny Shotgun\n\n\ntier1_shotgun\nAny tier 1 Shotgun\n\n\ntier2_shotgun\nAny tier 2 Shotgun\n\n\nweapon_smg\nSMG\n\n\nweapon_smg_silenced\nSilenced SMG\n\n\nweapon_pumpshotgun\nPump Shotgun\n\n\nweapon_shotgun_chrome\nChrome Shotgun\n\n\nweapon_autoshotgun\nAuto Shotgun\n\n\nweapon_shotgun_spas\nSPAS Shotgun\n\n\nweapon_rifle\nM4 Rifle\n\n\nweapon_rifle_desert\nDesert Rifle\n\n\nweapon_rifle_ak47\nAK47\n\n\nweapon_hunting_rifle\nHunting Rifle\n\n\nweapon_sniper_military\nSniper Military\n\n\nweapon_smg_mp5\nMP5\n\n\nweapon_rifle_sg552\nSG552\n\n\nweapon_sniper_awp\nSniper AWP\n\n\nweapon_sniper_scout\nSniper Scout"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "boolean"
					shortinfo = "Spawn instantly without director"
					extra = ""
					notes = ""
					description = "Bypass the proximity checks that make nearby weapons be the same tier / not the same weapon"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "boolean"
					shortinfo = "No CS Weapons"
					extra = ""
					notes = ""
					description = "When selecting 'any' weapon, set this to true if you do not want CS weapons."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "integer"
					shortinfo = "Count"
					extra = ""
					notes = ""
					description = "Max number of weapons given before disappearing."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_5":
				{
					typename = "integer"
					shortinfo = "Weapon Skin"
					extra = ""
					notes = ""
					description = "Some weapons have multiple versions of their textures, called skins. Set this to a number other than -1 to make the given weapon use that skin instead of the default."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_6":
				{
					typename = "float"
					shortinfo = "Glow Range"
					extra = ""
					notes = ""
					description = "Set a custom glow range for this spawner. 0 means use the default range."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_7":
				{
					typename = "choices"
					shortinfo = "Collisions"
					extra = ""
					notes = ""
					description = "Collision box type.\n0�: Not Solid\n2�: Use Bounding Box\n6�: Use VPhysics"
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_8":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
				"model":
				{
					typename = "string"
					shortinfo = "World Model"
					extra = ""
					notes = ""
					description = "The model this entity should appear as. 128-character limit."
					choices = {}
				}
				"skin":
				{
					typename = "integer"
					shortinfo = "Skin"
					extra = ""
					notes = ""
					description = "Some models have multiple skins. This value selects from the index, starting with 0. �Tip:�Hammer's model browser automatically updates this value if you use it to view different skins."
					choices = {}
				}
				"modelscale":
				{
					typename = "float"
					shortinfo = "Model Scale"
					extra = "(in all games since [Source][Source])"
					notes = ""
					description = "A multiplier for the size of the model."
					choices = {}
				}
				"disableshadows":
				{
					typename = "boolean"
					shortinfo = "Disable Shadows"
					extra = ""
					notes = ""
					description = "Prevents the entity from creating cheap render-to-texture shadows, or lightmap shadows if the entity is a prop_static. Does not affect shadow mapping."
					choices = {}
				}
				"disableshadowdepth":
				{
					typename = "boolean"
					shortinfo = "Disable ShadowDepth"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable rendering into shadow depth (for projected textures) for this entity."
					choices = {}
				}
				"shadowdepthnocache":
				{
					typename = "choices"
					shortinfo = "Projected Texture Cache"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to hint projected texture system whether it is sufficient to cache shadow volume of this entity or to force render it every frame instead.\n0�: Default\n1�: No cache - render every frame\n2�: Cache it - render only once"
					choices = {}
				}
				"disableflashlight":
				{
					typename = "boolean"
					shortinfo = "Disable flashlight"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable projected texture lighting and shadows on this entity."
					choices = {}
				}
				"drawinfastreflection":
				{
					typename = "boolean"
					shortinfo = "Render in Fast Reflections"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "If enabled, this entity will render in fast water reflections (i.e. when a water material specifies $reflectonlymarkedentities) and in the world impostor pass."
					choices = {}
				}
			}
		}
		weapon_upgradepack_explosive_spawn = 
		{
			description = "[Left 4 Dead 2]�weapon_upgradepack_explosive_spawn is a  point entity available in Left 4 Dead 2. It is a possible spawn point for an explosive ammo pack."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Enable Physics"
					notes = ""
				}
				"2":
				{
					category = ""
					description = "Must Exist"
					notes = ""
				}
				"8":
				{
					category = ""
					description = "Infinite items (overrides count)"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "integer"
					shortinfo = "Weapon Skin"
					extra = ""
					notes = ""
					description = "Some weapons have multiple versions of their textures, called skins. Set this to a number other than -1 to make the given weapon use that skin instead of the default."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "float"
					shortinfo = "Glow Range"
					extra = ""
					notes = ""
					description = "Set a custom glow range for this spawner. 0 means use the default range."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "choices"
					shortinfo = "Collisions"
					extra = ""
					notes = ""
					description = "Collision box type.\n0�: Not Solid\n2�: Use Bounding Box\n6�: Use VPhysics"
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
				"model":
				{
					typename = "string"
					shortinfo = "World Model"
					extra = ""
					notes = ""
					description = "The model this entity should appear as. 128-character limit."
					choices = {}
				}
				"skin":
				{
					typename = "integer"
					shortinfo = "Skin"
					extra = ""
					notes = ""
					description = "Some models have multiple skins. This value selects from the index, starting with 0. �Tip:�Hammer's model browser automatically updates this value if you use it to view different skins."
					choices = {}
				}
				"modelscale":
				{
					typename = "float"
					shortinfo = "Model Scale"
					extra = "(in all games since [Source][Source])"
					notes = ""
					description = "A multiplier for the size of the model."
					choices = {}
				}
				"disableshadows":
				{
					typename = "boolean"
					shortinfo = "Disable Shadows"
					extra = ""
					notes = ""
					description = "Prevents the entity from creating cheap render-to-texture shadows, or lightmap shadows if the entity is a prop_static. Does not affect shadow mapping."
					choices = {}
				}
				"disableshadowdepth":
				{
					typename = "boolean"
					shortinfo = "Disable ShadowDepth"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable rendering into shadow depth (for projected textures) for this entity."
					choices = {}
				}
				"shadowdepthnocache":
				{
					typename = "choices"
					shortinfo = "Projected Texture Cache"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to hint projected texture system whether it is sufficient to cache shadow volume of this entity or to force render it every frame instead.\n0�: Default\n1�: No cache - render every frame\n2�: Cache it - render only once"
					choices = {}
				}
				"disableflashlight":
				{
					typename = "boolean"
					shortinfo = "Disable flashlight"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable projected texture lighting and shadows on this entity."
					choices = {}
				}
				"drawinfastreflection":
				{
					typename = "boolean"
					shortinfo = "Render in Fast Reflections"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "If enabled, this entity will render in fast water reflections (i.e. when a water material specifies $reflectonlymarkedentities) and in the world impostor pass."
					choices = {}
				}
			}
		}
		weapon_upgradepack_incendiary_spawn = 
		{
			description = "[Left 4 Dead 2]�weapon_upgradepack_incendiary_spawn is a  point entity available in Left 4 Dead 2. It is a possible spawn point for an incendiary ammo pack."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Enable Physics"
					notes = ""
				}
				"2":
				{
					category = ""
					description = "Must Exist"
					notes = ""
				}
				"8":
				{
					category = ""
					description = "Infinite items (overrides count)"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "integer"
					shortinfo = "Weapon Skin"
					extra = ""
					notes = ""
					description = "Some weapons have multiple versions of their textures, called skins. Set this to a number other than -1 to make the given weapon use that skin instead of the default."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "float"
					shortinfo = "Glow Range"
					extra = ""
					notes = ""
					description = "Set a custom glow range for this spawner. 0 means use the default range."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "choices"
					shortinfo = "Collisions"
					extra = ""
					notes = ""
					description = "Collision box type.\n0�: Not Solid\n2�: Use Bounding Box\n6�: Use VPhysics"
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
				"model":
				{
					typename = "string"
					shortinfo = "World Model"
					extra = ""
					notes = ""
					description = "The model this entity should appear as. 128-character limit."
					choices = {}
				}
				"skin":
				{
					typename = "integer"
					shortinfo = "Skin"
					extra = ""
					notes = ""
					description = "Some models have multiple skins. This value selects from the index, starting with 0. �Tip:�Hammer's model browser automatically updates this value if you use it to view different skins."
					choices = {}
				}
				"modelscale":
				{
					typename = "float"
					shortinfo = "Model Scale"
					extra = "(in all games since [Source][Source])"
					notes = ""
					description = "A multiplier for the size of the model."
					choices = {}
				}
				"disableshadows":
				{
					typename = "boolean"
					shortinfo = "Disable Shadows"
					extra = ""
					notes = ""
					description = "Prevents the entity from creating cheap render-to-texture shadows, or lightmap shadows if the entity is a prop_static. Does not affect shadow mapping."
					choices = {}
				}
				"disableshadowdepth":
				{
					typename = "boolean"
					shortinfo = "Disable ShadowDepth"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable rendering into shadow depth (for projected textures) for this entity."
					choices = {}
				}
				"shadowdepthnocache":
				{
					typename = "choices"
					shortinfo = "Projected Texture Cache"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to hint projected texture system whether it is sufficient to cache shadow volume of this entity or to force render it every frame instead.\n0�: Default\n1�: No cache - render every frame\n2�: Cache it - render only once"
					choices = {}
				}
				"disableflashlight":
				{
					typename = "boolean"
					shortinfo = "Disable flashlight"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable projected texture lighting and shadows on this entity."
					choices = {}
				}
				"drawinfastreflection":
				{
					typename = "boolean"
					shortinfo = "Render in Fast Reflections"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "If enabled, this entity will render in fast water reflections (i.e. when a water material specifies $reflectonlymarkedentities) and in the world impostor pass."
					choices = {}
				}
			}
		}
		weapon_vomitjar_spawn = 
		{
			description = "[Left 4 Dead 2]�weapon_vomitjar_spawn is a  point entity available in Left 4 Dead 2. It is a possible spawn point for a vomit jar."
			flagnotes = ""
			flags = 
			{
				"4":
				{
					category = ""
					description = "Absorb any dropped weapon type"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "integer"
					shortinfo = "Count"
					extra = ""
					notes = ""
					description = "Max number of weapons given before disappearing."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "integer"
					shortinfo = "Weapon Skin"
					extra = ""
					notes = ""
					description = "Some weapons have multiple versions of their textures, called skins. Set this to a number other than -1 to make the given weapon use that skin instead of the default."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "float"
					shortinfo = "Glow Range"
					extra = ""
					notes = ""
					description = "Set a custom glow range for this spawner. 0 means use the default range."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "choices"
					shortinfo = "Collisions"
					extra = ""
					notes = ""
					description = "Collision box type.\n0�: Not Solid\n2�: Use Bounding Box\n6�: Use VPhysics"
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_5":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
				"model":
				{
					typename = "string"
					shortinfo = "World Model"
					extra = ""
					notes = ""
					description = "The model this entity should appear as. 128-character limit."
					choices = {}
				}
				"skin":
				{
					typename = "integer"
					shortinfo = "Skin"
					extra = ""
					notes = ""
					description = "Some models have multiple skins. This value selects from the index, starting with 0. �Tip:�Hammer's model browser automatically updates this value if you use it to view different skins."
					choices = {}
				}
				"modelscale":
				{
					typename = "float"
					shortinfo = "Model Scale"
					extra = "(in all games since [Source][Source])"
					notes = ""
					description = "A multiplier for the size of the model."
					choices = {}
				}
				"disableshadows":
				{
					typename = "boolean"
					shortinfo = "Disable Shadows"
					extra = ""
					notes = ""
					description = "Prevents the entity from creating cheap render-to-texture shadows, or lightmap shadows if the entity is a prop_static. Does not affect shadow mapping."
					choices = {}
				}
				"disableshadowdepth":
				{
					typename = "boolean"
					shortinfo = "Disable ShadowDepth"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable rendering into shadow depth (for projected textures) for this entity."
					choices = {}
				}
				"shadowdepthnocache":
				{
					typename = "choices"
					shortinfo = "Projected Texture Cache"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to hint projected texture system whether it is sufficient to cache shadow volume of this entity or to force render it every frame instead.\n0�: Default\n1�: No cache - render every frame\n2�: Cache it - render only once"
					choices = {}
				}
				"disableflashlight":
				{
					typename = "boolean"
					shortinfo = "Disable flashlight"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable projected texture lighting and shadows on this entity."
					choices = {}
				}
				"drawinfastreflection":
				{
					typename = "boolean"
					shortinfo = "Render in Fast Reflections"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "If enabled, this entity will render in fast water reflections (i.e. when a water material specifies $reflectonlymarkedentities) and in the world impostor pass."
					choices = {}
				}
			}
		}
		weapon_adrenaline = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		weapon_ammo = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		weapon_autoshotgun = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		weapon_boomer_claw = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		weapon_chainsaw = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		weapon_charger_claw = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		weapon_cola_bottles = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		weapon_defibrillator = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		weapon_fireworkcrate = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		weapon_first_aid_kit = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		weapon_gascan = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		weapon_gnome = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		weapon_grenade_launcher = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		weapon_hunter_claw = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		weapon_hunting_rifle = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		weapon_jockey_claw = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		weapon_molotov = 
		{
			description = "[Counter-Strike: Global Offensive]�weapon_molotov is a  point entity available in Counter-Strike: Global Offensive."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Start Constrained"
					notes = "Details: Prevents the model from moving."
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"CanBePickedUp":
				{
					typename = "boolean"
					shortinfo = "Is this weapon allowed to be picked up?"
					extra = ""
					notes = ""
					description = "Determines if players are able to pick up the weapon."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
			}
		}
		weapon_oxygentank = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		weapon_pain_pills = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		weapon_pipe_bomb = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		weapon_pistol_magnum = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		weapon_pistol = 
		{
			description = "[Half-Life 2]�weapon_pistol is a  point entity available in the Half-Life 2 series."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Start Constrained. Prevents the model from moving."
					notes = ""
				}
				"2":
				{
					category = ""
					description = "Deny player pickup (reserve for NPC)"
					notes = ""
				}
				"4":
				{
					category = ""
					description = "Not puntable by Gravity Gun"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "float"
					shortinfo = "Start Fade Dist/Pixels"
					extra = ""
					notes = ""
					description = "Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "float"
					shortinfo = "End Fade Dist/Pixels"
					extra = ""
					notes = ""
					description = "Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "float"
					shortinfo = "Fade Scale"
					extra = ""
					notes = ""
					description = "If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified. This scale factor gives you some control over the fade. Using 0 here turns off the forcible fades."
					choices = {}
				}
				"gmod_allowphysgun":
				{
					typename = "boolean"
					shortinfo = "Allow Physics Gun"
					extra = "(only in [Garry's Mod])"
					notes = ""
					description = "If set, players cannot use Physics Gun on this entity."
					choices = {}
				}
				"gmod_allowtools":
				{
					typename = "string"
					shortinfo = "Sandbox Tool Whitelist"
					extra = "(only in [Garry's Mod])"
					notes = ""
					description = "If set, only given tools can be used on this entity. You need to supply the tool class names, the names of the .lua files of those tools. This also includes the context menu properties!"
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"disableX360":
				{
					typename = "boolean"
					shortinfo = "Disable for Xbox 360"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "If Yes, disables this entity on the Xbox 360 version of Source."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"LagCompensate":
				{
					typename = "boolean"
					shortinfo = "Lag Compensation"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "Set to Yes to lag compensate this entity. Should be used very sparingly!"
					choices = {}
				}
				"is_autoaim_target":
				{
					typename = "boolean"
					shortinfo = "Is Automatic-Aim Target"
					extra = "(in all games since [Counter-Strike: Global Offensive])�!FGD"
					notes = ""
					description = "If set to 1, this entity will slow down aiming movement for consoles and joystick controllers when the entity is under the crosshairs."
					choices = {}
				}
			}
		}
		weapon_propanetank = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		weapon_pumpshotgun = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		weapon_rifle_ak47 = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		weapon_rifle_desert = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		weapon_rifle_m60 = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		weapon_rifle_sg552 = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		weapon_rifle = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		weapon_shotgun_chrome = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		weapon_shotgun_spas = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		weapon_smg_mp5 = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		weapon_smg_silenced = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		weapon_smg = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		weapon_smoker_claw = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		weapon_sniper_awp = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		weapon_sniper_military = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		weapon_sniper_scout = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		weapon_spitter_claw = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		weapon_tank_claw = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		weapon_upgradepack_explosive = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		weapon_upgradepack_incendiary = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		weapon_vomitjar = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		
	}
	script = 
	{
		script_clip_vphysics = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		script_func_button = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		script_nav_attribute_region = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		script_nav_blocker = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		script_trigger_hurt = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		script_trigger_multiple = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		script_trigger_once = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		script_trigger_push = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		
	}
	_ = 
	{
		_firesmoke = 
		{
			description = "_firesmoke is a  point entity available in all Source games. This is the group of particle effects created by an env_fire, including the flames. It does no damage. If a fire shouldn't damage things, or is unable to, this entity could be used directly for a small amount of memory saved. env_fire does however allow much more control over the flame.\n In code, it is represented by class CFireSmoke, defined in fire_smoke.cpp."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"disableX360":
				{
					typename = "boolean"
					shortinfo = "Disable for Xbox 360"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "If Yes, disables this entity on the Xbox 360 version of Source."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"LagCompensate":
				{
					typename = "boolean"
					shortinfo = "Lag Compensation"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "Set to Yes to lag compensate this entity. Should be used very sparingly!"
					choices = {}
				}
				"is_autoaim_target":
				{
					typename = "boolean"
					shortinfo = "Is Automatic-Aim Target"
					extra = "(in all games since [Counter-Strike: Global Offensive])�!FGD"
					notes = ""
					description = "If set to 1, this entity will slow down aiming movement for consoles and joystick controllers when the entity is under the crosshairs."
					choices = {}
				}
			}
		}
		
	}
	ability = 
	{
		ability_charge = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		ability_leap = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		ability_lunge = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		ability_selfdestruct = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		ability_spit = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		ability_throw = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		ability_tongue = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		ability_vomit = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		
	}
	cs = 
	{
		cs_ragdoll = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		cs_team_manager = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		
	}
	entity = 
	{
		entity_blocker = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		
	}
	entityflame = 
	{
		entityflame = 
		{
			description = "env_entity_igniter is a  point entity available in all Source games. It catches a target entity on fire. If the target is an animating model, it will have flame sprites attached to its skeleton. Otherwise the target will emit particle flame puffs.\nThis entity may also use entityflame for the classname.\n In code, it is represented by class CEntityFlame[Half-Life 2][Portal][Team Fortress 2][Left 4 Dead], defined in EntityFlame.cpp.\n In code, it is represented by class CEnvEntityIgniter[Left 4 Dead 2][Alien Swarm][Portal 2][Counter-Strike: Global Offensive], defined in EntityFlame.cpp."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"target":
				{
					typename = "targetname"
					shortinfo = "Entity to ignite"
					extra = ""
					notes = ""
					description = "Name of the entity to catch on fire."
					choices = {}
				}
				"lifetime":
				{
					typename = "float"
					shortinfo = "Lifetime in seconds"
					extra = ""
					notes = ""
					description = "Duration of flames."
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"disableX360":
				{
					typename = "boolean"
					shortinfo = "Disable for Xbox 360"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "If Yes, disables this entity on the Xbox 360 version of Source."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"LagCompensate":
				{
					typename = "boolean"
					shortinfo = "Lag Compensation"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "Set to Yes to lag compensate this entity. Should be used very sparingly!"
					choices = {}
				}
				"is_autoaim_target":
				{
					typename = "boolean"
					shortinfo = "Is Automatic-Aim Target"
					extra = "(in all games since [Counter-Strike: Global Offensive])�!FGD"
					notes = ""
					description = "If set to 1, this entity will slow down aiming movement for consoles and joystick controllers when the entity is under the crosshairs."
					choices = {}
				}
			}
		}
		
	}
	escape = 
	{
		escape_route = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		
	}
	fire = 
	{
		fire_cracker_blast = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		
	}
	grenade = 
	{
		grenade_launcher_projectile = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		
	}
	holiday = 
	{
		holiday_gift = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		
	}
	infected = 
	{
		infected = 
		{
			description = "[Left 4 Dead][Left 4 Dead 2]�infected is a  point entity available in the Left 4 Dead series."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		
	}
	inferno = 
	{
		inferno = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		
	}
	insect = 
	{
		insect_swarm = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		
	}
	instanced = 
	{
		instanced_scripted_scene = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		
	}
	molotov = 
	{
		molotov_projectile = 
		{
			description = "molotov_projectile is a point entity available in the following Source engine games:\n[Left 4 Dead][Left 4 Dead 2] Left 4 Dead series, [Counter-Strike: Global Offensive] Counter-Strike: Global Offensive."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Start Constrained"
					notes = "Details: Prevents the model from moving."
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
			}
		}
		
	}
	pipe = 
	{
		pipe_bomb_projectile = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		
	}
	predicted = 
	{
		predicted_viewmodel = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		
	}
	scene = 
	{
		scene_manager = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		
	}
	spitter = 
	{
		spitter_projectile = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		
	}
	soundent = 
	{
		soundent = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		
	}
	survivor = 
	{
		survivor_death_model = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		
	}
	tank = 
	{
		tank_rock = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		
	}
	terror = 
	{
		terror_gamerules = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		terror_player_manager = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		
	}
	vomit = 
	{
		vomit_particle = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		
	}
	vomitjar = 
	{
		vomitjar_projectile = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		
	}
	vote = 
	{
		vote_controller = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		
	}
	witch = 
	{
		witch = 
		{
			description = "No description found."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		
	}
	ai = 
	{
		ai_speechfilter = 
		{
			description = "ai_speechfilter is a  point entity available in all Source games. The entity allows to adjust how much an NPC will idle chatter to other NPC�s the player. This is quite useful, especially if you have a script setup where idle chatter will seem out of place, or get in the way of a Face Poser scene. Speech patterns for NPCs are defined in Response System.\n In code, it is represented by class CAI_SpeechFilter, defined in ai_speechfilter.cpp."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"subject":
				{
					typename = "targetname"
					shortinfo = "Subject(s)"
					extra = ""
					notes = ""
					description = "This is the NPC(s) whose speech we're filtering. May be a targetname or a classname."
					choices = {}
				}
				"IdleModifier":
				{
					typename = "float"
					shortinfo = "Idle modifier"
					extra = ""
					notes = ""
					description = "Multiplier to the probability that our NPC(s) will idle speak. Set to 0 to prevent all idle speech."
					choices = {}
				}
				"NeverSayHello":
				{
					typename = "choices"
					shortinfo = "Greet Player?"
					extra = ""
					notes = ""
					description = "If set to Yes, our NPC(s) won't greet the player when they first meet him.\n0: Yes\n1: No"
					choices = {}
				}
				"StartDisabled":
				{
					typename = "boolean"
					shortinfo = "Start Disabled"
					extra = ""
					notes = ""
					description = "Stay dormant until activated (probably with the Enable input)."
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"disableX360":
				{
					typename = "boolean"
					shortinfo = "Disable for Xbox 360"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "If Yes, disables this entity on the Xbox 360 version of Source."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"LagCompensate":
				{
					typename = "boolean"
					shortinfo = "Lag Compensation"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "Set to Yes to lag compensate this entity. Should be used very sparingly!"
					choices = {}
				}
				"is_autoaim_target":
				{
					typename = "boolean"
					shortinfo = "Is Automatic-Aim Target"
					extra = "(in all games since [Counter-Strike: Global Offensive])�!FGD"
					notes = ""
					description = "If set to 1, this entity will slow down aiming movement for consoles and joystick controllers when the entity is under the crosshairs."
					choices = {}
				}
			}
		}
		
	}
	ambient = 
	{
		ambient_generic = 
		{
			description = "ambient_generic is a  point entity available in all Source games."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Play everywhere\nSound plays at a constant volume, no matter how far away the listener is from the sound source. To do\t�How does this interact with env_microphone sound detection?"
					notes = "Details: Bug:�This flag is broken at engine level for Soundscripts. It will only work when a sound is played with its raw filename."
				}
				"16":
				{
					category = ""
					description = "Start Silent"
					notes = "Details: The map will start without this sound playing. Enabled by default. �Bug:�Looping sounds that do not start silent cannot be controlled!"
				}
				"32":
				{
					category = ""
					description = "Is NOT Looped"
					notes = "Details: Changes how the ambient_generic handles stopping and starting playback. It won't stop a sound that loops from looping, but it is still very important to set it to the right value. You might not be able to stop and/or start the sound if it isn't! �Bug:�Having this option ticked while using a looped sound WILL prevent you from controlling it!"
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"message":
				{
					typename = "string"
					shortinfo = "Sound Name"
					extra = ""
					notes = ""
					description = "The soundscript name of, or direct path to, the sound to play. For scripted sentences, type '!' followed by the sentence name. (Example: !COMBINE_THROW_GRENADE4) �Note:�Music should be flagged as music with the '#' character before the sound path (e.g. #music/song01.wav) and placed in 'sound/music/...' directory in order for it to be affected by the 'Music Volume' slider in the options menu."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "float"
					shortinfo = "Max Audible Distance"
					extra = ""
					notes = ""
					description = "Maximum distance in units at which the sound plays for a client. �Bug:�The sound still actually plays outside the distance. �Bug:�Sounds may still be audible far outside the distance due to DSP. �Note:�Volume fades to nothing as the player approaches this distance, which can make it seem as if the sound stops playing too early."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "targetname"
					shortinfo = "SourceEntityName"
					extra = ""
					notes = ""
					description = "If specified, the sound will play from this entity instead of the ambient_generic. If the target is an NPC capable of lipsynching, and phoneme data is found within the sound, the target will lip-sync to it. �Bug:�If the ambient_generic is killed, the sound will play at the origin of the map (at 0,0,0). �Bug:�Entity must be spawned at map start, or else sound will play at the location of the ambient_generic. Using AddOutput to assign the SourceEntityName after the entity spawns does not work. �Bug:�Multiple ambient_generics won't stack on the same entity. �Note:�Ambient_generics will only play from a single entity. If there are multiple entities with the same target name, the sound will only play from the first one it finds. (Only tested in [Team Fortress 2])"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "int_0-10"
					shortinfo = "Volume"
					extra = ""
					notes = ""
					description = "How loud to play the sound. 0 is silent and 10 is normal. Default is 10.\n�Tip:�This keyvalue doesn't allow decimals, but the Volume input does.\n�Bug:�The sound does not play at all if the volume is 0."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "int_0-10"
					shortinfo = "Start Volume"
					extra = ""
					notes = ""
					description = ""
					choices = {}
				}
				"UNKNOWN_KEY_NAME_5":
				{
					typename = "int_0-100"
					shortinfo = "Fade in time in seconds"
					extra = ""
					notes = ""
					description = ""
					choices = {}
				}
				"UNKNOWN_KEY_NAME_6":
				{
					typename = "int_0-100"
					shortinfo = "Fade out time in seconds"
					extra = ""
					notes = ""
					description = "How long to spend fading in and out, and what volume to start at. Default is no fading."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_7":
				{
					typename = "int_1-255"
					shortinfo = "Pitch"
					extra = ""
					notes = ""
					description = "Pitch, where 1 is low, 100 is normal, and 255 is high.\n�Bug:�Very high or very low values can cause other sounds to be distorted."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_8":
				{
					typename = "int_1-255"
					shortinfo = "Start pitch"
					extra = ""
					notes = ""
					description = ""
					choices = {}
				}
				"UNKNOWN_KEY_NAME_9":
				{
					typename = "int_0-100"
					shortinfo = "Spin up time"
					extra = ""
					notes = ""
					description = ""
					choices = {}
				}
				"UNKNOWN_KEY_NAME_10":
				{
					typename = "int_0-100"
					shortinfo = "Spin down time"
					extra = ""
					notes = ""
					description = "How long to spend spinning pitch up/down at the start/end of playback, and what pitch to start at. Default is no spinning."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_11":
				{
					typename = "choices"
					shortinfo = "Dynamic Presets"
					extra = ""
					notes = ""
					description = "Various DSP effects that can be applied."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_12":
				{
					typename = "int"
					shortinfo = "LFO type"
					extra = ""
					notes = ""
					description = "Type of Low Frequency Oscillation to employ.\nOff (default)\nSquare Wave (alternate between low and high)\nTriangle Wave (crossfade between high and low)\nRandom"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_13":
				{
					typename = "int_0-1000"
					shortinfo = "LFO rate"
					extra = ""
					notes = ""
					description = "How frequently the LFO effect repeats itself."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_14":
				{
					typename = "int_0-100"
					shortinfo = "LFO modulation - pitch"
					extra = ""
					notes = ""
					description = "Affects the sound pitch or vibrato. Higher numbers change the pitch more - warbling singers use little, police sirens use a lot."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_15":
				{
					typename = "int_0-100"
					shortinfo = "LFO modulation - volume"
					extra = ""
					notes = ""
					description = "Affects the volume of the sound, causing it to 'pulse.' Similar to tremolo. At a really high rate, this can make the same effect as talking through fan blades."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_16":
				{
					typename = "int"
					shortinfo = "Incremental Spinup Count"
					extra = ""
					notes = ""
					description = "Appears to be a intended to increase pitch in time with ToggleSound inputs, but: �Bug:�Non-functional."
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"disableX360":
				{
					typename = "boolean"
					shortinfo = "Disable for Xbox 360"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "If Yes, disables this entity on the Xbox 360 version of Source."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"LagCompensate":
				{
					typename = "boolean"
					shortinfo = "Lag Compensation"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "Set to Yes to lag compensate this entity. Should be used very sparingly!"
					choices = {}
				}
				"is_autoaim_target":
				{
					typename = "boolean"
					shortinfo = "Is Automatic-Aim Target"
					extra = "(in all games since [Counter-Strike: Global Offensive])�!FGD"
					notes = ""
					description = "If set to 1, this entity will slow down aiming movement for consoles and joystick controllers when the entity is under the crosshairs."
					choices = {}
				}
			}
		}
		ambient_music = 
		{
			description = "[Left 4 Dead 2]�ambient_music is a  point entity available in Left 4 Dead 2."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "sound"
					shortinfo = "Sound Name"
					extra = ""
					notes = ""
					description = "Name of the GameSound entry  to play."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		
	}
	color = 
	{
		color_correction = 
		{
			description = "Color correction is the concept of altering the color balance of an image to achieve a desired effect. It is primarily used to set an emotional tone or convey important information.\nCorrection in games has the unique benefit of being dynamic. It can reflect the state of the world or player or be attached to a specific location or object."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = {}
		}
		color_correction_volume = 
		{
			description = "color_correction_volume is a  brush entity available in all Source games. A color correction lookup table is faded in or out when a player enters or leaves its volume. Fade time is configurable.\n In code, it is represented by class CColorCorrectionVolume, defined in colorcorrectionvolume.cpp."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"fadeDuration":
				{
					typename = "float"
					shortinfo = "Lookup Fade Duration"
					extra = ""
					notes = ""
					description = "How fast the effect fades in or out when the viewer enters or exits."
					choices = {}
				}
				"maxweight":
				{
					typename = "float"
					shortinfo = "Maximum Weight"
					extra = ""
					notes = ""
					description = "This is the maximum weight for this lookup.[Clarify]"
					choices = {}
				}
				"filename":
				{
					typename = "string"
					shortinfo = "Lookup Table Filename"
					extra = ""
					notes = ""
					description = "Pathfile from the mod folder to the .raw to reference. For info on making a file, see color correction. Example path for a file in the hl2 materials folder: materials/colorcorrection.raw"
					choices = {}
				}
				"filtername":
				{
					typename = "filter"
					shortinfo = "Filter Name"
					extra = ""
					notes = ""
					description = "A filter entity to test potential activators against."
					choices = {}
				}
				"StartDisabled":
				{
					typename = "boolean"
					shortinfo = "Start Disabled"
					extra = ""
					notes = ""
					description = "Stay dormant until activated (probably with the Enable input)."
					choices = {}
				}
				"mins":
				{
					typename = "vector"
					shortinfo = "Minimum Bounding Box Size"
					extra = "!FGD"
					notes = ""
					description = "Co-ordinate of the minimum bounding box corner. The bounding box is drawn from this corner to the other one. Requires Bounding Box collisions (solid 2) to be used. Can be used to overwrite the collision shape of a brush, although it can only be a cuboid."
					choices = {}
				}
				"maxs":
				{
					typename = "vector"
					shortinfo = "Maximum Bounding Box Size"
					extra = "!FGD"
					notes = ""
					description = "Co-ordinate of the maximum bounding box corner. The bounding box is drawn from this corner to the other one. Requires Bounding Box collisions (solid 2) to be used. Can be used to overwrite the collision shape of a brush, although it can only be a cuboid."
					choices = {}
				}
				"solid":
				{
					typename = "choices"
					shortinfo = "Collisions"
					extra = "!FGD"
					notes = ""
					description = "Method of collision for this entity.\n0: None\n1: BSP (QPhysics)\n2: Bounding Box\n3: Oriented Bounding Box\n4: Oriented Bounding Box, constrained to Yaw only\n5: Custom/Test\n6: VPhysics"
					choices = {}
				}
				"modelindex":
				{
					typename = "short"
					shortinfo = "Model Index"
					extra = "!FGD"
					notes = ""
					description = "Changes the entity's model to a precached model on the map."
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"disableX360":
				{
					typename = "boolean"
					shortinfo = "Disable for Xbox 360"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "If Yes, disables this entity on the Xbox 360 version of Source."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"LagCompensate":
				{
					typename = "boolean"
					shortinfo = "Lag Compensation"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "Set to Yes to lag compensate this entity. Should be used very sparingly!"
					choices = {}
				}
				"is_autoaim_target":
				{
					typename = "boolean"
					shortinfo = "Is Automatic-Aim Target"
					extra = "(in all games since [Counter-Strike: Global Offensive])�!FGD"
					notes = ""
					description = "If set to 1, this entity will slow down aiming movement for consoles and joystick controllers when the entity is under the crosshairs."
					choices = {}
				}
			}
		}
		
	}
	cycler = 
	{
		cycler = 
		{
			description = "cycler is a  point entity available in all Source games."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Not Solid"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		
	}
	gibshooter = 
	{
		gibshooter = 
		{
			description = "gibshooter is a  point entity available in all Source games. It shoots out giblets. Style of body part depends on language type.[Clarify]\n In code, it is represented by class CGibShooter, defined in effects.cpp."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Repeatable"
					notes = ""
				}
				"2":
				{
					category = ""
					description = "On fire"
					notes = ""
				}
				"4":
				{
					category = ""
					description = "Fade out even when in player's view"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"m_iGibs":
				{
					typename = "integer"
					shortinfo = "Number of Gibs"
					extra = ""
					notes = ""
					description = "Total number of gibs to shoot each time the entity should shoot."
					choices = {}
				}
				"delay":
				{
					typename = "string"
					shortinfo = "Delay between shots"
					extra = ""
					notes = ""
					description = "Delay (in seconds) between shooting each gib. If 0, all gibs shoot at once."
					choices = {}
				}
				"gibangles":
				{
					typename = "string"
					shortinfo = "Gib Angles (Pitch Yaw Roll)"
					extra = ""
					notes = ""
					description = "The orientation of the spawned gibs."
					choices = {}
				}
				"gibanglevelocity":
				{
					typename = "string"
					shortinfo = "Max angular velocity"
					extra = ""
					notes = ""
					description = "How fast (degrees/sec) the gibs should spin. They will spin on the x and y axes between 10% and 100% of this speed."
					choices = {}
				}
				"m_flVelocity":
				{
					typename = "integer"
					shortinfo = "Gib Velocity"
					extra = ""
					notes = ""
					description = "Speed of the fired gibs."
					choices = {}
				}
				"m_flVariance":
				{
					typename = "string"
					shortinfo = "Course Variance"
					extra = ""
					notes = ""
					description = "How much variance in the direction gibs are fired."
					choices = {}
				}
				"m_flGibLife":
				{
					typename = "string"
					shortinfo = "Gib Life"
					extra = ""
					notes = ""
					description = "Time in seconds for gibs to live +/- 5%."
					choices = {}
				}
				"lightingorigin":
				{
					typename = "targetname"
					shortinfo = "Lighting Origin"
					extra = ""
					notes = ""
					description = "Select an info_lighting to specify a location to sample lighting from for all gibs spawned by this shooter, instead of their own origins."
					choices = {}
				}
				"Simulation":
				{
					typename = "choices"
					shortinfo = "Physics"
					extra = ""
					notes = ""
					description = "How the gibs will be physically simulated.\n0: Point (very cheap) (gib)\n1: Physics (gib)\n2: Ragdoll (raggib)"
					choices = {}
				}
				"nogibshadows":
				{
					typename = "boolean"
					shortinfo = "Disable Shadows"
					extra = "!FGD"
					notes = ""
					description = "Set to 1 to disable render target shadows on gibs."
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"disableX360":
				{
					typename = "boolean"
					shortinfo = "Disable for Xbox 360"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "If Yes, disables this entity on the Xbox 360 version of Source."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"LagCompensate":
				{
					typename = "boolean"
					shortinfo = "Lag Compensation"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "Set to Yes to lag compensate this entity. Should be used very sparingly!"
					choices = {}
				}
				"is_autoaim_target":
				{
					typename = "boolean"
					shortinfo = "Is Automatic-Aim Target"
					extra = "(in all games since [Counter-Strike: Global Offensive])�!FGD"
					notes = ""
					description = "If set to 1, this entity will slow down aiming movement for consoles and joystick controllers when the entity is under the crosshairs."
					choices = {}
				}
			}
		}
		
	}
	hammer = 
	{
		hammer_updateignorelist = 
		{
			description = "hammer_updateignorelist is a  point entity available in all Source games since [Half-Life 2: Episode Two][Half-Life 2: Episode Two] Half-Life 2: Episode Two. It specifies entities that are to be ignored by the hammer_update_safe_entities console command. Enter the targetnames of entities that you want to exclude into the list of fields here. Several of these may exist in a map."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "targetname"
					shortinfo = "IgnoredName 01  to IgnoredName 16"
					extra = ""
					notes = ""
					description = "Do not send this entity's information back to hammer during hammer_update_safe_entities"
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		
	}
	infodecal = 
	{
		infodecal = 
		{
			description = "infodecal is a  point entity available in all Source games. It is used to place a decal in a map."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "decal"
					shortinfo = "texture"
					extra = ""
					notes = ""
					description = "The image to apply as a decal."
					choices = {}
				}
				"can_be_replaced":
				{
					typename = "boolean"
					shortinfo = "Low Priority"
					extra = ""
					notes = ""
					description = "If true, allows the decal to be removed to accommodate newly-placed decals. Default behavior is false (high priority), meaning it is always present."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		
	}
	keyframe = 
	{
		keyframe_rope = 
		{
			description = "keyframe_rope is a  point entity available in all Source games. It is a node entity that marks a point in a rope. Typically, the first node in the rope is a move_rope entity, followed by 1 or more keyframe_ropes. However, the two are identical in code and freely interchangeable."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Auto Resize"
					notes = "Details: Allows the rope to 'stretch' as the entity moves."
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "choices"
					shortinfo = "Position Interpolator"
					extra = "!FGD"
					notes = "Note: This is only in the FGD for move_rope, but is functional on both entities."
					description = "Curve Type. Currently only type 2 (Rope) is fully supported.\n0�: Linear\n1�: Catmull-Rom Spline\n2�: Rope"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "boolean"
					shortinfo = "UseWind"
					extra = "(in all games since [Alien Swarm])�!FGD"
					notes = ""
					description = "When set to yes, the rope sways with the settings specified in the env_wind entity. Replaces 'Disable Wind' in games post Alien Swarm."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma.�Warning:�In [Counter-Strike: Source], parenting this entity to another can break your map."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "targetname"
					shortinfo = "Next KeyFrame"
					extra = ""
					notes = ""
					description = "Name of the next keyframe along this keyframe path."
					choices = {}
				}
				"units_per_second":
				{
					typename = "integer"
					shortinfo = "Speed"
					extra = ""
					notes = ""
					description = "KeyFrame moving speed."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "integer"
					shortinfo = "Slack"
					extra = ""
					notes = ""
					description = "How much extra length the rope has (by default it has the length between its two endpoints in the editor)."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_5":
				{
					typename = "choices"
					shortinfo = "Type"
					extra = ""
					notes = ""
					description = "Rope type.\n0�: Rope\n1�: Semi-rigid\n2�: Rigid"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_6":
				{
					typename = "integer"
					shortinfo = "Subdivision"
					extra = ""
					notes = ""
					description = "Number of subdivisions between each rope segment. Maximum value is 8. Higher values make smoother ropes, but are slower to render."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_7":
				{
					typename = "boolean"
					shortinfo = "Barbed"
					extra = ""
					notes = ""
					description = "Test effect that makes the rope look sharper and more barbed."
					choices = {}
				}
				"1-64":
				{
					typename = "string"
					shortinfo = "Width"
					extra = ""
					notes = ""
					description = "Width of the rope.  Decimal values lower than 1 may also be used."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_8":
				{
					typename = "string"
					shortinfo = "Texture Scale"
					extra = ""
					notes = ""
					description = "This changes the texture resolution. The default resolution is 4 pixels per inch. Larger values stretch the texture and smaller values scrunch it up."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_9":
				{
					typename = "boolean"
					shortinfo = "Collide with world"
					extra = ""
					notes = ""
					description = "If set, the rope collides with world. Ropes never collide with anything else."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_10":
				{
					typename = "boolean"
					shortinfo = "Start Dangling"
					extra = ""
					notes = ""
					description = "If set, the rope starts out detached from its target endpoint."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_11":
				{
					typename = "boolean"
					shortinfo = "Breakable"
					extra = ""
					notes = ""
					description = "If set, the rope can be detached from either endpoint when shot. �Note:�If collide with world is set, the rope will not appear to break if the endpoint touches world geometry. This includes touching vertices and edges of brushes as well as being placed inside them."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_12":
				{
					typename = "material"
					shortinfo = "Rope Material"
					extra = ""
					notes = ""
					description = "The material to use when rendering the rope. �Note:�Source will not render ropes using the cable/chain.vmt material."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_13":
				{
					typename = "boolean"
					shortinfo = "Disable Wind"
					extra = ""
					notes = ""
					description = "If set, the rope will no longer act as though it's being affected by wind."
					choices = {}
				}
				"mindxlevel":
				{
					typename = "choices"
					shortinfo = "Minimum DX Level"
					extra = ""
					notes = ""
					description = "The entity will not exist if the engine is running outside the given range of DirectX Versions. Replaced by SystemLevelChoice from [Left 4 Dead] Left 4 Dead onwards.\n�Warning:�If these are used, the object may break when the user switches their DirectX settings."
					choices = {}
				}
				"maxdxlevel":
				{
					typename = "choices"
					shortinfo = "Maximum DX Level"
					extra = ""
					notes = ""
					description = "Default (no bounding)\nDX7\nDX8\nDX8.1\nDX9 SM2\nDX9 SM3"
					choices = {}
				}
			}
		}
		keyframe_track = 
		{
			description = "keyframe_track is a  point entity available in all Source games."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "targetname"
					shortinfo = "Next KeyFrame"
					extra = ""
					notes = ""
					description = "Name of the next keyframe along this keyframe path."
					choices = {}
				}
				"units_per_second":
				{
					typename = "integer"
					shortinfo = "Speed"
					extra = ""
					notes = ""
					description = "KeyFrame moving speed."
					choices = {}
				}
			}
		}
		
	}
	light = 
	{
		light = 
		{
			description = "light is a  point entity available in all Source games. It creates an invisible, static light source that shines in all directions."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Initially dark"
					notes = "Details: Spawns with the light turned off, so a light switch or similar can turn it on."
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"target":
				{
					typename = "targetname"
					shortinfo = "Entity To Point At"
					extra = "[Obsolete]"
					notes = ""
					description = "Deprecated.�Entity to point this light at. Non-functional, as this entity casts light in all directions, all the time."
					choices = {}
				}
				"_distance":
				{
					typename = "integer"
					shortinfo = "Maximum Distance"
					extra = ""
					notes = ""
					description = "This is the distance that light is allowed to cast, in inches. Non-functional in [Source][Source] Source 2013 and later, use 50 and 0 percent falloff instead."
					choices = {}
				}
				"_light":
				{
					typename = "color255_+_int"
					shortinfo = "Brightness"
					extra = ""
					notes = ""
					description = "The RGB color and brightness of the light. Colors must be between 0 and 255; brightness can be anything."
					choices = {}
				}
				"_lightHDR":
				{
					typename = "color255_+_int"
					shortinfo = "BrightnessHDR"
					extra = ""
					notes = ""
					description = "Brightness override used in HDR mode. Default is -1 -1 -1 1, which means no change.\n�Warning:�The fourth digit must be positive. Otherwise all light will be sucked out of your map!"
					choices = {}
				}
				"_lightHDRscale":
				{
					typename = "float"
					shortinfo = "BrightnessScaleHDR"
					extra = ""
					notes = ""
					description = "A simple intensity multiplier used when compiling HDR lighting."
					choices = {}
				}
				"style":
				{
					typename = "choices"
					shortinfo = "Appearance"
					extra = ""
					notes = ""
					description = "Light Appearances\n\n\nLiteral Value\nDescription\nSequence\nPreview\n\n\n0\nNormal\nm\nSequence 0.gif\n\n\n10\nFluorescent flicker\nmmamammmmammamamaaamammma\nSequence 10.gif\n\n\n2\nSlow, strong pulse\nabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcba\nSequence 2.gif\n\n\n11\nSlow pulse, noblack\nabcdefghijklmnopqrrqponmlkjihgfedcba\nSequence 11.gif\n\n\n5\nGentle pulse\njklmnopqrstuvwxyzyxwvutsrqponmlkj\nSequence 5.gif\n\n\n1\nFlicker A\nmmnmmommommnonmmonqnmmo\nSequence 1.gif\n\n\n6\nFlicker B\nnmonqnmomnmomomno\nSequence 6.gif\n\n\n3\nCandle A\nmmmmmaaaaammmmmaaaaaabcdefgabcdefg\nSequence 3.gif\n\n\n7\nCandle B\nmmmaaaabcdefgmmmmaaaammmaamm\nSequence 7.gif\n\n\n8\nCandle C\nmmmaaammmaaammmabcdefaaaammmmabcdefmmmaaaa\nSequence 8.gif\n\n\n4\nFast strobe\nmamamamamama\nSequence 4.gif\n\n\n9\nSlow strobe\naaaaaaaazzzzzzzz\nSequence 9.gif\n\n\n12 !FGD\nUnderwater light mutation\nmmnnmmnnnmmnn\nSequence 12.gif"
					choices = {}
				}
				"pattern":
				{
					typename = "string"
					shortinfo = "Custom Appearance"
					extra = ""
					notes = ""
					description = "A string of characters, like a sequence of piano keys, that define a pattern of brightness. a is dark and z is full intensity. Applies only to lights with a targetname."
					choices = {}
				}
				"_constant_attn":
				{
					typename = "float"
					shortinfo = "Constant"
					extra = ""
					notes = ""
					description = ""
					choices = {}
				}
				"_linear_attn":
				{
					typename = "float"
					shortinfo = "Linear"
					extra = ""
					notes = ""
					description = ""
					choices = {}
				}
				"_quadratic_attn":
				{
					typename = "float"
					shortinfo = "Quadratic"
					extra = ""
					notes = ""
					description = "These three values determine how the intensity of the emitted light falls off over distance. See Constant-Linear-Quadratic Falloff."
					choices = {}
				}
				"_fifty_percent_distance)":
				{
					typename = "string"
					shortinfo = "50 percent falloff distance"
					extra = ""
					notes = ""
					description = ""
					choices = {}
				}
				"_zero_percent_distance":
				{
					typename = "string"
					shortinfo = "0 percent falloff distance"
					extra = ""
					notes = ""
					description = "Distances at which brightness should have fallen to 50% and (1/256)% respectively. Overrides Linear/Constant/Quadratic parameters if non-zero.\n�Bug:�Using this setting will sometimes not work, which may or may not be related to using the light inside of an instance. Collapsing the instance and messing with the light's falloff values seems to help."
					choices = {}
				}
				"_hardfalloff":
				{
					typename = "boolean"
					shortinfo = "Hard falloff"
					extra = ""
					notes = ""
					description = "Causes lights to fall to exactly zero beyond the 0% distance. May cause unrealistic lighting if not used carefully."
					choices = {}
				}
				"_castentityshadow":
				{
					typename = "boolean"
					shortinfo = "Cast entity shadows"
					extra = "(in all games since [Left 4 Dead])�(also in [Garry's Mod])"
					notes = ""
					description = "Allows the light to modify the direction of nearby render-to-texture shadows so that they always point away from its origin. See also shadow_control.\n�Note:�This keyvalue may not be available in some FGDs."
					choices = {}
				}
				"_shadoworiginoffset":
				{
					typename = "vector"
					shortinfo = "Shadow cast offset"
					extra = "(in all games since [Left 4 Dead])"
					notes = ""
					description = "A world-space offset that gets applied to the light origin when casting entity shadows. Useful for dealing with funny-looking shadows from very low lights: Just offset up the z axis. Default 0 0 0.\n�Note:�This keyvalue may not be available in some FGDs."
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"disableX360":
				{
					typename = "boolean"
					shortinfo = "Disable for Xbox 360"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "If Yes, disables this entity on the Xbox 360 version of Source."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"LagCompensate":
				{
					typename = "boolean"
					shortinfo = "Lag Compensation"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "Set to Yes to lag compensate this entity. Should be used very sparingly!"
					choices = {}
				}
				"is_autoaim_target":
				{
					typename = "boolean"
					shortinfo = "Is Automatic-Aim Target"
					extra = "(in all games since [Counter-Strike: Global Offensive])�!FGD"
					notes = ""
					description = "If set to 1, this entity will slow down aiming movement for consoles and joystick controllers when the entity is under the crosshairs."
					choices = {}
				}
			}
		}
		light_directional = 
		{
			description = "light_directional is a internal point entity available in all Source games since [Left 4 Dead] Left 4 Dead. It is a directional light with no falloff, similar to the direct lighting of light_environment."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"pitch":
				{
					typename = "integer"
					shortinfo = "Pitch"
					extra = ""
					notes = ""
					description = "The downward pitch of the light from the sun. 0 is horizontal, -90 is straight down."
					choices = {}
				}
				"_light":
				{
					typename = "color255_+_int"
					shortinfo = "Brightness"
					extra = ""
					notes = ""
					description = "The RGB color and brightness of the light. Colors must be between 0 and 255; brightness can be anything."
					choices = {}
				}
				"_lightHDR":
				{
					typename = "color255_+_int"
					shortinfo = "BrightnessHDR"
					extra = ""
					notes = ""
					description = "Brightness override used in HDR mode. Default is -1 -1 -1 1, which means no change.\n�Warning:�The fourth digit must be positive. Otherwise all light will be sucked out of your map!"
					choices = {}
				}
				"_lightHDRscale":
				{
					typename = "float"
					shortinfo = "BrightnessScaleHDR"
					extra = ""
					notes = ""
					description = "Amount to scale the light by when compiling for HDR."
					choices = {}
				}
				"SunSpreadAngle":
				{
					typename = "float"
					shortinfo = "SpreadAngle"
					extra = ""
					notes = ""
					description = "The angular extent of the light for casting soft shadows. Higher numbers are more diffuse. 5 is a good starting value."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
			}
		}
		light_dynamic = 
		{
			description = "light_dynamic is a  point entity available in all Source games. It is an invisible light source that changes over time. Can be turned on and off through inputs, and can aim at any object, including moving ones. Dynamic lights are calculated on the fly in the game, which means they have a higher processing cost but are much more flexible than static lighting. It is also the only entity except env_projectedtexture that can light up brushes in real-time (but it doesn't replace their original lighting)."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Do not light world (better perf)"
					notes = ""
				}
				"2":
				{
					category = ""
					description = "Do not light models"
					notes = ""
				}
				"4":
				{
					category = ""
					description = "Add Displacement Alpha"
					notes = ""
				}
				"8":
				{
					category = ""
					description = "Subtract Displacement Alpha"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"target":
				{
					typename = "targetname"
					shortinfo = "Entity to point at"
					extra = ""
					notes = ""
					description = "The name of an entity in the map that the dynamic light will point at."
					choices = {}
				}
				"_light":
				{
					typename = "color255"
					shortinfo = "Light color"
					extra = ""
					notes = ""
					description = "The RGB render color of the spotlight. Colors must be between 0 and 255."
					choices = {}
				}
				"brightness":
				{
					typename = "integer"
					shortinfo = "Light brightness"
					extra = ""
					notes = ""
					description = "The intensity of the spotlight."
					choices = {}
				}
				"_inner_cone":
				{
					typename = "integer"
					shortinfo = "Inner (bright) angle"
					extra = ""
					notes = ""
					description = "The angles of the inner spotlight beam. 0 makes it omnidirectional."
					choices = {}
				}
				"_cone":
				{
					typename = "integer"
					shortinfo = "Outer (fading) angle"
					extra = ""
					notes = ""
					description = "The angles of the outer spotlight beam. 0 makes it omnidirectional."
					choices = {}
				}
				"pitch":
				{
					typename = "integer"
					shortinfo = "Pitch"
					extra = ""
					notes = ""
					description = "Used instead of Pitch Yaw Roll's value for reasons unknown."
					choices = {}
				}
				"distance":
				{
					typename = "float"
					shortinfo = "Maximum distance"
					extra = ""
					notes = ""
					description = "This is the distance that light is allowed to cast, in inches."
					choices = {}
				}
				"spotlight_radius":
				{
					typename = "float"
					shortinfo = "Spotlight end radius"
					extra = ""
					notes = ""
					description = "This is the radius of the light, in inches, at the object that it is hitting."
					choices = {}
				}
				"style":
				{
					typename = "choices"
					shortinfo = "Appearance"
					extra = ""
					notes = ""
					description = "Light Appearances\n\n\nLiteral Value\nDescription\nSequence\nPreview\n\n\n0\nNormal\nm\nSequence 0.gif\n\n\n10\nFluorescent flicker\nmmamammmmammamamaaamammma\nSequence 10.gif\n\n\n2\nSlow, strong pulse\nabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcba\nSequence 2.gif\n\n\n11\nSlow pulse, noblack\nabcdefghijklmnopqrrqponmlkjihgfedcba\nSequence 11.gif\n\n\n5\nGentle pulse\njklmnopqrstuvwxyzyxwvutsrqponmlkj\nSequence 5.gif\n\n\n1\nFlicker A\nmmnmmommommnonmmonqnmmo\nSequence 1.gif\n\n\n6\nFlicker B\nnmonqnmomnmomomno\nSequence 6.gif\n\n\n3\nCandle A\nmmmmmaaaaammmmmaaaaaabcdefgabcdefg\nSequence 3.gif\n\n\n7\nCandle B\nmmmaaaabcdefgmmmmaaaammmaamm\nSequence 7.gif\n\n\n8\nCandle C\nmmmaaammmaaammmabcdefaaaammmmabcdefmmmaaaa\nSequence 8.gif\n\n\n4\nFast strobe\nmamamamamama\nSequence 4.gif\n\n\n9\nSlow strobe\naaaaaaaazzzzzzzz\nSequence 9.gif\n\n\n12 !FGD\nUnderwater light mutation\nmmnnmmnnnmmnn\nSequence 12.gif"
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"disableX360":
				{
					typename = "boolean"
					shortinfo = "Disable for Xbox 360"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "If Yes, disables this entity on the Xbox 360 version of Source."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"LagCompensate":
				{
					typename = "boolean"
					shortinfo = "Lag Compensation"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "Set to Yes to lag compensate this entity. Should be used very sparingly!"
					choices = {}
				}
				"is_autoaim_target":
				{
					typename = "boolean"
					shortinfo = "Is Automatic-Aim Target"
					extra = "(in all games since [Counter-Strike: Global Offensive])�!FGD"
					notes = ""
					description = "If set to 1, this entity will slow down aiming movement for consoles and joystick controllers when the entity is under the crosshairs."
					choices = {}
				}
			}
		}
		light_environment = 
		{
			description = "light_environment is a  point entity available in all Source games. It casts parallel directional lighting from the toolsskybox texture to approximate the light cast from the Sun or Moon."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Initially Dark�!FGD"
					notes = "Details: Only works when the light_environment is named, and it must be added with SmartEdit off by putting in a 'spawnflags' key with a value of 1 as it is missing from Valve's FGD."
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"pitch":
				{
					typename = "angle"
					shortinfo = "Pitch"
					extra = ""
					notes = ""
					description = "Overrides the pitch value in Angles, even if left at 0, so it needs to be specified. Contrary to Angles, the rotation of this pitch is measured counter-clockwise from the horizontal, so that 90 is straight up, while -90 is straight down. (It's simply the negative of a normal pitch value.)"
					choices = {}
				}
				"_light":
				{
					typename = "color255_+_int"
					shortinfo = "Brightness"
					extra = ""
					notes = ""
					description = "Color and brightness of the direct sunlight."
					choices = {}
				}
				"_ambient":
				{
					typename = "color255_+_int"
					shortinfo = "Ambient"
					extra = ""
					notes = ""
					description = "Color and brightness of the diffuse skylight."
					choices = {}
				}
				"_lightHDR":
				{
					typename = "color255_+_int"
					shortinfo = "BrightnessHDR"
					extra = ""
					notes = ""
					description = "Override for Brightness when compiling HDR lighting. Defaults to -1 -1 -1 1, which means 'same as LDR'."
					choices = {}
				}
				"_lightscaleHDR":
				{
					typename = "float"
					shortinfo = "BrightnessScaleHDR"
					extra = ""
					notes = ""
					description = "Amount to scale the direct light by when compiling for HDR."
					choices = {}
				}
				"_ambientHDR":
				{
					typename = "color255_+_int"
					shortinfo = "AmbientHDR"
					extra = ""
					notes = ""
					description = "Override for Ambient when compiling HDR lighting. Defaults to -1 -1 -1 1, which means 'same as LDR'."
					choices = {}
				}
				"_AmbientScaleHDR":
				{
					typename = "float"
					shortinfo = "AmbientScaleHDR"
					extra = ""
					notes = ""
					description = "Amount to scale the ambient light by when compiling for HDR."
					choices = {}
				}
				"SunSpreadAngle":
				{
					typename = "float"
					shortinfo = "SunSpreadAngle"
					extra = "(in all games since [Half-Life 2: Episode Two][Half-Life 2: Episode Two])"
					notes = ""
					description = "The angular extent of the sun for casting soft shadows. Higher numbers are more diffuse. 5 is a good starting value. Remember: on cloudy days, the shadows will be blurred because the sunlight is being diffused by clouds. Try 90 for hazy days, and use 135 for cloudy days, rain and fog. If you're trying a night atmosphere, sometimes you'll need up to 180. You'll also have to turn down the shadow alpha in your shadow_control entity - try changing the Shadow Color variable to something such as 50 50 50."
					choices = {}
				}
				"specularcolor":
				{
					typename = "color255"
					shortinfo = "Specular Color"
					extra = "(only in [Insurgency][Day of Infamy])"
					notes = ""
					description = "Color of the light that reflects off of certain surfaces. (i.e. water)."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
			}
		}
		light_spot = 
		{
			description = "light_spot is a  point entity available in all Source games. It is a cone-shaped, invisible light source. Can be turned on and off through inputs, though switchable lights may cause lightmap errors. This is a static spotlight that can be pointed at another entity."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Initially dark"
					notes = "Details: Spawns with the light turned off, so a light switch or similar can turn it on."
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"target":
				{
					typename = "targetname"
					shortinfo = "Entity to point at"
					extra = ""
					notes = ""
					description = "The name of an entity in the map that the spotlight will point at. This will override the spotlight's angles."
					choices = {}
				}
				"_inner_cone":
				{
					typename = "integer"
					shortinfo = "Inner (bright) angle"
					extra = ""
					notes = ""
					description = "The angles of the inner spotlight beam.�Note:�Value larger than 90 is interpreted as 90."
					choices = {}
				}
				"_cone":
				{
					typename = "integer"
					shortinfo = "Outer (fading) angle"
					extra = ""
					notes = ""
					description = "The angles of the outer spotlight beam.�Note:�Value larger than 90 is interpreted as 90."
					choices = {}
				}
				"_exponent":
				{
					typename = "integer"
					shortinfo = "Focus"
					extra = ""
					notes = ""
					description = "Changes the distance between the umbra and penumbra cone. (higher values make the edge of the light more blurred.�Tip:�When increasing the Focus value to for example 5 you can use the spotlight as a directional fill light."
					choices = {}
				}
				"_distance":
				{
					typename = "integer"
					shortinfo = "Maximum distance"
					extra = ""
					notes = ""
					description = "This is the distance that light is allowed to cast, in inches. To do:�Relationship with 50%/0% falloff distances?"
					choices = {}
				}
				"pitch":
				{
					typename = "integer"
					shortinfo = "Pitch"
					extra = ""
					notes = "Bug: Pitch has unexpected behavior if the light_spot is inside of a rotated instance. This is solved by collapsing the instance, or by using the 'Entity to point at' keyvalue."
					description = "Used instead of Pitch Yaw Roll's value for reasons unknown."
					choices = {}
				}
				"_light":
				{
					typename = "color255_+_int"
					shortinfo = "Brightness"
					extra = ""
					notes = ""
					description = "The RGB color and brightness of the light. Colors must be between 0 and 255; brightness can be anything."
					choices = {}
				}
				"_lightHDR":
				{
					typename = "color255_+_int"
					shortinfo = "BrightnessHDR"
					extra = ""
					notes = ""
					description = "Brightness override used in HDR mode. Default is -1 -1 -1 1, which means no change.\n�Warning:�The fourth digit must be positive. Otherwise all light will be sucked out of your map!"
					choices = {}
				}
				"_lightHDRscale":
				{
					typename = "float"
					shortinfo = "BrightnessScaleHDR"
					extra = ""
					notes = ""
					description = "A simple intensity multiplier used when compiling HDR lighting."
					choices = {}
				}
				"style":
				{
					typename = "choices"
					shortinfo = "Appearance"
					extra = ""
					notes = ""
					description = "Light Appearances\n\n\nLiteral Value\nDescription\nSequence\nPreview\n\n\n0\nNormal\nm\nSequence 0.gif\n\n\n10\nFluorescent flicker\nmmamammmmammamamaaamammma\nSequence 10.gif\n\n\n2\nSlow, strong pulse\nabcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcba\nSequence 2.gif\n\n\n11\nSlow pulse, noblack\nabcdefghijklmnopqrrqponmlkjihgfedcba\nSequence 11.gif\n\n\n5\nGentle pulse\njklmnopqrstuvwxyzyxwvutsrqponmlkj\nSequence 5.gif\n\n\n1\nFlicker A\nmmnmmommommnonmmonqnmmo\nSequence 1.gif\n\n\n6\nFlicker B\nnmonqnmomnmomomno\nSequence 6.gif\n\n\n3\nCandle A\nmmmmmaaaaammmmmaaaaaabcdefgabcdefg\nSequence 3.gif\n\n\n7\nCandle B\nmmmaaaabcdefgmmmmaaaammmaamm\nSequence 7.gif\n\n\n8\nCandle C\nmmmaaammmaaammmabcdefaaaammmmabcdefmmmaaaa\nSequence 8.gif\n\n\n4\nFast strobe\nmamamamamama\nSequence 4.gif\n\n\n9\nSlow strobe\naaaaaaaazzzzzzzz\nSequence 9.gif\n\n\n12 !FGD\nUnderwater light mutation\nmmnnmmnnnmmnn\nSequence 12.gif"
					choices = {}
				}
				"pattern":
				{
					typename = "string"
					shortinfo = "Custom Appearance"
					extra = ""
					notes = ""
					description = "A string of characters, like a sequence of piano keys, that define a pattern of brightness. a is dark and z is full intensity. Applies only to lights with a targetname."
					choices = {}
				}
				"_constant_attn":
				{
					typename = "float"
					shortinfo = "Constant"
					extra = ""
					notes = ""
					description = ""
					choices = {}
				}
				"_linear_attn":
				{
					typename = "float"
					shortinfo = "Linear"
					extra = ""
					notes = ""
					description = ""
					choices = {}
				}
				"_quadratic_attn":
				{
					typename = "float"
					shortinfo = "Quadratic"
					extra = ""
					notes = ""
					description = "These three values determine how the intensity of the emitted light falls off over distance. See Constant-Linear-Quadratic Falloff."
					choices = {}
				}
				"_fifty_percent_distance)":
				{
					typename = "string"
					shortinfo = "50 percent falloff distance"
					extra = ""
					notes = ""
					description = ""
					choices = {}
				}
				"_zero_percent_distance":
				{
					typename = "string"
					shortinfo = "0 percent falloff distance"
					extra = ""
					notes = ""
					description = "Distances at which brightness should have fallen to 50% and (1/256)% respectively. Overrides Linear/Constant/Quadratic parameters if non-zero.\n�Bug:�Using this setting will sometimes not work, which may or may not be related to using the light inside of an instance. Collapsing the instance and messing with the light's falloff values seems to help."
					choices = {}
				}
				"_hardfalloff":
				{
					typename = "boolean"
					shortinfo = "Hard falloff"
					extra = ""
					notes = ""
					description = "Causes lights to fall to exactly zero beyond the 0% distance. May cause unrealistic lighting if not used carefully."
					choices = {}
				}
				"_castentityshadow":
				{
					typename = "boolean"
					shortinfo = "Cast entity shadows"
					extra = "(in all games since [Left 4 Dead])�(also in [Garry's Mod])"
					notes = ""
					description = "Allows the light to modify the direction of nearby render-to-texture shadows so that they always point away from its origin. See also shadow_control.\n�Note:�This keyvalue may not be available in some FGDs."
					choices = {}
				}
				"_shadoworiginoffset":
				{
					typename = "vector"
					shortinfo = "Shadow cast offset"
					extra = "(in all games since [Left 4 Dead])"
					notes = ""
					description = "A world-space offset that gets applied to the light origin when casting entity shadows. Useful for dealing with funny-looking shadows from very low lights: Just offset up the z axis. Default 0 0 0.\n�Note:�This keyvalue may not be available in some FGDs."
					choices = {}
				}
				"classname":
				{
					typename = "string"
					shortinfo = "Classname"
					extra = ""
					notes = ""
					description = "The classname defines the type of entity. Classnames can be changed using AddOutput, which will influence how the engine deals with the entity in certain circumstances."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The name that other entities refer to this entity by."
					choices = {}
				}
				"globalname":
				{
					typename = "string"
					shortinfo = "Global Entity Name"
					extra = ""
					notes = ""
					description = "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma. Every entity can be parented, even point entities. Entities which are parented will be forced to transition to the next map, such as from a trigger_transition. Some entities which aren't intended to be parented may not function correctly. phys_constraint can be used as a workaround to parenting."
					choices = {}
				}
				"origin":
				{
					typename = "coordinates"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (X Y Z)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.�Note:�This works on brush entities, although Hammer doesn't show the new angles."
					choices = {}
				}
				"spawnflags":
				{
					typename = "integer"
					shortinfo = "Flags"
					extra = ""
					notes = ""
					description = "Toggles features of an entity, its specific number is determined by the combination of flags added."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system contexts for this entity. Format is key:value,key:value,.... Contexts may be filtered."
					choices = {}
				}
				"effects":
				{
					typename = "integer"
					shortinfo = "Effects"
					extra = "!FGD"
					notes = ""
					description = "Combination of effect flags to use."
					choices = {}
				}
				"ltime":
				{
					typename = "float"
					shortinfo = "Local Time"
					extra = "!FGD"
					notes = ""
					description = "The local time of the entity, independent of the global clock. Used mainly for physics calculations."
					choices = {}
				}
				"nextthink":
				{
					typename = "float"
					shortinfo = "Next Think"
					extra = "!FGD"
					notes = ""
					description = "Amount of time before the entity thinks again."
					choices = {}
				}
				"hammerid":
				{
					typename = "integer"
					shortinfo = "Hammer ID"
					extra = "!FGD"
					notes = ""
					description = "The entity's Hammer ID. Mainly used by plugins and debugging commands, such as ent_keyvalue. Can be manually assigned with the 'hammerid' or 'id' keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
					choices = {}
				}
				"disableX360":
				{
					typename = "boolean"
					shortinfo = "Disable for Xbox 360"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "If Yes, disables this entity on the Xbox 360 version of Source."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"LagCompensate":
				{
					typename = "boolean"
					shortinfo = "Lag Compensation"
					extra = "(in all games since [Left 4 Dead 2])�!FGD"
					notes = ""
					description = "Set to Yes to lag compensate this entity. Should be used very sparingly!"
					choices = {}
				}
				"is_autoaim_target":
				{
					typename = "boolean"
					shortinfo = "Is Automatic-Aim Target"
					extra = "(in all games since [Counter-Strike: Global Offensive])�!FGD"
					notes = ""
					description = "If set to 1, this entity will slow down aiming movement for consoles and joystick controllers when the entity is under the crosshairs."
					choices = {}
				}
			}
		}
		
	}
	material = 
	{
		material_modify_control = 
		{
			description = "material_modify_control is a  point entity available in all Source games. It is used to modify arbitrary material properties in response to I/O events.\nFor the entity to work, its target material must have the MaterialModify or MaterialModifyAnimated proxy installed, and must be applied to an entity.\nCompare this with the env_texturetoggle entity that can control brushes or overlays by targetname.\nInstances of the Material to Modify on world geometry are controlled by the lowest-ID (first created in Hammer) material_modify_control, in addition to instances of the material on the material_modify_control's parent."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "string"
					shortinfo = "Material to modify"
					extra = ""
					notes = ""
					description = "Path to the VMT file you want to modify, relative to materials/ folder. Without .vmt suffix.�Bug:�Does not work if the VMT is just in materials/. Should be in a subfolder, like materials/effects/ for example."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "string"
					shortinfo = "Material variable to modify"
					extra = ""
					notes = ""
					description = "Name of the shader parameter you want to modify. Include $ symbol like how they are written in the VMT"
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		
	}
	math = 
	{
		math_colorblend = 
		{
			description = "math_colorblend is a  point entity available in all Source games. It is used to create a blend between two colors for controlling the color of another entity."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Ignore out of range input values"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "integer"
					shortinfo = "Minimum Valid Input Value"
					extra = ""
					notes = ""
					description = "Input values below this value will be ignored."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "integer"
					shortinfo = "Maximum Valid Input Value"
					extra = ""
					notes = ""
					description = "Input values above this value will be ignored."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "color255"
					shortinfo = "Output RGB color when input is min."
					extra = ""
					notes = ""
					description = "When the input value is equal to 'Minimum Valid Input Value', this is the output RGB color."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "color255"
					shortinfo = "Output RGB color when input is max."
					extra = ""
					notes = ""
					description = "When the input value is equal to 'Maximum Valid Input Value', this is the output RGB color."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		math_counter = 
		{
			description = "math_counter is a  point entity available in all Source games. It stores and manipulates a numerical value. It can trigger on reaching user-defined maximum or minimum values, or output its value every time it changes. It also has the ability to perform simple mathematical functions. When the math_counter is disabled, it will become read-only until re-enabled.\n In code, it is represented by class CMathCounter, defined in logicentities.cpp."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"startvalue":
				{
					typename = "float"
					shortinfo = "Initial Value"
					extra = ""
					notes = ""
					description = "Starting value for the counter."
					choices = {}
				}
				"min":
				{
					typename = "float"
					shortinfo = "Minimum Legal Value"
					extra = ""
					notes = ""
					description = "Minimum legal value for the counter. If min=0 and max=0, no clamping is performed."
					choices = {}
				}
				"max":
				{
					typename = "float"
					shortinfo = "Maximum Legal Value"
					extra = ""
					notes = ""
					description = "Maximum legal value for the counter. If min=0 and max=0, no clamping is performed."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"StartDisabled":
				{
					typename = "boolean"
					shortinfo = "Start Disabled"
					extra = ""
					notes = ""
					description = "Stay dormant until activated (probably with the Enable input)."
					choices = {}
				}
			}
		}
		math_remap = 
		{
			description = "math_remap is a  point entity available in all Source games. It remaps a range of input values to a given range of output values."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Ignore out of range input values"
					notes = ""
				}
				"2":
				{
					category = ""
					description = "Clamp output to output range"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "integer"
					shortinfo = "Minimum Valid Input Value"
					extra = ""
					notes = ""
					description = "Input values below this value will be ignored."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "integer"
					shortinfo = "Maximum Valid Input Value"
					extra = ""
					notes = ""
					description = "Input values above this value will be ignored."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "integer"
					shortinfo = "Output Value When Input Is Min."
					extra = ""
					notes = ""
					description = "When the input value is equal to 'Minimum Valid Input Value', this is the output value."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "integer"
					shortinfo = "Output Value When Input Is Max."
					extra = ""
					notes = "Note: These do not have to be in order - the math_remap will create an inverse relationship between the input and output if the output keyvalues are swapped."
					description = "When the input value is equal to 'Maximum Valid Input Value', this is the output value."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"StartDisabled":
				{
					typename = "boolean"
					shortinfo = "Start Disabled"
					extra = ""
					notes = ""
					description = "Stay dormant until activated (probably with the Enable input)."
					choices = {}
				}
			}
		}
		
	}
	momentary = 
	{
		momentary_rot_button = 
		{
			description = "momentary_rot_button is a  brush entity available in all Source games. It is designed to be used for rotating wheels, where the player can rotate them to arbitrary positions before stopping."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Not Solid"
					notes = ""
				}
				"32":
				{
					category = ""
					description = "Toggle (Disable Auto Return)"
					notes = ""
				}
				"64":
				{
					category = ""
					description = "X Axis"
					notes = ""
				}
				"128":
				{
					category = ""
					description = "Y Axis"
					notes = ""
				}
				"1024":
				{
					category = ""
					description = "Use Activates"
					notes = ""
				}
				"2048":
				{
					category = ""
					description = "Starts locked"
					notes = ""
				}
				"8192":
				{
					category = ""
					description = "Jiggle when used while locked"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"deg/sec":
				{
					typename = "integer"
					shortinfo = "Speed"
					extra = ""
					notes = ""
					description = "The amount, in degrees, that the wheel turns per second."
					choices = {}
				}
				"Obsolete":
				{
					typename = "string"
					shortinfo = "Master"
					extra = ""
					notes = ""
					description = "Legacy support: The name of a master entity. If the master hasn't been activated, this button cannot be used."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "choices"
					shortinfo = "Sounds"
					extra = ""
					notes = ""
					description = "Value\nDescription\n\n\n0\nNone\n\n\n1\nBig zap & Warmup\n\n\n2\nAccess Denied\n\n\n3\nAccess Granted\n\n\n4\nQuick Combolock\n\n\n5\nPower Deadbolt 1\n\n\n6\nPower Deadbolt 2\n\n\n7\nPlunger\n\n\n8\nSmall zap\n\n\n9\nKeycard Sound\n\n\n21\nSqueaky\n\n\n22\nSqueaky Pneumatic\n\n\n23\nRatchet Groan\n\n\n24\nClean Ratchet\n\n\n25\nGas Clunk"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "integer"
					shortinfo = "Distance"
					extra = ""
					notes = ""
					description = "The maximum amount, in degrees, that the wheel is allowed to rotate."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "integer"
					shortinfo = "Auto-return speed"
					extra = ""
					notes = ""
					description = "If the 'Toggle' spawnflag is not set, the speed at which the wheel auto-returns when left alone, in degrees per second."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "string"
					shortinfo = "Minimum Light Level"
					extra = ""
					notes = ""
					description = "The minimum level of ambient light that hits this brush."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_5":
				{
					typename = "float"
					shortinfo = "Start Position"
					extra = ""
					notes = ""
					description = "Postion when spawned. The value is a range between 0.0 and 1.0, where 0 is the unrotated position and 1 is the rotated position + 'Distance'."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_6":
				{
					typename = "choices"
					shortinfo = "Start Direction"
					extra = ""
					notes = ""
					description = "Which way the wheel turns.\n-1�: Forward\n1�: Backward"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_7":
				{
					typename = "boolean"
					shortinfo = "Solid BSP"
					extra = ""
					notes = ""
					description = "Set this if this brush is in hierarchy with a moving object of some kind, and the player can stand on this brush."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
				"origin":
				{
					typename = "origin"
					shortinfo = "Origin (X Y Z)"
					extra = ""
					notes = ""
					description = "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
				"rendermode":
				{
					typename = "choices"
					shortinfo = "Render Mode"
					extra = ""
					notes = ""
					description = "Set a non-standard rendering mode on this entity."
					choices = 
					{
						"0" : "Normal"
						"1" : "Color"
						"2" : "Texture"
						"3" : "Glow"
						"4" : "Solid/Alphatest"
						"5" : "Additive"
						"6" : "Removed, does nothing"
						"7" : "Additive Fractional Frame"
						"8" : "Alpha Add"
						"9" : "World Space Glow"
						"10" : "Don't Render"

					}
				}
				"renderamt":
				{
					typename = "integer"
					shortinfo = "Render FX / Transparency (0 - 255)"
					extra = ""
					notes = ""
					description = "Transparency amount, requires a Render Mode other than Normal. 0 is invisible, 255 is fully visible."
					choices = {}
				}
				"rendercolor":
				{
					typename = "color255"
					shortinfo = "Render Color (R G B)"
					extra = ""
					notes = ""
					description = "Color tint."
					choices = {}
				}
				"disablereceiveshadows":
				{
					typename = "boolean"
					shortinfo = "Disable Receiving Shadows"
					extra = ""
					notes = ""
					description = "Prevent the entity from receiving shadows on itself."
					choices = {}
				}
				"renderfx":
				{
					typename = "choices"
					shortinfo = "Render FX"
					extra = ""
					notes = ""
					description = "Preset pattern of appearance effects."
					choices = 
					{
						"0" : "None"
						"1" : "Slow Pulse"
						"2" : "Fast Pulse"
						"3" : "Slow Wide Pulse"
						"4" : "Fast Wide Pulse"
						"5" : "Slow Fade Away"
						"6" : "Fast Fade Away"
						"7" : "Slow Become Solid"
						"8" : "Fast Become Solid"
						"9" : "Slow Strobe"
						"10" : "Fast Strobe"
						"11" : "Faster Strobe"
						"12" : "Slow Flicker"
						"13" : "Fast Flicker"
						"14" : "Constant Glow"
						"15" : "Distort"
						"16" : "Hologram (Distort + fade)"
						"17" : "Scale Up"
						"18" : "Glowing Shell (OBSOLETE)"
						"19" : "Clamp Minimum Scale (OBSOLETE)"
						"20" : "Environmental Rain (OBSOLETE)"
						"21" : "Environmental Snow (OBSOLETE)"
						"22" : "Spotlight FX"
						"23" : "Ragdoll"
						"24" : "Fade Wider Pulse"

					}
				}
			}
		}
		
	}
	move = 
	{
		move_keyframed = 
		{
			description = "move_keyframed is a  point entity available in all Source games. Keyframed Move Behavior."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "targetname"
					shortinfo = "Next KeyFrame"
					extra = ""
					notes = ""
					description = "Name of the next keyframe along this keyframe path."
					choices = {}
				}
				"units_per_second":
				{
					typename = "integer"
					shortinfo = "Speed"
					extra = ""
					notes = ""
					description = "KeyFrame moving speed."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "choices"
					shortinfo = "Position Interpolator"
					extra = ""
					notes = ""
					description = "Interpolation method.\n0�: Linear\n1�: Catmull-Rom Spline"
					choices = {}
				}
			}
		}
		move_rope = 
		{
			description = "move_rope is a  point entity available in all Source games. It is a node entity that marks a point in a rope. Typically, the first node in the rope is a move_rope entity, followed by 1 or more keyframe_ropes. However, the two are identical in code and freely interchangeable."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Auto Resize"
					notes = "Details: Allows the rope to 'stretch' as the entity moves."
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "choices"
					shortinfo = "Position Interpolator"
					extra = ""
					notes = ""
					description = "Curve Type. Currently only type 2 (Rope) is fully supported.\n0�: Linear\n1�: Catmull-Rom Spline\n2�: Rope"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "boolean"
					shortinfo = "UseWind"
					extra = "(in all games since [Alien Swarm])�!FGD"
					notes = ""
					description = "When set to yes, the rope sways with the settings specified in the env_wind entity. Replaces 'Disable Wind' in games post Alien Swarm."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma.�Warning:�In [Counter-Strike: Source], parenting this entity to another can break your map."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "targetname"
					shortinfo = "Next KeyFrame"
					extra = ""
					notes = ""
					description = "Name of the next keyframe along this keyframe path."
					choices = {}
				}
				"units_per_second":
				{
					typename = "integer"
					shortinfo = "Speed"
					extra = ""
					notes = ""
					description = "KeyFrame moving speed."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "integer"
					shortinfo = "Slack"
					extra = ""
					notes = ""
					description = "How much extra length the rope has (by default it has the length between its two endpoints in the editor)."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_5":
				{
					typename = "choices"
					shortinfo = "Type"
					extra = ""
					notes = ""
					description = "Rope type.\n0�: Rope\n1�: Semi-rigid\n2�: Rigid"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_6":
				{
					typename = "integer"
					shortinfo = "Subdivision"
					extra = ""
					notes = ""
					description = "Number of subdivisions between each rope segment. Maximum value is 8. Higher values make smoother ropes, but are slower to render."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_7":
				{
					typename = "boolean"
					shortinfo = "Barbed"
					extra = ""
					notes = ""
					description = "Test effect that makes the rope look sharper and more barbed."
					choices = {}
				}
				"1-64":
				{
					typename = "string"
					shortinfo = "Width"
					extra = ""
					notes = ""
					description = "Width of the rope.  Decimal values lower than 1 may also be used."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_8":
				{
					typename = "string"
					shortinfo = "Texture Scale"
					extra = ""
					notes = ""
					description = "This changes the texture resolution. The default resolution is 4 pixels per inch. Larger values stretch the texture and smaller values scrunch it up."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_9":
				{
					typename = "boolean"
					shortinfo = "Collide with world"
					extra = ""
					notes = ""
					description = "If set, the rope collides with world. Ropes never collide with anything else."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_10":
				{
					typename = "boolean"
					shortinfo = "Start Dangling"
					extra = ""
					notes = ""
					description = "If set, the rope starts out detached from its target endpoint."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_11":
				{
					typename = "boolean"
					shortinfo = "Breakable"
					extra = ""
					notes = ""
					description = "If set, the rope can be detached from either endpoint when shot. �Note:�If collide with world is set, the rope will not appear to break if the endpoint touches world geometry. This includes touching vertices and edges of brushes as well as being placed inside them."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_12":
				{
					typename = "material"
					shortinfo = "Rope Material"
					extra = ""
					notes = ""
					description = "The material to use when rendering the rope. �Note:�Source will not render ropes using the cable/chain.vmt material."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_13":
				{
					typename = "boolean"
					shortinfo = "Disable Wind"
					extra = ""
					notes = ""
					description = "If set, the rope will no longer act as though it's being affected by wind."
					choices = {}
				}
				"mindxlevel":
				{
					typename = "choices"
					shortinfo = "Minimum DX Level"
					extra = ""
					notes = ""
					description = "The entity will not exist if the engine is running outside the given range of DirectX Versions. Replaced by SystemLevelChoice from [Left 4 Dead] Left 4 Dead onwards.\n�Warning:�If these are used, the object may break when the user switches their DirectX settings."
					choices = {}
				}
				"maxdxlevel":
				{
					typename = "choices"
					shortinfo = "Maximum DX Level"
					extra = ""
					notes = ""
					description = "Default (no bounding)\nDX7\nDX8\nDX8.1\nDX9 SM2\nDX9 SM3"
					choices = {}
				}
			}
		}
		move_track = 
		{
			description = "move_track is a  point entity available in all Source games. 'Track Move Behavior' Doesn't work. It is the first in a chain of some keyframe_track, however, this entity has been probably replaced by the path_track entity.\nIt acts in the same way the path_track is used, only with less options in how to control the train that passes on it. Therefor it is recommended to use path_tracks for higher control over the entities that will pass on it."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "integer"
					shortinfo = "Distance between the wheels"
					extra = ""
					notes = ""
					description = "Distance between the wheels."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "integer"
					shortinfo = "Damage done to blocking entities"
					extra = ""
					notes = ""
					description = "Damage per second."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "choices"
					shortinfo = "Turn to face down path"
					extra = ""
					notes = ""
					description = "Whether to turn to face down path.\n0�: Yes\n1�: No"
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "choices"
					shortinfo = "Position Interpolator"
					extra = ""
					notes = ""
					description = "Interpolation method.\n0�: Linear\n1�: Catmull-Rom Spline"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_5":
				{
					typename = "targetname"
					shortinfo = "Next KeyFrame"
					extra = ""
					notes = ""
					description = "Name of the next keyframe along this keyframe path."
					choices = {}
				}
				"units_per_second":
				{
					typename = "integer"
					shortinfo = "Speed"
					extra = ""
					notes = ""
					description = "KeyFrame moving speed."
					choices = {}
				}
			}
		}
		
	}
	npc = 
	{
		npc_furniture = 
		{
			description = "npc_furniture is a  point entity available in all Source games.\nIt is used when an otherwise inanimate object needs to synchronise animation with an NPC in a scene or scripted_sequence. This usually means a piece of furniture like a door that an NPC needs to manipulate. \nDescription: An entity used for non-NPCs that need to synchronise their animation with an NPC in a scripted_sequence. Usually a pieceof furniture or door that an NPC needs to manipulate within a scripted_sequence.\n\nThis entity is also used at the end of Portal for the camera fly-through prior to the end-game song."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Wait Till Seen"
					notes = "Details: Prevents this NPC from seeing (or being seen) until it enters a player's viewcone."
				}
				"2":
				{
					category = ""
					description = "Gag (No IDLE sounds until angry)"
					notes = ""
				}
				"4":
				{
					category = ""
					description = "Fall to ground (unchecked means *teleport* to ground)"
					notes = ""
				}
				"8":
				{
					category = ""
					description = "Drop Healthkit"
					notes = "Details: Causes this NPC to drop an item_healthvial upon dying."
				}
				"16":
				{
					category = ""
					description = "Efficient - Don't acquire enemies or avoid obstacles"
					notes = ""
				}
				"128":
				{
					category = ""
					description = "Wait For Script"
					notes = "Details: Forces this NPC to 'wait' in an idle state until it finishes playing a scripted_sequence."
				}
				"256":
				{
					category = ""
					description = "Long Visibility/Shoot"
					notes = "Details: By default, increases a NPC's sight range to 6,000 units and allows it to attack from anywhere within that distance."
				}
				"512":
				{
					category = ""
					description = "Fade Corpse"
					notes = ""
				}
				"1024":
				{
					category = ""
					description = "Think outside PVS"
					notes = "Details: Allows this NPC to run its regular AI outside of any player's PVS."
				}
				"2048":
				{
					category = ""
					description = "Template NPC"
					notes = "Details: Marks this NPC as a template for entities like npc_template_maker. The NPC will not spawn on its own. This is not needed for point_template."
				}
				"4096":
				{
					category = ""
					description = "Do Alternate collision for this NPC (player avoidance)"
					notes = "Details: Note:�This flag is disabled in episodic for player companions because the StartScripting input does this."
				}
				"8192":
				{
					category = ""
					description = "Don't drop weapons"
					notes = ""
				}
				"16384":
				{
					category = ""
					description = "Ignore player push�(in all games since [Source][Source])"
					notes = "Details: Don't give way to player"
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "model_path"
					shortinfo = "Model"
					extra = ""
					notes = ""
					description = "The model this entity should appear as."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "string"
					shortinfo = "Relationship"
					extra = "!FGD"
					notes = ""
					description = "Values for disposition are:\nD_HT: Hate\nD_FR: Fear\nD_LI: Like\nD_NU: Neutral"
					choices = {}
				}
				"target":
				{
					typename = "targetname"
					shortinfo = "Target Path Corner"
					extra = ""
					notes = ""
					description = "The path_corner that this NPC will move to after spawning."
					choices = {}
				}
				"squadname":
				{
					typename = "string"
					shortinfo = "Squad Name"
					extra = ""
					notes = ""
					description = "NPCs that are in the same squad (i.e. have matching squad names) will share information about enemies, and will take turns attacking and covering each other."
					choices = {}
				}
				"hintgroup":
				{
					typename = "string"
					shortinfo = "Hint Group"
					extra = ""
					notes = ""
					description = "Hint groups are used by NPCs to restrict their hint-node searching to a subset of the map's hint nodes. Only hint nodes with matching hint group names will be considered by this NPC."
					choices = {}
				}
				"hintlimiting":
				{
					typename = "boolean"
					shortinfo = "Hint Limit Nav"
					extra = ""
					notes = ""
					description = "Limits NPC to using specified hint group for navigation requests, but does not limit local navigation."
					choices = {}
				}
				"sleepstate":
				{
					typename = "choices"
					shortinfo = "Sleep State"
					extra = ""
					notes = ""
					description = "Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'.\n0: None\n1: Waiting for threat\n2: Waiting for PVS\n3: Waiting for input, ignore PVS\n4: Auto PVS\n5: Auto PVS after PVS"
					choices = {}
				}
				"wakeradius":
				{
					typename = "float"
					shortinfo = "Wake Radius"
					extra = ""
					notes = ""
					description = "Auto-wake if player within this distance"
					choices = {}
				}
				"wakesquad":
				{
					typename = "boolean"
					shortinfo = "Wake Squad"
					extra = ""
					notes = ""
					description = "Wake all of the NPCs squadmates if the NPC is woken"
					choices = {}
				}
				"enemyfilter":
				{
					typename = "targetname"
					shortinfo = "Enemy Filter"
					extra = ""
					notes = ""
					description = "Filter entity to test targets against"
					choices = {}
				}
				"ignoreunseenenemies":
				{
					typename = "boolean"
					shortinfo = "Ignore unseen enemies"
					extra = ""
					notes = ""
					description = "Prefer visible enemies, regardless of distance or relationship priority"
					choices = {}
				}
				"physdamagescale":
				{
					typename = "float"
					shortinfo = "Physics Impact Damage Scale"
					extra = ""
					notes = ""
					description = "Scales damage energy when this character is hit by a physics object. With a value of 0 the NPC will take no damage from physics."
					choices = {}
				}
				"damagefilter":
				{
					typename = "targetname"
					shortinfo = "Damage Filter"
					extra = ""
					notes = ""
					description = "Name of the filter_damage_type entity that controls which entities can damage us."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system context{s} for this entity. Format is key:value,key:value,... When this entity speaks, the list of keys & values will be passed to the response rules system."
					choices = {}
				}
				"disableshadows":
				{
					typename = "boolean"
					shortinfo = "Disable Shadows"
					extra = ""
					notes = ""
					description = "Prevents the entity from creating cheap render-to-texture shadows, or lightmap shadows if the entity is a prop_static. Does not affect shadow mapping."
					choices = {}
				}
				"disableshadowdepth":
				{
					typename = "boolean"
					shortinfo = "Disable ShadowDepth"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable rendering into shadow depth (for projected textures) for this entity."
					choices = {}
				}
				"shadowdepthnocache":
				{
					typename = "choices"
					shortinfo = "Projected Texture Cache"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to hint projected texture system whether it is sufficient to cache shadow volume of this entity or to force render it every frame instead.\n0�: Default\n1�: No cache - render every frame\n2�: Cache it - render only once"
					choices = {}
				}
				"disableflashlight":
				{
					typename = "boolean"
					shortinfo = "Disable flashlight"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable projected texture lighting and shadows on this entity."
					choices = {}
				}
				"rendermode":
				{
					typename = "choices"
					shortinfo = "Render Mode"
					extra = ""
					notes = ""
					description = "Set a non-standard rendering mode on this entity."
					choices = 
					{
						"0" : "Normal"
						"1" : "Color"
						"2" : "Texture"
						"3" : "Glow"
						"4" : "Solid/Alphatest"
						"5" : "Additive"
						"6" : "Removed, does nothing"
						"7" : "Additive Fractional Frame"
						"8" : "Alpha Add"
						"9" : "World Space Glow"
						"10" : "Don't Render"

					}
				}
			}
		}
		npc_puppet = 
		{
			description = "npc_puppet is a  point entity available in all Source games. It is a puppet entity that mimics the animations of a target NPC.\nFor example, place a combine soldier then an npc_puppet and edit the npc_puppet to follow the soldier and it will mimic whatever the soldier does."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Wait Till Seen"
					notes = "Details: Prevents this NPC from seeing (or being seen) until it enters a player's viewcone."
				}
				"2":
				{
					category = ""
					description = "Gag (No IDLE sounds until angry)"
					notes = ""
				}
				"4":
				{
					category = ""
					description = "Fall to ground (unchecked means *teleport* to ground)"
					notes = ""
				}
				"8":
				{
					category = ""
					description = "Drop Healthkit"
					notes = "Details: Causes this NPC to drop an item_healthvial upon dying."
				}
				"16":
				{
					category = ""
					description = "Efficient - Don't acquire enemies or avoid obstacles"
					notes = ""
				}
				"128":
				{
					category = ""
					description = "Wait For Script"
					notes = "Details: Forces this NPC to 'wait' in an idle state until it finishes playing a scripted_sequence."
				}
				"256":
				{
					category = ""
					description = "Long Visibility/Shoot"
					notes = "Details: By default, increases a NPC's sight range to 6,000 units and allows it to attack from anywhere within that distance."
				}
				"512":
				{
					category = ""
					description = "Fade Corpse"
					notes = ""
				}
				"1024":
				{
					category = ""
					description = "Think outside PVS"
					notes = "Details: Allows this NPC to run its regular AI outside of any player's PVS."
				}
				"2048":
				{
					category = ""
					description = "Template NPC"
					notes = "Details: Marks this NPC as a template for entities like npc_template_maker. The NPC will not spawn on its own. This is not needed for point_template."
				}
				"4096":
				{
					category = ""
					description = "Do Alternate collision for this NPC (player avoidance)"
					notes = "Details: Note:�This flag is disabled in episodic for player companions because the StartScripting input does this."
				}
				"8192":
				{
					category = ""
					description = "Don't drop weapons"
					notes = ""
				}
				"16384":
				{
					category = ""
					description = "Ignore player push�(in all games since [Source][Source])"
					notes = "Details: Don't give way to player"
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "targetname"
					shortinfo = "Animation target"
					extra = ""
					notes = ""
					description = "NPC entity to mimic."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "string"
					shortinfo = "Target attachment point name"
					extra = ""
					notes = ""
					description = ""
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "string"
					shortinfo = "Relationship"
					extra = "!FGD"
					notes = ""
					description = "Values for disposition are:\nD_HT: Hate\nD_FR: Fear\nD_LI: Like\nD_NU: Neutral"
					choices = {}
				}
				"target":
				{
					typename = "targetname"
					shortinfo = "Target Path Corner"
					extra = ""
					notes = ""
					description = "The path_corner that this NPC will move to after spawning."
					choices = {}
				}
				"squadname":
				{
					typename = "string"
					shortinfo = "Squad Name"
					extra = ""
					notes = ""
					description = "NPCs that are in the same squad (i.e. have matching squad names) will share information about enemies, and will take turns attacking and covering each other."
					choices = {}
				}
				"hintgroup":
				{
					typename = "string"
					shortinfo = "Hint Group"
					extra = ""
					notes = ""
					description = "Hint groups are used by NPCs to restrict their hint-node searching to a subset of the map's hint nodes. Only hint nodes with matching hint group names will be considered by this NPC."
					choices = {}
				}
				"hintlimiting":
				{
					typename = "boolean"
					shortinfo = "Hint Limit Nav"
					extra = ""
					notes = ""
					description = "Limits NPC to using specified hint group for navigation requests, but does not limit local navigation."
					choices = {}
				}
				"sleepstate":
				{
					typename = "choices"
					shortinfo = "Sleep State"
					extra = ""
					notes = ""
					description = "Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'.\n0: None\n1: Waiting for threat\n2: Waiting for PVS\n3: Waiting for input, ignore PVS\n4: Auto PVS\n5: Auto PVS after PVS"
					choices = {}
				}
				"wakeradius":
				{
					typename = "float"
					shortinfo = "Wake Radius"
					extra = ""
					notes = ""
					description = "Auto-wake if player within this distance"
					choices = {}
				}
				"wakesquad":
				{
					typename = "boolean"
					shortinfo = "Wake Squad"
					extra = ""
					notes = ""
					description = "Wake all of the NPCs squadmates if the NPC is woken"
					choices = {}
				}
				"enemyfilter":
				{
					typename = "targetname"
					shortinfo = "Enemy Filter"
					extra = ""
					notes = ""
					description = "Filter entity to test targets against"
					choices = {}
				}
				"ignoreunseenenemies":
				{
					typename = "boolean"
					shortinfo = "Ignore unseen enemies"
					extra = ""
					notes = ""
					description = "Prefer visible enemies, regardless of distance or relationship priority"
					choices = {}
				}
				"physdamagescale":
				{
					typename = "float"
					shortinfo = "Physics Impact Damage Scale"
					extra = ""
					notes = ""
					description = "Scales damage energy when this character is hit by a physics object. With a value of 0 the NPC will take no damage from physics."
					choices = {}
				}
				"damagefilter":
				{
					typename = "targetname"
					shortinfo = "Damage Filter"
					extra = ""
					notes = ""
					description = "Name of the filter_damage_type entity that controls which entities can damage us."
					choices = {}
				}
				"ResponseContext":
				{
					typename = "string"
					shortinfo = "Response Contexts"
					extra = ""
					notes = ""
					description = "Pre-defined response system context{s} for this entity. Format is key:value,key:value,... When this entity speaks, the list of keys & values will be passed to the response rules system."
					choices = {}
				}
				"disableshadows":
				{
					typename = "boolean"
					shortinfo = "Disable Shadows"
					extra = ""
					notes = ""
					description = "Prevents the entity from creating cheap render-to-texture shadows, or lightmap shadows if the entity is a prop_static. Does not affect shadow mapping."
					choices = {}
				}
				"disableshadowdepth":
				{
					typename = "boolean"
					shortinfo = "Disable ShadowDepth"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable rendering into shadow depth (for projected textures) for this entity."
					choices = {}
				}
				"shadowdepthnocache":
				{
					typename = "choices"
					shortinfo = "Projected Texture Cache"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to hint projected texture system whether it is sufficient to cache shadow volume of this entity or to force render it every frame instead.\n0�: Default\n1�: No cache - render every frame\n2�: Cache it - render only once"
					choices = {}
				}
				"disableflashlight":
				{
					typename = "boolean"
					shortinfo = "Disable flashlight"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable projected texture lighting and shadows on this entity."
					choices = {}
				}
				"rendermode":
				{
					typename = "choices"
					shortinfo = "Render Mode"
					extra = ""
					notes = ""
					description = "Set a non-standard rendering mode on this entity."
					choices = 
					{
						"0" : "Normal"
						"1" : "Color"
						"2" : "Texture"
						"3" : "Glow"
						"4" : "Solid/Alphatest"
						"5" : "Additive"
						"6" : "Removed, does nothing"
						"7" : "Additive Fractional Frame"
						"8" : "Alpha Add"
						"9" : "World Space Glow"
						"10" : "Don't Render"

					}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
				"model":
				{
					typename = "string"
					shortinfo = "World Model"
					extra = ""
					notes = ""
					description = "The model this entity should appear as. 128-character limit."
					choices = {}
				}
				"skin":
				{
					typename = "integer"
					shortinfo = "Skin"
					extra = ""
					notes = ""
					description = "Some models have multiple skins. This value selects from the index, starting with 0. �Tip:�Hammer's model browser automatically updates this value if you use it to view different skins."
					choices = {}
				}
				"modelscale":
				{
					typename = "float"
					shortinfo = "Model Scale"
					extra = "(in all games since [Source][Source])"
					notes = ""
					description = "A multiplier for the size of the model."
					choices = {}
				}
				"disableshadows":
				{
					typename = "boolean"
					shortinfo = "Disable Shadows"
					extra = ""
					notes = ""
					description = "Prevents the entity from creating cheap render-to-texture shadows, or lightmap shadows if the entity is a prop_static. Does not affect shadow mapping."
					choices = {}
				}
				"disableshadowdepth":
				{
					typename = "boolean"
					shortinfo = "Disable ShadowDepth"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable rendering into shadow depth (for projected textures) for this entity."
					choices = {}
				}
				"shadowdepthnocache":
				{
					typename = "choices"
					shortinfo = "Projected Texture Cache"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to hint projected texture system whether it is sufficient to cache shadow volume of this entity or to force render it every frame instead.\n0�: Default\n1�: No cache - render every frame\n2�: Cache it - render only once"
					choices = {}
				}
				"disableflashlight":
				{
					typename = "boolean"
					shortinfo = "Disable flashlight"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable projected texture lighting and shadows on this entity."
					choices = {}
				}
				"drawinfastreflection":
				{
					typename = "boolean"
					shortinfo = "Render in Fast Reflections"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "If enabled, this entity will render in fast water reflections (i.e. when a water material specifies $reflectonlymarkedentities) and in the world impostor pass."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
				"model":
				{
					typename = "string"
					shortinfo = "World Model"
					extra = ""
					notes = ""
					description = "The model this entity should appear as. 128-character limit."
					choices = {}
				}
				"skin":
				{
					typename = "integer"
					shortinfo = "Skin"
					extra = ""
					notes = ""
					description = "Some models have multiple skins. This value selects from the index, starting with 0. �Tip:�Hammer's model browser automatically updates this value if you use it to view different skins."
					choices = {}
				}
				"modelscale":
				{
					typename = "float"
					shortinfo = "Model Scale"
					extra = "(in all games since [Source][Source])"
					notes = ""
					description = "A multiplier for the size of the model."
					choices = {}
				}
				"disableshadows":
				{
					typename = "boolean"
					shortinfo = "Disable Shadows"
					extra = ""
					notes = ""
					description = "Prevents the entity from creating cheap render-to-texture shadows, or lightmap shadows if the entity is a prop_static. Does not affect shadow mapping."
					choices = {}
				}
				"disableshadowdepth":
				{
					typename = "boolean"
					shortinfo = "Disable ShadowDepth"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable rendering into shadow depth (for projected textures) for this entity."
					choices = {}
				}
				"shadowdepthnocache":
				{
					typename = "choices"
					shortinfo = "Projected Texture Cache"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to hint projected texture system whether it is sufficient to cache shadow volume of this entity or to force render it every frame instead.\n0�: Default\n1�: No cache - render every frame\n2�: Cache it - render only once"
					choices = {}
				}
				"disableflashlight":
				{
					typename = "boolean"
					shortinfo = "Disable flashlight"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable projected texture lighting and shadows on this entity."
					choices = {}
				}
				"drawinfastreflection":
				{
					typename = "boolean"
					shortinfo = "Render in Fast Reflections"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "If enabled, this entity will render in fast water reflections (i.e. when a water material specifies $reflectonlymarkedentities) and in the world impostor pass."
					choices = {}
				}
			}
		}
		npc_template_maker = 
		{
			description = "npc_template_maker is a  point entity available in all Source games. It is used for spawning clones of particular template NPCs when triggered, either to provide enemies for an ambush or to replace killed enemies in a standoff-type situation. For a simpler version which doesn't use template entities, see the npc_maker entity, or alternatively see the point_template entity which is more suited for spawning an entire squad into the appropriate positions.\nFor this to work, the target NPC must be marked as a template NPC. The easiest way to do this is to set the 'Template NPC' spawnflag on the NPC."
			flagnotes = ""
			flags = 
			{
				"256":
				{
					category = ""
					description = "Always use radius spawn"
					notes = ""
				}
				"512":
				{
					category = ""
					description = "Don't preload template models"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "targetname"
					shortinfo = "Name of template NPC"
					extra = ""
					notes = ""
					description = "Template NPC that this maker should be creating clones of."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "float"
					shortinfo = "Radius"
					extra = ""
					notes = ""
					description = "Radius around this maker within which NPCs are to be placed. Spawned NPCs will try and find empty space within this radius to spawn."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "targetname"
					shortinfo = "Name of Destination Group"
					extra = ""
					notes = ""
					description = "If you'd like spawned NPCs to be created at an info_npc_spawn_destination entity, enter the name of that entity here. If you have more than one destination entity by that name, the Destination Criteria will be used to select one from the group."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "UNKNOWN_VAL_TYPE"
					shortinfo = "Dest. Criterion"
					extra = "No extra short-information given"
					notes = ""
					description = "Visible to player?   <choices>\nShould the NPC try to spawn at a destination that the player can see? Only applicable if a Destination Group is being used.\n0�: Yes\n1�: No\n2�: Don't Care"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_5":
				{
					typename = "UNKNOWN_VAL_TYPE"
					shortinfo = "Dest. Criterion"
					extra = "No extra short-information given"
					notes = ""
					description = "Distance to player?   <choices>\nShould the NPC try to spawn nearest to or farthest from the player's current location? Only applicable if a Destination Group is being used.\n0�: Nearest\n1�: Farthest\n2�: Don't Care"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_6":
				{
					typename = "integer"
					shortinfo = "Minimum spawn distance from player"
					extra = ""
					notes = ""
					description = "The spawn destination node distance to the player will have to be further or equal than this value.�Note:�This parameter is ignored if the above 'Distance to player' criteria is set to 'Don't Care.'"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_7":
				{
					typename = "integer"
					shortinfo = "Num. of NPCs"
					extra = ""
					notes = ""
					description = "Number of NPCs that will spawn before this spawner is exhausted."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_8":
				{
					typename = "string"
					shortinfo = "Frequency"
					extra = ""
					notes = ""
					description = "How often (in seconds) a new NPC will be spawned. If set to -1, a new NPC will be made when the last NPC dies."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_9":
				{
					typename = "integer"
					shortinfo = "Max Live NPCs"
					extra = ""
					notes = ""
					description = "Maximum number of live children allowed at any one time (new ones will not be made until one dies). If set to -1, no limit is applied."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
				"StartDisabled":
				{
					typename = "boolean"
					shortinfo = "Start Disabled"
					extra = ""
					notes = ""
					description = "Stay dormant until activated (probably with the Enable input)."
					choices = {}
				}
			}
		}
		
	}
	path = 
	{
		path_track = 
		{
			description = "path_track is a  point entity available in all Source games. It is used to build paths for other entities to follow. Each path_track is a node on the path, each holding the name of the next path_track in the path.\nCloning (Shift-drag) this entity will activate a feature used to automatically and quickly create a track. This feature will alter both the Name keyvalue, and the Next Stop Target keyvalue, so that a track is created between the source and the clone. More specifically, Hammer will add a counter after the Name keyvalue of the clone, or increment this counter if it already exists, creating a unique name in a series. If a name is completely omitted, it will simply name the clone 'path'.\nIf a Next Stop Target keyvalue has been specified, it will also alter this keyvalue of the source, to the name of the clone, resulting in a track being drawn between them."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Disabled"
					notes = ""
				}
				"2":
				{
					category = ""
					description = "Fire once"
					notes = ""
				}
				"4":
				{
					category = ""
					description = "Branch Reverse (Alternative path is for going backwards, not forwards)"
					notes = ""
				}
				"8":
				{
					category = ""
					description = "Disable train"
					notes = ""
				}
				"16":
				{
					category = ""
					description = "Teleport to THIS path track"
					notes = ""
				}
				"32":
				{
					category = ""
					description = "TF2 payload uphill zone"
					notes = ""
				}
				"64":
				{
					category = ""
					description = "TF2 payload downhill zone"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"target":
				{
					typename = "targetname"
					shortinfo = "Next Stop Target"
					extra = ""
					notes = ""
					description = "The next path_track in the path."
					choices = {}
				}
				"altpath":
				{
					typename = "targetname"
					shortinfo = "Branch Path"
					extra = ""
					notes = ""
					description = "An alternative path_track to be the next node in the path. Useful for making branching paths. Use the ToggleAlternatePath / EnableAlternatePath inputs to make the alternative path active. �Bug:�If this value is set to anything that isn't a path_track, the game will crash without notice upon loading the level."
					choices = {}
				}
				"speed":
				{
					typename = "float"
					shortinfo = "New Train Speed"
					extra = ""
					notes = ""
					description = "When the train reaches this path_track, it will set its speed to this speed. Speeds higher than the max speed of the train are clamped."
					choices = {}
				}
				"radius":
				{
					typename = "float"
					shortinfo = "Path radius"
					extra = ""
					notes = ""
					description = "Used by NPCs who follow track paths (attack chopper/gunship). This tells them the maximum distance they're allowed to be from the path at this node."
					choices = {}
				}
				"orientationtype":
				{
					typename = "choices"
					shortinfo = "Orientation Type"
					extra = ""
					notes = ""
					description = "The way that the path follower faces as it moves through this path track.\n0�: No change\n1�: Face direction of motion\n2�: Face this path_track's angles"
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
			}
		}
		
	}
	phys = 
	{
		phys_ballsocket = 
		{
			description = "phys_ballsocket is a  point entity available in all Source games. It simulates a rigid connection between the centre of its constrained entities and its own location that prevents them from changing relative distance and makes their rotation point its own location.\nMost constraints, if given two entities, will constrain them directly to each other; phys_ballsocket will constrain them to itself. Despite this slightly different behaviour however, the entity still won't remain at a fixed location when two entities are attached. To do:�Can you constrain the constraint?\nExample map: sourcesdk_content/hl2/mapsrc/sdk_phys_ballsocket.vmf"
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "No Collision until break"
					notes = ""
				}
				"4":
				{
					category = ""
					description = "Start inactive"
					notes = ""
				}
				"8":
				{
					category = ""
					description = "Change mass to keep stable attachment to world"
					notes = ""
				}
				"16":
				{
					category = ""
					description = "Do not connect entities until turned on"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "targetname"
					shortinfo = "Entity 1"
					extra = ""
					notes = ""
					description = ""
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "targetname"
					shortinfo = "Entity 2"
					extra = ""
					notes = ""
					description = "The entities to constrain. Leave one or the other field blank to constrain to the world. �Note:�Only one entity will be constrained, even if several share the given targetname."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "targetname"
					shortinfo = "Constraint System Manager"
					extra = ""
					notes = ""
					description = "A phys_constraintsystem that this constraint should be a part of. This avoids the 'jiggling' caused by constraints applied to the same set of entities fighting with each other."
					choices = {}
				}
				"lbs":
				{
					typename = "float"
					shortinfo = "Force Limit to Break"
					extra = ""
					notes = ""
					description = "Impact force required to break the constraint, in pounds. 0 means infinite. A way of calculating this is to set it to the weight of an object that would break the constraint if it were resting on its objects."
					choices = {}
				}
				"lbs_*_distance":
				{
					typename = "float"
					shortinfo = "Torque Limit to Break"
					extra = ""
					notes = ""
					description = "Torque required to break the constraint, in pounds*inches. 0 means infinite. A way of calculating this is to multiply any reference mass by the resting distance (from the center of mass of the object) needed to break the constraint."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "string"
					shortinfo = "Play Sound on Break"
					extra = ""
					notes = ""
					description = "A sound played when the constraint is broken."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_5":
				{
					typename = "float"
					shortinfo = "Follow teleport distance"
					extra = ""
					notes = ""
					description = "If one constrained object teleports more than this many units away, the other will teleport with it."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		phys_constraint = 
		{
			description = "phys_constraint is a  point entity available in all Source games."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "No Collision until break"
					notes = ""
				}
				"4":
				{
					category = ""
					description = "Start inactive"
					notes = ""
				}
				"8":
				{
					category = ""
					description = "Change mass to keep stable attachment to world"
					notes = ""
				}
				"16":
				{
					category = ""
					description = "Do not connect entities until turned on"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "targetname"
					shortinfo = "Entity 1"
					extra = ""
					notes = ""
					description = ""
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "targetname"
					shortinfo = "Entity 2"
					extra = ""
					notes = ""
					description = "The entities to constrain. Leave one or the other field blank to constrain to the world. �Note:�Only one entity will be constrained, even if several share the given targetname."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "targetname"
					shortinfo = "Constraint System Manager"
					extra = ""
					notes = ""
					description = "A phys_constraintsystem that this constraint should be a part of. This avoids the 'jiggling' caused by constraints applied to the same set of entities fighting with each other."
					choices = {}
				}
				"lbs":
				{
					typename = "float"
					shortinfo = "Force Limit to Break"
					extra = ""
					notes = ""
					description = "Impact force required to break the constraint, in pounds. 0 means infinite. A way of calculating this is to set it to the weight of an object that would break the constraint if it were resting on its objects."
					choices = {}
				}
				"lbs_*_distance":
				{
					typename = "float"
					shortinfo = "Torque Limit to Break"
					extra = ""
					notes = ""
					description = "Torque required to break the constraint, in pounds*inches. 0 means infinite. A way of calculating this is to multiply any reference mass by the resting distance (from the center of mass of the object) needed to break the constraint."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "string"
					shortinfo = "Play Sound on Break"
					extra = ""
					notes = ""
					description = "A sound played when the constraint is broken."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_5":
				{
					typename = "float"
					shortinfo = "Follow teleport distance"
					extra = ""
					notes = ""
					description = "If one constrained object teleports more than this many units away, the other will teleport with it."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		phys_constraintsystem = 
		{
			description = "phys_constraintsystem is a  point entity available in all Source games. If you have a collection of objects connected by constraints, you may encounter vibration or jiggling. This is because each constraint is solved without regard for any others until you introduce a phys_constraintsystem.\nTo implement a phys_constraintsystem create one and give it a name, then select the constraints you want to group together and set it as their 'Constraint System Manager'.\nA constraintsystem also allows you to control the number of iterations performed on the constraints, allowing you to allocate more CPU to get the solution tighter. This will help when objects of dissimilar mass are connected, as if a large-mass object is in violation of the constraint it will take more iterations for it to move to a non-violating position/orientation. Ragdolls create a constraint system internally to solve these issues."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "integer"
					shortinfo = "Additional System Iterations"
					extra = ""
					notes = ""
					description = "Adding iterations makes the interactions among constraints in a system tighter. It will not compensate for errors due to collision, but will help in cases where objects of disparate mass are constrained to each other."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		phys_convert = 
		{
			description = "phys_convert is a  point entity available in all Source games. It copies the physical and visual properties of an arbitrary entity onto a new physically simulated entity.\nThe original entity is deleted if successful. Brush entities will turn into simple_physics_brush and model entities will turn into simple_physics_prop. Both are very limited compared to func_physbox and prop_physics. See their respective pages for details."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Convert Asleep"
					notes = ""
				}
				"2":
				{
					category = ""
					description = "Convert As Debris"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"target":
				{
					typename = "targetname"
					shortinfo = "Entity to convert"
					extra = ""
					notes = ""
					description = "Name of the entity that will be converted to a physics object when the ConvertTarget input is fired."
					choices = {}
				}
				"swapmodel":
				{
					typename = "string"
					shortinfo = "Model Swap Entity"
					extra = ""
					notes = ""
					description = "If specified, the model of the entity specified here will replace the model of the target object when it is converted. �Tip:�Use this when the converted object has a separate model used for physics props. (e.g. converting 'coolthing001a' when 'coolthing001a_physics' exists)"
					choices = {}
				}
				"massoverride":
				{
					typename = "float"
					shortinfo = "Mass Override"
					extra = ""
					notes = ""
					description = "Sets the mass when the object(s) are converted (0 means auto-calculate)"
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		phys_hinge = 
		{
			description = "phys_hinge is a  point entity available in all Source games. A hinge constraint which restricts rotation of its attached entities to a given axis. The axis is a line between the hinge's origin and the location of its Hammer helper.\nThe hinge can be given a friction component, which causes it to come to rest more quickly like an old rusty hinge might.\nExample map: sourcesdk_content/hl2/mapsrc/sdk_phys_hinge.vmf"
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "No Collision until break"
					notes = ""
				}
				"4":
				{
					category = ""
					description = "Start inactive"
					notes = ""
				}
				"8":
				{
					category = ""
					description = "Change mass to keep stable attachment to world"
					notes = ""
				}
				"16":
				{
					category = ""
					description = "Do not connect entities until turned on"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "float"
					shortinfo = "Friction"
					extra = ""
					notes = ""
					description = "Resistance/friction in the hinge.�Note:�This is not a percentage, but rather 1000 HL Units. 100 is a good starting value."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "vector"
					shortinfo = "Hinge Axis"
					extra = ""
					notes = ""
					description = "Define the axis of the hinge by dragging the entity helper in Hammer's 2D views."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "float"
					shortinfo = "Load Scale"
					extra = ""
					notes = ""
					description = "Scale of the load connected to this hinge (1=just the objects directly connected. To do:�What does this do? It doesn't seem to increase precision when heavy objects are attached.)"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "float"
					shortinfo = "Minimum Sound Velocity"
					extra = ""
					notes = ""
					description = "When travelling below this many units/sec, will not play any sound."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_5":
				{
					typename = "float"
					shortinfo = "Full Sound Velocity"
					extra = ""
					notes = ""
					description = "When travelling at this speed or above, will play sound at full volume."
					choices = {}
				}
				"forward":
				{
					typename = "sound"
					shortinfo = "Travel sound"
					extra = ""
					notes = ""
					description = "Play this sound when travelling forward on helper axis"
					choices = {}
				}
				"backward":
				{
					typename = "sound"
					shortinfo = "Travel sound"
					extra = ""
					notes = ""
					description = "Play this sound when travelling backward on helper axis"
					choices = {}
				}
				"small":
				{
					typename = "float"
					shortinfo = "Reversal sound threshold"
					extra = ""
					notes = ""
					description = "When accelerating by more than this many units/sec^2 opposite to direction of travel, play the small reversal sound."
					choices = {}
				}
				"medium":
				{
					typename = "float"
					shortinfo = "Reversal sound threshold"
					extra = ""
					notes = ""
					description = "When accelerating by more than this many units/sec^2 opposite to direction of travel, play the medium reversal sound."
					choices = {}
				}
				"large":
				{
					typename = "float"
					shortinfo = "Reversal sound threshold"
					extra = ""
					notes = ""
					description = "When accelerating by more than this many units/sec^2 opposite to direction of travel, play the large reversal sound."
					choices = {}
				}
				"small":
				{
					typename = "sound"
					shortinfo = "Reversal sound"
					extra = ""
					notes = ""
					description = "Play this sound when making a hard reverse over the small threshold but less than medium"
					choices = {}
				}
				"medium":
				{
					typename = "sound"
					shortinfo = "Reversal sound"
					extra = ""
					notes = ""
					description = "Play this sound when making a hard reverse over the medium threshold but less than large"
					choices = {}
				}
				"large":
				{
					typename = "sound"
					shortinfo = "Reversal sound"
					extra = ""
					notes = ""
					description = "Play this sound when making a hard reverse over the large threshold"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_6":
				{
					typename = "targetname"
					shortinfo = "Entity 1"
					extra = ""
					notes = ""
					description = ""
					choices = {}
				}
				"UNKNOWN_KEY_NAME_7":
				{
					typename = "targetname"
					shortinfo = "Entity 2"
					extra = ""
					notes = ""
					description = "The entities to constrain. Leave one or the other field blank to constrain to the world. �Note:�Only one entity will be constrained, even if several share the given targetname."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_8":
				{
					typename = "targetname"
					shortinfo = "Constraint System Manager"
					extra = ""
					notes = ""
					description = "A phys_constraintsystem that this constraint should be a part of. This avoids the 'jiggling' caused by constraints applied to the same set of entities fighting with each other."
					choices = {}
				}
				"lbs":
				{
					typename = "float"
					shortinfo = "Force Limit to Break"
					extra = ""
					notes = ""
					description = "Impact force required to break the constraint, in pounds. 0 means infinite. A way of calculating this is to set it to the weight of an object that would break the constraint if it were resting on its objects."
					choices = {}
				}
				"lbs_*_distance":
				{
					typename = "float"
					shortinfo = "Torque Limit to Break"
					extra = ""
					notes = ""
					description = "Torque required to break the constraint, in pounds*inches. 0 means infinite. A way of calculating this is to multiply any reference mass by the resting distance (from the center of mass of the object) needed to break the constraint."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_9":
				{
					typename = "string"
					shortinfo = "Play Sound on Break"
					extra = ""
					notes = ""
					description = "A sound played when the constraint is broken."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_10":
				{
					typename = "float"
					shortinfo = "Follow teleport distance"
					extra = ""
					notes = ""
					description = "If one constrained object teleports more than this many units away, the other will teleport with it."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		phys_keepupright = 
		{
			description = "phys_keepupright is a  point entity available in all Source games. It is a controller that tries to keep an entity facing a particular direction."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Start inactive"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "targetname"
					shortinfo = "Target Entity"
					extra = ""
					notes = ""
					description = "The entity to align to the desired angles."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "float"
					shortinfo = "Angular Limit"
					extra = ""
					notes = ""
					description = "The maximum angular velocity that this controller can compensate for, in degrees per second."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
			}
		}
		phys_lengthconstraint = 
		{
			description = "phys_lengthconstraint is a  point entity available in all Source games. It is a constraint that restricts the maximum (and optionally minimum) distance two objects are allowed to be from each other. It is most often used to simulate rope, though it does not support the 'stiffening' of rope attachment points that can be observed in reality; an object can rotate a full 360� in fact, clipping right through any rope that may be attached.\nThe constraint can be made rigid with its second spawnflag. It then behaves much like a phys_ballsocket, except that the objects can freely rotate around their own centres.\nExample map: sourcesdk_content/hl2/mapsrc/sdk_phys_lengthconstraint.vmf"
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "No Collision until break. () No Collision until break"
					notes = ""
				}
				"2":
				{
					category = ""
					description = "Keep Rigid"
					notes = ""
				}
				"4":
				{
					category = ""
					description = "Start inactive"
					notes = ""
				}
				"8":
				{
					category = ""
					description = "Change mass to keep stable attachment to world"
					notes = ""
				}
				"16":
				{
					category = ""
					description = "Do not connect entities until turned on"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "float"
					shortinfo = "Additional Length"
					extra = ""
					notes = ""
					description = "Elasticity of the constraint. It is allowed to stretch this many units over or under its maximum and minimum length. The constraint will try to spring back to its preferred length."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "float"
					shortinfo = "Minimum Length"
					extra = ""
					notes = ""
					description = "Minimum distance between origin and attachpoint. Irrelevant if the constraint is rigid. Default is 0."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "vector"
					shortinfo = "Attached object 2 point"
					extra = ""
					notes = ""
					description = "The second end of the constraint (the other is the origin). The second attached entity will be rigidly constrained to this location, and the first to the origin."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "targetname"
					shortinfo = "Entity 1"
					extra = ""
					notes = ""
					description = ""
					choices = {}
				}
				"UNKNOWN_KEY_NAME_5":
				{
					typename = "targetname"
					shortinfo = "Entity 2"
					extra = ""
					notes = ""
					description = "The entities to constrain. Leave one or the other field blank to constrain to the world. �Note:�Only one entity will be constrained, even if several share the given targetname."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_6":
				{
					typename = "targetname"
					shortinfo = "Constraint System Manager"
					extra = ""
					notes = ""
					description = "A phys_constraintsystem that this constraint should be a part of. This avoids the 'jiggling' caused by constraints applied to the same set of entities fighting with each other."
					choices = {}
				}
				"lbs":
				{
					typename = "float"
					shortinfo = "Force Limit to Break"
					extra = ""
					notes = ""
					description = "Impact force required to break the constraint, in pounds. 0 means infinite. A way of calculating this is to set it to the weight of an object that would break the constraint if it were resting on its objects."
					choices = {}
				}
				"lbs_*_distance":
				{
					typename = "float"
					shortinfo = "Torque Limit to Break"
					extra = ""
					notes = ""
					description = "Torque required to break the constraint, in pounds*inches. 0 means infinite. A way of calculating this is to multiply any reference mass by the resting distance (from the center of mass of the object) needed to break the constraint."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_7":
				{
					typename = "string"
					shortinfo = "Play Sound on Break"
					extra = ""
					notes = ""
					description = "A sound played when the constraint is broken."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_8":
				{
					typename = "float"
					shortinfo = "Follow teleport distance"
					extra = ""
					notes = ""
					description = "If one constrained object teleports more than this many units away, the other will teleport with it."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		phys_magnet = 
		{
			description = "phys_magnet is a  point entity available in all Source games. It acts like a magnet, attaching metallic physics objects to itself when they touch it."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Start Asleep"
					notes = ""
				}
				"2":
				{
					category = ""
					description = "Motion Disabled"
					notes = ""
				}
				"4":
				{
					category = ""
					description = "Suck On Touch"
					notes = ""
				}
				"8":
				{
					category = ""
					description = "Allow Attached Rotation"
					notes = ""
				}
				"16":
				{
					category = ""
					description = "Coast jeep pickup hack - Used on [Half-Life 2]d2_coast_01 to prevent objects from interfering with the crane as it picks up the buggy. It is hardcoded for use with prop_vehicle_jeep only."
					notes = "Note: Another entity can be used by changing the entity's classname to prop_vehicle_jeep using AddOutput. However, if the game is saved/reloaded or the round restarts in multiplayer, the entity will no longer function and will cause crashes."
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"lbs":
				{
					typename = "float"
					shortinfo = "Force Limit to Break"
					extra = ""
					notes = ""
					description = "The amount of force necessary to break a stuck object off the magnet. A way of calculating this is to set it to the mass of an object that would break this constraint if it were resting on the magnet."
					choices = {}
				}
				"lbs_*_distance":
				{
					typename = "float"
					shortinfo = "Torque Limit to Break"
					extra = ""
					notes = ""
					description = "The amount of torque necessary to break a stuck object off the magnet. A way of calculating this is to multiply any reference mass by the resting distance (from the center of mass of the object) needed to break the constraint."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "float"
					shortinfo = "Mass Scale"
					extra = ""
					notes = ""
					description = "A scale multiplier for the object's mass."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "string"
					shortinfo = "Override parameters"
					extra = ""
					notes = ""
					description = "A list of physics key/value pairs that are usually in a physics prop .qc file. Format is 'key,value,key,value,etc'."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "integer"
					shortinfo = "Maximum Attached Objects"
					extra = ""
					notes = ""
					description = "The maximum number of physics objects that can be stuck to the magnet at once. 0 = no limit."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
				"model":
				{
					typename = "string"
					shortinfo = "World Model"
					extra = ""
					notes = ""
					description = "The model this entity should appear as. 128-character limit."
					choices = {}
				}
				"skin":
				{
					typename = "integer"
					shortinfo = "Skin"
					extra = ""
					notes = ""
					description = "Some models have multiple skins. This value selects from the index, starting with 0. �Tip:�Hammer's model browser automatically updates this value if you use it to view different skins."
					choices = {}
				}
				"modelscale":
				{
					typename = "float"
					shortinfo = "Model Scale"
					extra = "(in all games since [Source][Source])"
					notes = ""
					description = "A multiplier for the size of the model."
					choices = {}
				}
				"disableshadows":
				{
					typename = "boolean"
					shortinfo = "Disable Shadows"
					extra = ""
					notes = ""
					description = "Prevents the entity from creating cheap render-to-texture shadows, or lightmap shadows if the entity is a prop_static. Does not affect shadow mapping."
					choices = {}
				}
				"disableshadowdepth":
				{
					typename = "boolean"
					shortinfo = "Disable ShadowDepth"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable rendering into shadow depth (for projected textures) for this entity."
					choices = {}
				}
				"shadowdepthnocache":
				{
					typename = "choices"
					shortinfo = "Projected Texture Cache"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to hint projected texture system whether it is sufficient to cache shadow volume of this entity or to force render it every frame instead.\n0�: Default\n1�: No cache - render every frame\n2�: Cache it - render only once"
					choices = {}
				}
				"disableflashlight":
				{
					typename = "boolean"
					shortinfo = "Disable flashlight"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "Used to disable projected texture lighting and shadows on this entity."
					choices = {}
				}
				"drawinfastreflection":
				{
					typename = "boolean"
					shortinfo = "Render in Fast Reflections"
					extra = "(in all games since [Portal 2])"
					notes = ""
					description = "If enabled, this entity will render in fast water reflections (i.e. when a water material specifies $reflectonlymarkedentities) and in the world impostor pass."
					choices = {}
				}
			}
		}
		phys_motor = 
		{
			description = "phys_motor is a  point entity available in all Source games. It tries to spin a target entity at a particular speed."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Start On"
					notes = ""
				}
				"2":
				{
					category = ""
					description = "No world collision"
					notes = "Details: Disable world collisions on hinges"
				}
				"4":
				{
					category = ""
					description = "Hinge Object"
					notes = "Details: Motor also acts as a hinge constraining the object to this axis"
				}
				"8":
				{
					category = ""
					description = "Orient Locally"
					notes = "Details: Maintain local relationship with the attached object (FGD comment: 'NOT WORKING YET')"
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "string"
					shortinfo = "Rotation Speed"
					extra = ""
					notes = ""
					description = "Angular speed (units are degrees/second)"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "string"
					shortinfo = "Spin up time"
					extra = ""
					notes = ""
					description = "spin up time in seconds (also affects the rate at which speed changes happen)"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "float"
					shortinfo = "System Interia Scale"
					extra = ""
					notes = ""
					description = "Make this larger if the object being driven is constrained to a set of heavier objects."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "vector"
					shortinfo = "Rotation Axis"
					extra = ""
					notes = ""
					description = "The point to the Origin of the entity whose line the rotation axis."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_5":
				{
					typename = "targetname"
					shortinfo = "Attached Object"
					extra = ""
					notes = ""
					description = "Object to apply the force to"
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		phys_pulleyconstraint = 
		{
			description = "phys_pulleyconstraint is a  point entity available in all Source games. It is a constraint that is essentially two length constraints and two points. Imagine it as a virtual rope connected to two pulleyed objects, specified in the Entity 1 (attach1) and Entity 2 (attach2) keyvalues, each suspended from a pulley above them.\nPulley point 1 - the pulley from which Entity 1 is always suspended from - is the origin of this constraint entity.\nPulley point 2 - the pulley from which Entity 2 is always suspended from - is the position of the 'blue ball', set by altering the Pulley Position 2 (position2) keyvalue directly, or by using the Helper Tool.\nThe constraint keeps the sum of the distances between the pulley points and their suspended objects constant."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "No Collision until break. () No Collision until break"
					notes = ""
				}
				"2":
				{
					category = ""
					description = "Keep Rigid"
					notes = ""
				}
				"4":
				{
					category = ""
					description = "Start inactive"
					notes = ""
				}
				"8":
				{
					category = ""
					description = "Change mass to keep stable attachment to world"
					notes = ""
				}
				"16":
				{
					category = ""
					description = "Do not connect entities until turned on"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "float"
					shortinfo = "Additional Length"
					extra = ""
					notes = ""
					description = "Add (or subtract) this amount to the rest length of the pulley rope."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "float"
					shortinfo = "Pulley Gear Ratio"
					extra = ""
					notes = ""
					description = "Add (or subtract) this amount to the rest length of the pulley rope."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "vector"
					shortinfo = "Pulley Position 2"
					extra = ""
					notes = ""
					description = "The position of the pulley for Entity 2. The pulley for Entity 1 is the origin of this constraint entity. Entity 1 is always suspended from pulley point 1, and Entity 2 is always suspended from pulley point 2."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "targetname"
					shortinfo = "Entity 1"
					extra = ""
					notes = ""
					description = ""
					choices = {}
				}
				"UNKNOWN_KEY_NAME_5":
				{
					typename = "targetname"
					shortinfo = "Entity 2"
					extra = ""
					notes = ""
					description = "The entities to constrain. Leave one or the other field blank to constrain to the world. �Note:�Only one entity will be constrained, even if several share the given targetname."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_6":
				{
					typename = "targetname"
					shortinfo = "Constraint System Manager"
					extra = ""
					notes = ""
					description = "A phys_constraintsystem that this constraint should be a part of. This avoids the 'jiggling' caused by constraints applied to the same set of entities fighting with each other."
					choices = {}
				}
				"lbs":
				{
					typename = "float"
					shortinfo = "Force Limit to Break"
					extra = ""
					notes = ""
					description = "Impact force required to break the constraint, in pounds. 0 means infinite. A way of calculating this is to set it to the weight of an object that would break the constraint if it were resting on its objects."
					choices = {}
				}
				"lbs_*_distance":
				{
					typename = "float"
					shortinfo = "Torque Limit to Break"
					extra = ""
					notes = ""
					description = "Torque required to break the constraint, in pounds*inches. 0 means infinite. A way of calculating this is to multiply any reference mass by the resting distance (from the center of mass of the object) needed to break the constraint."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_7":
				{
					typename = "string"
					shortinfo = "Play Sound on Break"
					extra = ""
					notes = ""
					description = "A sound played when the constraint is broken."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_8":
				{
					typename = "float"
					shortinfo = "Follow teleport distance"
					extra = ""
					notes = ""
					description = "If one constrained object teleports more than this many units away, the other will teleport with it."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		phys_ragdollconstraint = 
		{
			description = "phys_ragdollconstraint is a  point entity available in all Source games. It is a constraint that fixes the position of two entities, relative to this constraint's origin. Also allows for limits on the rotation around each axis, in the space of this constraint."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "No Collision until break. () No Collision until break"
					notes = ""
				}
				"2":
				{
					category = ""
					description = "Only limit rotation (free movement)"
					notes = ""
				}
				"4":
				{
					category = ""
					description = "Start inactive"
					notes = ""
				}
				"8":
				{
					category = ""
					description = "Change mass to keep stable attachment to world"
					notes = ""
				}
				"16":
				{
					category = ""
					description = "Do not connect entities until turned on"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "float"
					shortinfo = "X/Y/Z axis min limit"
					extra = ""
					notes = ""
					description = "-180 min and 180 max = no constraint on this axis."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "float"
					shortinfo = "X/Y/Z axis max limit"
					extra = ""
					notes = ""
					description = "-180 min and 180 max = no constraint on this axis."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "float"
					shortinfo = "X/Y/Z axis friction"
					extra = ""
					notes = ""
					description = ""
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "targetname"
					shortinfo = "Entity 1"
					extra = ""
					notes = ""
					description = ""
					choices = {}
				}
				"UNKNOWN_KEY_NAME_5":
				{
					typename = "targetname"
					shortinfo = "Entity 2"
					extra = ""
					notes = ""
					description = "The entities to constrain. Leave one or the other field blank to constrain to the world. �Note:�Only one entity will be constrained, even if several share the given targetname."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_6":
				{
					typename = "targetname"
					shortinfo = "Constraint System Manager"
					extra = ""
					notes = ""
					description = "A phys_constraintsystem that this constraint should be a part of. This avoids the 'jiggling' caused by constraints applied to the same set of entities fighting with each other."
					choices = {}
				}
				"lbs":
				{
					typename = "float"
					shortinfo = "Force Limit to Break"
					extra = ""
					notes = ""
					description = "Impact force required to break the constraint, in pounds. 0 means infinite. A way of calculating this is to set it to the weight of an object that would break the constraint if it were resting on its objects."
					choices = {}
				}
				"lbs_*_distance":
				{
					typename = "float"
					shortinfo = "Torque Limit to Break"
					extra = ""
					notes = ""
					description = "Torque required to break the constraint, in pounds*inches. 0 means infinite. A way of calculating this is to multiply any reference mass by the resting distance (from the center of mass of the object) needed to break the constraint."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_7":
				{
					typename = "string"
					shortinfo = "Play Sound on Break"
					extra = ""
					notes = ""
					description = "A sound played when the constraint is broken."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_8":
				{
					typename = "float"
					shortinfo = "Follow teleport distance"
					extra = ""
					notes = ""
					description = "If one constrained object teleports more than this many units away, the other will teleport with it."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		phys_ragdollmagnet = 
		{
			description = "phys_ragdollmagnet is a  point entity available in all Source games. It acts like a magnet for ragdolls. Useful for crafting exaggerated ragdoll behavior (i.e. guys falling over rails on death). If the Bar Magnet spawnflag is set, the magnet works like it was a cylindrical magnet i.e. it attracts ragdolls to the nearest point on a line."
			flagnotes = ""
			flags = 
			{
				"2":
				{
					category = ""
					description = "Bar Magnet (use axis helper)"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "vector"
					shortinfo = "Bar Magnet Axis"
					extra = ""
					notes = ""
					description = "Axis of the bar magnet, if the spawnflag is active."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "float"
					shortinfo = "Effective Radius"
					extra = ""
					notes = ""
					description = "Radius in which ragdolls are affected around this entity's origin."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "float"
					shortinfo = "Force"
					extra = ""
					notes = ""
					description = "Magnetic force to apply to ragdolls within the radius. Expressed as kilograms per inch per second. So a force of 1000 will add 10 inches/second to a 100kg man. It will add 100 inches per second to a 10kg headcrab. �Tip:�Using a negative value will propel ragdolls away from the magnet."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "string"
					shortinfo = "Entity to affect"
					extra = ""
					notes = ""
					description = "If specified, the phys_ragdollmagnet will only affect the target entity."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"StartDisabled":
				{
					typename = "boolean"
					shortinfo = "Start Disabled"
					extra = ""
					notes = ""
					description = "Stay dormant until activated (probably with the Enable input)."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
			}
		}
		phys_slideconstraint = 
		{
			description = "phys_slideconstraint is a  point entity available in all Source games. It is a constraint that constrains an entity along a line segment."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "No Collision until break"
					notes = ""
				}
				"2":
				{
					category = ""
					description = "Limit Endpoints"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "vector"
					shortinfo = "Sliding Axis"
					extra = ""
					notes = ""
					description = "Axis of the constraint. Usually set with the Hammer helper tool."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "float"
					shortinfo = "Friction"
					extra = ""
					notes = ""
					description = "Resistance/friction in the constraint"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "float"
					shortinfo = "Load Scale"
					extra = ""
					notes = ""
					description = "Scale of the mass load connected to this constraint (1=just the objects directly connected)"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "float"
					shortinfo = "Minimum Sound Velocity"
					extra = ""
					notes = ""
					description = "When travelling below this many units/sec, will not play any sound."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_5":
				{
					typename = "float"
					shortinfo = "Full Sound Velocity"
					extra = ""
					notes = ""
					description = "When travelling at this speed or above, will play sound at full volume."
					choices = {}
				}
				"forward":
				{
					typename = "sound"
					shortinfo = "Travel sound"
					extra = ""
					notes = ""
					description = "Play this sound when travelling forward on helper axis"
					choices = {}
				}
				"backward":
				{
					typename = "sound"
					shortinfo = "Travel sound"
					extra = ""
					notes = ""
					description = "Play this sound when travelling backward on helper axis"
					choices = {}
				}
				"small":
				{
					typename = "float"
					shortinfo = "Reversal sound threshold"
					extra = ""
					notes = ""
					description = "When accelerating by more than this many units/sec^2 opposite to direction of travel, play the small reversal sound."
					choices = {}
				}
				"medium":
				{
					typename = "float"
					shortinfo = "Reversal sound threshold"
					extra = ""
					notes = ""
					description = "When accelerating by more than this many units/sec^2 opposite to direction of travel, play the medium reversal sound."
					choices = {}
				}
				"large":
				{
					typename = "float"
					shortinfo = "Reversal sound threshold"
					extra = ""
					notes = ""
					description = "When accelerating by more than this many units/sec^2 opposite to direction of travel, play the large reversal sound."
					choices = {}
				}
				"small":
				{
					typename = "sound"
					shortinfo = "Reversal sound"
					extra = ""
					notes = ""
					description = "Play this sound when making a hard reverse over the small threshold but less than medium"
					choices = {}
				}
				"medium":
				{
					typename = "sound"
					shortinfo = "Reversal sound"
					extra = ""
					notes = ""
					description = "Play this sound when making a hard reverse over the medium threshold but less than large"
					choices = {}
				}
				"large":
				{
					typename = "sound"
					shortinfo = "Reversal sound"
					extra = ""
					notes = ""
					description = "Play this sound when making a hard reverse over the large threshold"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_6":
				{
					typename = "targetname"
					shortinfo = "Entity 1"
					extra = ""
					notes = ""
					description = ""
					choices = {}
				}
				"UNKNOWN_KEY_NAME_7":
				{
					typename = "targetname"
					shortinfo = "Entity 2"
					extra = ""
					notes = ""
					description = "The entities to constrain. Leave one or the other field blank to constrain to the world. �Note:�Only one entity will be constrained, even if several share the given targetname."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_8":
				{
					typename = "targetname"
					shortinfo = "Constraint System Manager"
					extra = ""
					notes = ""
					description = "A phys_constraintsystem that this constraint should be a part of. This avoids the 'jiggling' caused by constraints applied to the same set of entities fighting with each other."
					choices = {}
				}
				"lbs":
				{
					typename = "float"
					shortinfo = "Force Limit to Break"
					extra = ""
					notes = ""
					description = "Impact force required to break the constraint, in pounds. 0 means infinite. A way of calculating this is to set it to the weight of an object that would break the constraint if it were resting on its objects."
					choices = {}
				}
				"lbs_*_distance":
				{
					typename = "float"
					shortinfo = "Torque Limit to Break"
					extra = ""
					notes = ""
					description = "Torque required to break the constraint, in pounds*inches. 0 means infinite. A way of calculating this is to multiply any reference mass by the resting distance (from the center of mass of the object) needed to break the constraint."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_9":
				{
					typename = "string"
					shortinfo = "Play Sound on Break"
					extra = ""
					notes = ""
					description = "A sound played when the constraint is broken."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_10":
				{
					typename = "float"
					shortinfo = "Follow teleport distance"
					extra = ""
					notes = ""
					description = "If one constrained object teleports more than this many units away, the other will teleport with it."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		phys_spring = 
		{
			description = "phys_spring is a  point entity available in all Source games. It is a physically simulated spring. length is what's known as the 'natural spring length'. This is how long the spring would be if it was at rest (nothing hanging on it or attached). When you attach something to the spring, it will stretch longer than its natural length. The amount of stretch is determined by the spring constant constant. The larger the spring constant the less stretch in the spring."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Force only on stretch"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "targetname"
					shortinfo = "Entity 1"
					extra = ""
					notes = ""
					description = "First entity to attach."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "targetname"
					shortinfo = "Entity 2"
					extra = ""
					notes = ""
					description = "Second entity to attach."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "vector"
					shortinfo = "Spring Axis"
					extra = ""
					notes = ""
					description = "Use the helper. Drag it out to match the virtual spring."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "string"
					shortinfo = "Spring Length"
					extra = ""
					notes = ""
					description = "How long the spring would be if it was at rest (nothing hanging on it or attached). 0 means the length of the brush."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_5":
				{
					typename = "string"
					shortinfo = "Spring Constant"
					extra = ""
					notes = ""
					description = "Stiffness of the spring.  The larger the number the less the spring will stretch."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_6":
				{
					typename = "string"
					shortinfo = "Damping Constant"
					extra = ""
					notes = ""
					description = "How much energy the spring loses.  The larger the number, the less bouncy the spring."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_7":
				{
					typename = "string"
					shortinfo = "Relative Damping Constant"
					extra = ""
					notes = ""
					description = "The amount of energy the spring loses proportional to the relative velocity of the two objects the spring is attached to."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_8":
				{
					typename = "string"
					shortinfo = "Break on Length"
					extra = ""
					notes = ""
					description = "If the spring's length ever exceeds this length, the spring breaks."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		phys_thruster = 
		{
			description = "phys_thruster is a  point entity available in all Source games. It is used to apply constant acceleration to a physics object. The force and torque is calculated using the position and direction of the thruster as an impulse. So moving those off the object's center will cause torque as well. Torque can be removed by unchecking the Apply Torque flag. The position of the thruster can be forced to be at the object's center by checking the Ignore Pos flag."
			flagnotes = ""
			flags = 
			{
				"32":
				{
					category = ""
					description = "Ignore Pos"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "string"
					shortinfo = "Force"
					extra = ""
					notes = ""
					description = "Force (will be integrated, units are force kg*in/s^2)"
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "targetname"
					shortinfo = "Attached Object"
					extra = ""
					notes = ""
					description = "Object to apply the force to."
					choices = {}
				}
				"0=inf":
				{
					typename = "string"
					shortinfo = "Time of Force"
					extra = ""
					notes = ""
					description = "Automatic shut-off after this time has passed. A value of 0 means to stay on forever or until deactivated.)"
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		phys_torque = 
		{
			description = "phys_torque is a  point entity available in all Source games. It is an angular thruster. Use it to apply angular force to an entity."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Start On"
					notes = "Details: Thrust is on by default (will turn off in forcetime)"
				}
				"2":
				{
					category = ""
					description = "Apply Force"
					notes = "Details: Apply linear force (if off, torque only)"
				}
				"4":
				{
					category = ""
					description = "Apply Torque"
					notes = "Details: Apply rotational force (torque - if off, linear only)"
				}
				"8":
				{
					category = ""
					description = "Orient Locally"
					notes = "Details: Maintain local relationship with the attached object"
				}
				"16":
				{
					category = ""
					description = "Ignore Mass"
					notes = "Details: Impulse is independent of object's mass (impulse is acceleration NOT force)"
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "string"
					shortinfo = "Angular Acceleration"
					extra = ""
					notes = ""
					description = "Axial acceleration acting on the object."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "vector"
					shortinfo = "Rotation Axis"
					extra = ""
					notes = ""
					description = "The point to the Origin of the entity whose line the rotation axis."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "targetname"
					shortinfo = "Attached Object"
					extra = ""
					notes = ""
					description = "Object to apply the force to."
					choices = {}
				}
				"0=inf":
				{
					typename = "string"
					shortinfo = "Time of Force"
					extra = ""
					notes = ""
					description = "Automatic shut-off after this time has passed. A value of 0 means to stay on forever or until deactivated.)"
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		
	}
	physics = 
	{
		physics_cannister = 
		{
			description = "physics_cannister is a  point entity available in all Source games. It is a physically simulated gas cannister that can have its cap shot off, at which point gas will start escaping and cause the cannister to fly around. If it takes enough damage, it will explode. \nIn code it is represented by class CPhysicsCannister, defined in physics_cannister.cpp."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Start Asleep"
					notes = ""
				}
				"2":
				{
					category = ""
					description = "Explodes"
					notes = ""
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "model_path"
					shortinfo = "World model"
					extra = ""
					notes = "Note: The model should have a nozzle attachment point, which is where gas will escape and thrust will be produced from."
					description = "The canister model."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "string"
					shortinfo = "Explosion Damage"
					extra = ""
					notes = ""
					description = "The amount of damage done by the explosion created when the cannister blows up."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "string"
					shortinfo = "Explosion Radius"
					extra = ""
					notes = ""
					description = "The radius of the explosion to create when the cannister blows up."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "integer"
					shortinfo = "Health"
					extra = ""
					notes = ""
					description = "The amount of damage the cannister takes before exploding."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_5":
				{
					typename = "string"
					shortinfo = "Thrust"
					extra = ""
					notes = ""
					description = "When the cap has been blown off, and the escaping gas is thrusting the cannister about, this is the amount of thrust generated."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_6":
				{
					typename = "string"
					shortinfo = "Fuel Seconds"
					extra = ""
					notes = ""
					description = "The amount of time that gas leaks from the cannister before being considered empty."
					choices = {}
				}
				"R_G_B":
				{
					typename = "color255"
					shortinfo = "Smoke Color"
					extra = ""
					notes = ""
					description = "Color of the smoke."
					choices = {}
				}
				"0_-_255":
				{
					typename = "integer"
					shortinfo = "Smoke Alpha"
					extra = ""
					notes = ""
					description = "Transparency of the smoke."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_7":
				{
					typename = "sound"
					shortinfo = "Thruster Sound"
					extra = ""
					notes = ""
					description = "The sound played when the gas is escaping from the cannister."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
			}
		}
		
	}
	postprocess = 
	{
		postprocess_controller = 
		{
			description = "postprocess_controller is a  point entity available in all Source games since [Left 4 Dead] Left 4 Dead."
			flagnotes = ""
			flags = 
			{
				"1":
				{
					category = ""
					description = "Master"
					notes = "Details: Has priority if multiple postprocess_controllers exist"
				}
			}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "float"
					shortinfo = "Fade-in time"
					extra = ""
					notes = ""
					description = "Fade-in time"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "float"
					shortinfo = "Local contrast strength [-1..x]"
					extra = ""
					notes = ""
					description = "Local contrast strength"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "float"
					shortinfo = "Local contrast edge strength [0..1]"
					extra = ""
					notes = ""
					description = "Local contrast edge strength"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "float"
					shortinfo = "Vignette start distance [0..1]"
					extra = ""
					notes = ""
					description = "Vignette start distance"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_5":
				{
					typename = "float"
					shortinfo = "Vignette end distance [0..x]"
					extra = ""
					notes = ""
					description = "Vignette end distance"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_6":
				{
					typename = "float"
					shortinfo = "Vignette blur strength [0..1]"
					extra = ""
					notes = ""
					description = "Vignette blur strength"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_7":
				{
					typename = "float"
					shortinfo = "Fade to black strength [0..1]"
					extra = ""
					notes = ""
					description = "Fade to black strength"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_8":
				{
					typename = "float"
					shortinfo = "Film grain strength [0..x]"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Film grain strength"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_9":
				{
					typename = "float"
					shortinfo = "Top-of-screen vignette strength [0..1]"
					extra = "(only in [Left 4 Dead 2])"
					notes = ""
					description = "Top-of-screen vignette strength"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_10":
				{
					typename = "float"
					shortinfo = "Depth-blur focal plane distance [0..1]"
					extra = "(in all games since [Alien Swarm])"
					notes = ""
					description = "Depth-blur focal plane distance (in dest alpha space [0,1], not world units)"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_11":
				{
					typename = "float"
					shortinfo = "Depth-blur effect strength [0..x]"
					extra = "(in all games since [Alien Swarm])"
					notes = ""
					description = "Depth-blur effect strength"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_12":
				{
					typename = "float"
					shortinfo = "Full-screen blur strength [0..1]"
					extra = "(in all games since [Alien Swarm])"
					notes = ""
					description = "Full-screen blur strength"
					choices = {}
				}
			}
		}
		
	}
	shadow = 
	{
		shadow_control = 
		{
			description = "shadow_control is a  point entity available in all Source games. It defines the direction, color and attenuation distance of the dynamic shadows created by light_environment for the entire map.\nThe properties of this entity apply to the whole map. Multiple instances of this entity within a map may cause errors."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"color":
				{
					typename = "color255"
					shortinfo = "Shadow Color"
					extra = ""
					notes = ""
					description = "This is the color of the shadows."
					choices = {}
				}
				"distance":
				{
					typename = "float"
					shortinfo = "Maximum Distance"
					extra = ""
					notes = ""
					description = "This is the maximum distance the shadow is allowed to cast, in inches.\n�Tip:�Shortening this distance can be used to approximate the effects of diffuse lighting."
					choices = {}
				}
				"disableallshadows":
				{
					typename = "boolean"
					shortinfo = "All Shadows Disabled"
					extra = ""
					notes = ""
					description = "Disable shadows entirely."
					choices = {}
				}
				"enableshadowsfromlocallights":
				{
					typename = "boolean"
					shortinfo = "Enable Local Light Shadows"
					extra = "(in all games since [Left 4 Dead])�(also in [Garry's Mod][Mapbase])"
					notes = ""
					description = "Enable shadow direction to be calculated on a per-entity basis and to be dictated by the light closest to the entity.\n�Note:�This keyvalue may not be available in some FGDs.\n Code:There is a custom version of this feature which could run on previous versions of Source. Click here for more information."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "Tip:�Pitch is the sun's angle of elevation from the ground, and yaw is its compass bearing."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		
	}
	sky = 
	{
		sky_camera = 
		{
			description = "sky_camera is a  point entity available in all Source games. It is used to mark the position of the map's origin inside the 3D Skybox. As your position changes relative to the maps origin it will be scaled and applied relative to the sky_camera.\nWhen the map is compiled, the areas containing sky_camera(s) are skipped during vis calculations. This can be overridden by -forceskyvis on VBSP.\nBy default, only one sky_camera may be active at a time and it cannot move.\nNote that the fog values on sky_camera cannot be changed through inputs (unlike env_fog_controller) and the max density keyvalue is missing from the FGD by default."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = "!FGD"
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "integer"
					shortinfo = "3D Skybox scale"
					extra = ""
					notes = ""
					description = "This number determines how large objects in your skybox will seem relative to the map. Take a skybox scale of 16, an object 1 unit high in the skybox will seem to be 16 units high to player."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "boolean"
					shortinfo = "Fog Enable"
					extra = ""
					notes = ""
					description = "Enable Fog in the Skybox by Default"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "boolean"
					shortinfo = "Fog Blend"
					extra = ""
					notes = ""
					description = "This will enable blending between two fog colors, based on the direction the player is looking. If the player's viewpoint is equal to the fogdir vector, the fog will be drawn with the secondary color; if facing in the complete opposite direction, the fog will be drawn with the primary color.  This can be used to approximate the aesthetic effect of diffuse light filtering through the fog, but since the fog effect color is changed for the entire rendered scene, it is best to keep the two colors relatively close to make the blending less obvious.  For example, sunlight with a yaw of 45 degrees and a pitch of -45 degrees could be enhanced using a fogdir of '-1 -1 1', a fogcolor of '120 110 100' and a fogcolor2 of '80 70 60'."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "boolean"
					shortinfo = "Use Angles for Fog Dir"
					extra = ""
					notes = ""
					description = ""
					choices = {}
				}
				"UNKNOWN_KEY_NAME_5":
				{
					typename = "color255"
					shortinfo = "Primary Fog Color"
					extra = ""
					notes = ""
					description = "The Primary Color of the Fog in the Skybox"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_6":
				{
					typename = "color255"
					shortinfo = "Secondary Fog Color"
					extra = ""
					notes = ""
					description = "The Secondary Color of the Fog in the Skybox that will be blended to"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_7":
				{
					typename = "string"
					shortinfo = "Primary Fog Dir"
					extra = ""
					notes = ""
					description = "A vector (given by three space-separated numbers X Y Z) which points from the secondary fog color fogcolor2 towards the primary fog color fogcolor."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_8":
				{
					typename = "string"
					shortinfo = "Fog Start"
					extra = ""
					notes = ""
					description = "How far from the point-of-view the fog should start. Generally, this should be the same setting as your env_fog_controller."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_9":
				{
					typename = "string"
					shortinfo = "Fog End"
					extra = ""
					notes = ""
					description = "How far from the point-of-view the view should be completely fogged. Generally, this should be the same setting as your env_fog_controller."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_10":
				{
					typename = "float"
					shortinfo = "Fog Max Density"
					extra = "!FGD"
					notes = ""
					description = "Fog Max Density [0..1]."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
			}
		}
		
	}
	sound = 
	{
		sound_mix_layer = 
		{
			description = "[Left 4 Dead 2]�sound_mix_layer is a  point entity available in Left 4 Dead 2. It is an entity used to set a mix layer to a specific value."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "string"
					shortinfo = "Mix Layer Name"
					extra = ""
					notes = ""
					description = "Name of the mix layer to be setting the level of."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "float"
					shortinfo = "Level"
					extra = ""
					notes = ""
					description = "Set the Mix Layer Level"
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		
	}
	tanktrain = 
	{
		tanktrain_ai = 
		{
			description = "tanktrain_ai is a  point entity available in all Source games. This is AI to make an associated func_tanktrain automatically move along its path towards the node closest to a target."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "targetname"
					shortinfo = "Train Name"
					extra = ""
					notes = ""
					description = "The func_tanktrain to move"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "sound"
					shortinfo = "Start Moving Sound"
					extra = ""
					notes = ""
					description = "The sound to play when the train starts moving"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "sound"
					shortinfo = "Engine Loop Sound"
					extra = ""
					notes = ""
					description = "The engine sound is looped when it plays"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "sound"
					shortinfo = "Vehicle Movement Sound"
					extra = ""
					notes = ""
					description = "The looping sound to play while the train is moving"
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		tanktrain_aitarget = 
		{
			description = "tanktrain_aitarget is a  point entity available in all Source games. Legacy support only. Use ai_changetarget instead. An entity that changes the target of a tanktrain_ai entity."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "targetname"
					shortinfo = "Tank AI Entity"
					extra = ""
					notes = ""
					description = "The tanktrain_ai entity to change the target of."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "targetname"
					shortinfo = "New Target Entity"
					extra = ""
					notes = ""
					description = "The entity to tell the tanktrain_ai to target."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		
	}
	test = 
	{
		test_traceline = 
		{
			description = "test_traceline is a  point entity available in all Source games. It is a debugging tool for testing tracelines."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
			}
		}
		
	}
	vgui = 
	{
		vgui_screen = 
		{
			description = "vgui_screen is a  point entity available in all Source games. It is a VGUI screen. Useful for in-world monitors."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "string"
					shortinfo = "Panel Name"
					extra = ""
					notes = ""
					description = "Name of the panel to use. This is not a filename."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "string"
					shortinfo = "Overlay Material"
					extra = ""
					notes = ""
					description = "Name of a material to overlay over the top of the VGUI screen. �Note:�This material must write Z for the VGUI screen to work."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "integer"
					shortinfo = "Panel Width in World"
					extra = ""
					notes = ""
					description = "Width of the panel in units."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "integer"
					shortinfo = "Panel Height in World"
					extra = ""
					notes = ""
					description = "Height of the panel in units."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_5":
				{
					typename = "boolean"
					shortinfo = "Is Transparent?"
					extra = ""
					notes = ""
					description = "Set this to true if you would like your background to be invisible instead of a black fill."
					choices = {}
				}
			}
		}
		vgui_slideshow_display = 
		{
			description = "vgui_slideshow_display is a  point entity available in all Source games. It is a VGUI screen the displays images in a slideshow."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "string"
					shortinfo = "Display Text"
					extra = ""
					notes = ""
					description = "Text to display on top of the image."
					choices = {}
				}
				"materials/vgui/...":
				{
					typename = "string"
					shortinfo = "Image Directory"
					extra = ""
					notes = ""
					description = "Directory where images are located (materials/vgui/[directory])."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "float"
					shortinfo = "Min Slide Time"
					extra = ""
					notes = ""
					description = "Minimum amount of random time that a slide is displayed."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_3":
				{
					typename = "float"
					shortinfo = "Max Slide Time"
					extra = ""
					notes = ""
					description = "Maximum amount of random time that a slide is displayed."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_4":
				{
					typename = "choices"
					shortinfo = "Cycle Type"
					extra = ""
					notes = ""
					description = "Order that images are displayed.\n0�: Random\n1�: Forward\n2�: Backward"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_5":
				{
					typename = "choices"
					shortinfo = "No List Repeat"
					extra = ""
					notes = ""
					description = "0�: Allow List Repeats\n1�: No List Repeats"
					choices = {}
				}
				"UNKNOWN_KEY_NAME_6":
				{
					typename = "integer"
					shortinfo = "Panel width"
					extra = ""
					notes = ""
					description = "Width of the panel in units."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_7":
				{
					typename = "integer"
					shortinfo = "Panel height"
					extra = ""
					notes = ""
					description = "Height of the panel in units."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
				"angles":
				{
					typename = "angle"
					shortinfo = "Pitch Yaw Roll (Y Z X)"
					extra = ""
					notes = ""
					description = "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis."
					choices = {}
				}
				"parentname":
				{
					typename = "targetname"
					shortinfo = "Parent"
					extra = ""
					notes = ""
					description = "Specifies a movement parent. An entity will maintain its initial offset from its parent. An attachment point can be added to the end of the name, separated by a comma."
					choices = {}
				}
			}
		}
		
	}
	water = 
	{
		water_lod_control = 
		{
			description = "water_lod_control is a  point entity available in all Source games. It is used to control the LOD behavior of any water in the map. If your map has water, this entity is required. VBSP will add one in if it's missing.\nThe properties of this entity apply to the whole map. Multiple instances of this entity within a map may cause errors."
			flagnotes = ""
			flags = {}
			keyvalnotes = ""
			keyvalues = 
			{
				"UNKNOWN_KEY_NAME_1":
				{
					typename = "float"
					shortinfo = "Start Transition to Cheap Water"
					extra = ""
					notes = ""
					description = "This is the distance from the camera that water will start transitioning to cheap water, in inches."
					choices = {}
				}
				"UNKNOWN_KEY_NAME_2":
				{
					typename = "float"
					shortinfo = "End Transition to Cheap Water"
					extra = ""
					notes = ""
					description = "This is the distance from the camera that water will finish transitioning to cheap water, in inches."
					choices = {}
				}
				"targetname":
				{
					typename = "string"
					shortinfo = "Name"
					extra = ""
					notes = ""
					description = "The targetname that other entities refer to this entity by."
					choices = {}
				}
				"vscripts":
				{
					typename = "scriptlist"
					shortinfo = "Entity Scripts"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Space delimited list of VScript files (without file extension) that are executed after all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
					choices = {}
				}
				"thinkfunction":
				{
					typename = "string"
					shortinfo = "Script think function"
					extra = "(in all games since [Left 4 Dead 2])"
					notes = ""
					description = "Name of a function in this entity's script which will be called automatically every 100 milliseconds (ten times a second) for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. �Note:�Try to avoid expensive operations in this function, as it may cause performance problems."
					choices = {}
				}
			}
		}
		
	}
	worldspawn = 
	{
		worldspawn = 
		{
			description = "Worldspawn (or just 'the world') is the single entity that stores the noninteractive parts of a map, alongside some global configuration options. In other words:\nSome other notes:"
			flagnotes = ""
			flags = {}
			keyvalnotes = "Tip:Access these properties in Hammer with Main menu > Map > Map properties..."
			keyvalues = {}
		}
		
	}
	
}
